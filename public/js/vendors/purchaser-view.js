/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["purchaser-view"],{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"isVisible\", \"selectedDate\", \"purchaserId\", \"onEdit\", \"eventId\"],\n  data: function data() {\n    return {\n      title: \"\",\n      data: \"2024-01-01\"\n    };\n  },\n  created: function created() {\n    this.initializeModal();\n  },\n  watch: {\n    isVisible: function isVisible(newVal) {\n      if (newVal) {\n        this.initializeModal();\n      }\n    }\n  },\n  methods: {\n    closeModal: function closeModal() {\n      this.$emit(\"close-modal\");\n    },\n    initializeModal: function initializeModal() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var eventResponse, eventData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this.onEdit) {\n                _context.next = 12;\n                break;\n              }\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(\"/calendar/events/\".concat(_this.eventId));\n            case 4:\n              eventResponse = _context.sent;\n              eventData = eventResponse.data;\n              _this.title = eventData.title;\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(\"Error fetching event data:\", _context.t0);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 9]]);\n      }))();\n    },\n    processEvent: function processEvent() {\n      var _this2 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var csrfToken, endpoint, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this2.$emit(\"add-event\", {\n                title: _this2.title,\n                date: _this2.selectedDate\n              });\n              _context2.prev = 1;\n              csrfToken = document.cookie.replace(/(?:(?:^|.*;\\s*)csrfToken\\s*=\\s*([^;]*).*$)|^.*$/, \"$1\");\n              axios.defaults.headers.common[\"X-CSRF-Token\"] = csrfToken;\n              endpoint = _this2.onEdit ? \"/calendar/update-event/\".concat(_this2.eventId) : \"/calendar/add-event\";\n              _context2.next = 7;\n              return axios.post(endpoint, {\n                date: _this2.selectedDate,\n                title: _this2.title,\n                purchaser_id: _this2.purchaserId\n              });\n            case 7:\n              response = _context2.sent;\n              _this2.$emit(\"eventStored\");\n              _this2.isModalVisible = false;\n              _context2.next = 15;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](1);\n              alert(\"Error: Failed to add event.\");\n            case 15:\n              _this2.title = \"\";\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 12]]);\n      }))();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"isVisible\", \"file\"],\n  methods: {\n    confirmDelete: function confirmDelete() {\n      if (confirm(\"Are you sure you want to delete this file?\")) {\n        this.deleteFile();\n      }\n    },\n    deleteFile: function deleteFile() {\n      var _this = this;\n      console.log(\"Delete\", this.file);\n      axios[\"delete\"](\"/purchaser/media/\".concat(this.file.file.id)).then(function (response) {\n        _this.$emit(\"fileDeleted\");\n        _this.closeModal();\n      })[\"catch\"](function (error) {\n        console.error(\"Error deleting file\", error);\n      });\n    },\n    openInNewTab: function openInNewTab() {\n      window.open(this.file.serverId, \"_blank\");\n      this.closeModal();\n    },\n    downloadFile: function downloadFile() {\n      var link = document.createElement(\"a\");\n      link.href = this.file.serverId;\n      link.target = \"_blank\";\n      link.download = this.file.file.name;\n      link.click();\n      this.closeModal();\n    },\n    closeModal: function closeModal() {\n      this.$emit(\"close\");\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vcmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0ZpbGVBY3Rpb25zTW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFvREEsaUVBQWU7RUFDWEEsS0FBSyxFQUFFLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQztFQUU1QkMsT0FBTyxFQUFFO0lBQ0xDLGFBQWEsV0FBYkEsYUFBYUEsQ0FBQSxFQUFHO01BQ1osSUFBSUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLEVBQUU7UUFDdkQsSUFBSSxDQUFDQyxVQUFVLENBQUMsQ0FBQztNQUNyQjtJQUNKLENBQUM7SUFDREEsVUFBVSxXQUFWQSxVQUFVQSxDQUFBLEVBQUc7TUFBQSxJQUFBQyxLQUFBO01BQ1RDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNDLElBQUksQ0FBQztNQUNoQ0MsS0FBSSxVQUNPLHFCQUFBQyxNQUFBLENBQXFCLElBQUksQ0FBQ0YsSUFBSSxDQUFDQSxJQUFJLENBQUNHLEVBQUUsQ0FBRSxFQUM5Q0MsSUFBSSxDQUFDLFVBQUNDLFFBQVEsRUFBSztRQUNoQlIsS0FBSSxDQUFDUyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3pCVCxLQUFJLENBQUNVLFVBQVUsQ0FBQyxDQUFDO01BQ3JCLENBQUMsVUFDSyxDQUFDLFVBQUNDLEtBQUssRUFBSztRQUNkVixPQUFPLENBQUNVLEtBQUssQ0FBQyxxQkFBcUIsRUFBRUEsS0FBSyxDQUFDO01BQy9DLENBQUMsQ0FBQztJQUNWLENBQUM7SUFDREMsWUFBWSxXQUFaQSxZQUFZQSxDQUFBLEVBQUc7TUFDWEMsTUFBTSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDWCxJQUFJLENBQUNZLFFBQVEsRUFBRSxRQUFRLENBQUM7TUFDekMsSUFBSSxDQUFDTCxVQUFVLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0RNLFlBQVksV0FBWkEsWUFBWUEsQ0FBQSxFQUFHO01BQ1gsSUFBTUMsSUFBRyxHQUFJQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxHQUFHLENBQUM7TUFDeENGLElBQUksQ0FBQ0csSUFBRyxHQUFJLElBQUksQ0FBQ2pCLElBQUksQ0FBQ1ksUUFBUTtNQUM5QkUsSUFBSSxDQUFDSSxNQUFLLEdBQUksUUFBUTtNQUN0QkosSUFBSSxDQUFDSyxRQUFPLEdBQUksSUFBSSxDQUFDbkIsSUFBSSxDQUFDQSxJQUFJLENBQUNvQixJQUFJO01BQ25DTixJQUFJLENBQUNPLEtBQUssQ0FBQyxDQUFDO01BQ1osSUFBSSxDQUFDZCxVQUFVLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0RBLFVBQVUsV0FBVkEsVUFBVUEsQ0FBQSxFQUFHO01BQ1QsSUFBSSxDQUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ3ZCO0VBQ0o7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0ZpbGVBY3Rpb25zTW9kYWwudnVlPzA5OGMiXSwic291cmNlc0NvbnRlbnQiOlsiPCEtLSBGaWxlQWN0aW9uc01vZGFsLnZ1ZSAtLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlIHNob3dcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIHYtaWY9XCJpc1Zpc2libGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyB0aGlzLmZpbGUuZmlsZS5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgIDwvaDU+XG5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImNsb3NlTW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkNsb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJtb2RhbC1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAg4YOZ4YOd4YOb4YOU4YOc4YOi4YOQ4YOg4YOYOiB7eyB0aGlzLmZpbGUuZmlsZS5jb21tZW50IH19XG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjb25maXJtRGVsZXRlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgbWwtMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJvcGVuSW5OZXdUYWJcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBWaWV3XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIG1sLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZG93bmxvYWRGaWxlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWRcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbXCJpc1Zpc2libGVcIiwgXCJmaWxlXCJdLFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjb25maXJtRGVsZXRlKCkge1xuICAgICAgICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgZmlsZT9cIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZUZpbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlRmlsZSgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRlXCIsIHRoaXMuZmlsZSk7XG4gICAgICAgICAgICBheGlvc1xuICAgICAgICAgICAgICAgIC5kZWxldGUoYC9wdXJjaGFzZXIvbWVkaWEvJHt0aGlzLmZpbGUuZmlsZS5pZH1gKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiZmlsZURlbGV0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGVsZXRpbmcgZmlsZVwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW5Jbk5ld1RhYigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuZmlsZS5zZXJ2ZXJJZCwgXCJfYmxhbmtcIik7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWRGaWxlKCkge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgbGluay5ocmVmID0gdGhpcy5maWxlLnNlcnZlcklkO1xuICAgICAgICAgICAgbGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xuICAgICAgICAgICAgbGluay5kb3dubG9hZCA9IHRoaXMuZmlsZS5maWxlLm5hbWU7XG4gICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbInByb3BzIiwibWV0aG9kcyIsImNvbmZpcm1EZWxldGUiLCJjb25maXJtIiwiZGVsZXRlRmlsZSIsIl90aGlzIiwiY29uc29sZSIsImxvZyIsImZpbGUiLCJheGlvcyIsImNvbmNhdCIsImlkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJjbG9zZU1vZGFsIiwiZXJyb3IiLCJvcGVuSW5OZXdUYWIiLCJ3aW5kb3ciLCJvcGVuIiwic2VydmVySWQiLCJkb3dubG9hZEZpbGUiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsInRhcmdldCIsImRvd25sb2FkIiwibmFtZSIsImNsaWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _vendors_vuedraggable_src_vuedraggable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendors/vuedraggable/src/vuedraggable */ \"./resources/js/app/vendors/vuedraggable/src/vuedraggable.js\");\n/* harmony import */ var _vuelidate_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vuelidate/core */ \"./node_modules/@vuelidate/core/dist/index.mjs\");\n/* harmony import */ var vue_upload_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue-upload-component */ \"./node_modules/vue-upload-component/dist/vue-upload-component.js\");\n/* harmony import */ var vue_upload_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(vue_upload_component__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var vue3_carousel_dist_carousel_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vue3-carousel/dist/carousel.css */ \"./node_modules/vue3-carousel/dist/carousel.css\");\n/* harmony import */ var vue3_carousel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vue3-carousel */ \"./node_modules/vue3-carousel/dist/carousel.es.js\");\n/* harmony import */ var vue_filepond__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vue-filepond */ \"./node_modules/vue-filepond/dist/vue-filepond.js\");\n/* harmony import */ var vue_filepond__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(vue_filepond__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var qalendar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! qalendar */ \"./node_modules/qalendar/dist/qalendar.es.js\");\n/* harmony import */ var _components_CalendarEventModal_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/CalendarEventModal.vue */ \"./resources/js/app/components/CalendarEventModal.vue\");\n/* harmony import */ var _components_FileActionsModal_vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/FileActionsModal.vue */ \"./resources/js/app/components/FileActionsModal.vue\");\n/* harmony import */ var filepond_dist_filepond_min_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! filepond/dist/filepond.min.css */ \"./node_modules/filepond/dist/filepond.min.css\");\n/* harmony import */ var filepond_plugin_image_preview_dist_filepond_plugin_image_preview_min_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css */ \"./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\");\n/* harmony import */ var filepond_plugin_image_preview__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! filepond-plugin-image-preview */ \"./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js\");\n/* harmony import */ var filepond_plugin_image_preview__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(filepond_plugin_image_preview__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_12__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return r; }; var t, r = {}, e = Object.prototype, n = e.hasOwnProperty, o = \"function\" == typeof Symbol ? Symbol : {}, i = o.iterator || \"@@iterator\", a = o.asyncIterator || \"@@asyncIterator\", u = o.toStringTag || \"@@toStringTag\"; function c(t, r, e, n) { return Object.defineProperty(t, r, { value: e, enumerable: !n, configurable: !n, writable: !n }); } try { c({}, \"\"); } catch (t) { c = function c(t, r, e) { return t[r] = e; }; } function h(r, e, n, o) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype); return c(a, \"_invoke\", function (r, e, n) { var o = 1; return function (i, a) { if (3 === o) throw Error(\"Generator is already running\"); if (4 === o) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var u = n.delegate; if (u) { var c = d(u, n); if (c) { if (c === f) continue; return c; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (1 === o) throw o = 4, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = 3; var h = s(r, e, n); if (\"normal\" === h.type) { if (o = n.done ? 4 : 2, h.arg === f) continue; return { value: h.arg, done: n.done }; } \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg); } }; }(r, n, new Context(o || [])), !0), a; } function s(t, r, e) { try { return { type: \"normal\", arg: t.call(r, e) }; } catch (t) { return { type: \"throw\", arg: t }; } } r.wrap = h; var f = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var l = {}; c(l, i, function () { return this; }); var p = Object.getPrototypeOf, y = p && p(p(x([]))); y && y !== e && n.call(y, i) && (l = y); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l); function g(t) { [\"next\", \"throw\", \"return\"].forEach(function (r) { c(t, r, function (t) { return this._invoke(r, t); }); }); } function AsyncIterator(t, r) { function e(o, i, a, u) { var c = s(t[o], t, i); if (\"throw\" !== c.type) { var h = c.arg, f = h.value; return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) { e(\"next\", t, a, u); }, function (t) { e(\"throw\", t, a, u); }) : r.resolve(f).then(function (t) { h.value = t, a(h); }, function (t) { return e(\"throw\", t, a, u); }); } u(c.arg); } var o; c(this, \"_invoke\", function (t, n) { function i() { return new r(function (r, o) { e(t, n, r, o); }); } return o = o ? o.then(i, i) : i(); }, !0); } function d(r, e) { var n = e.method, o = r.i[n]; if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f; var i = s(o, r.i, e.arg); if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f; var a = i.arg; return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f); } function w(t) { this.tryEntries.push(t); } function m(r) { var e = r[4] || {}; e.type = \"normal\", e.arg = t, r[4] = e; } function Context(t) { this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0); } function x(r) { if (null != r) { var e = r[i]; if (e) return e.call(r); if (\"function\" == typeof r.next) return r; if (!isNaN(r.length)) { var o = -1, a = function e() { for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(_typeof(r) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) { var r = \"function\" == typeof t && t.constructor; return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name)); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t; }, r.awrap = function (t) { return { __await: t }; }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () { return this; }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(h(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, g(v), c(v, u, \"Generator\"), c(v, i, function () { return this; }), c(v, \"toString\", function () { return \"[object Generator]\"; }), r.keys = function (t) { var r = Object(t), e = []; for (var n in r) e.unshift(n); return function t() { for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t; return t.done = !0, t; }; }, r.values = x, Context.prototype = { constructor: Context, reset: function reset(r) { if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0][4]; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(r) { if (this.done) throw r; var e = this; function n(t) { a.type = \"throw\", a.arg = r, e.next = t; } for (var o = e.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i[4], u = this.prev, c = i[1], h = i[2]; if (-1 === i[0]) return n(\"end\"), !1; if (!c && !h) throw Error(\"try statement without catch or finally\"); if (null != i[0] && i[0] <= u) { if (u < c) return this.method = \"next\", this.arg = t, n(c), !0; if (u < h) return n(h), !1; } } }, abrupt: function abrupt(t, r) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var n = this.tryEntries[e]; if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) { var o = n; break; } } o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i); }, complete: function complete(t, r) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f; }, finish: function finish(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[2] === t) return this.complete(e[4], e[3]), m(e), f; } }, \"catch\": function _catch(t) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var e = this.tryEntries[r]; if (e[0] === t) { var n = e[4]; if (\"throw\" === n.type) { var o = n.arg; m(e); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(r, e, n) { return this.delegate = { i: x(r), r: e, n: n }, \"next\" === this.method && (this.arg = t), f; } }, r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n\n\n\n// Import FilePond styles\n\n\n\n\nvar FilePond = vue_filepond__WEBPACK_IMPORTED_MODULE_5___default()((filepond_plugin_image_preview__WEBPACK_IMPORTED_MODULE_11___default()));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: [\"user\", \"model\", \"setting\", \"additional\"],\n  components: {\n    FileUpload: (vue_upload_component__WEBPACK_IMPORTED_MODULE_2___default()),\n    draggable: _vendors_vuedraggable_src_vuedraggable__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    FilePond: FilePond,\n    Carousel: vue3_carousel__WEBPACK_IMPORTED_MODULE_4__.Carousel,\n    Slide: vue3_carousel__WEBPACK_IMPORTED_MODULE_4__.Slide,\n    Pagination: vue3_carousel__WEBPACK_IMPORTED_MODULE_4__.Pagination,\n    Navigation: vue3_carousel__WEBPACK_IMPORTED_MODULE_4__.Navigation,\n    Qalendar: qalendar__WEBPACK_IMPORTED_MODULE_6__.Qalendar,\n    CalendarEventModal: _components_CalendarEventModal_vue__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    FileActionsModal: _components_FileActionsModal_vue__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n  },\n  setup: function setup(props, context) {\n    return {\n      v$: (0,_vuelidate_core__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()\n    };\n  },\n  created: function created() {\n    this.fetchPurchaserFiles();\n    this.fetchGalleryImages();\n    this.m = this.attributeInit;\n  },\n  mounted: function mounted() {\n    this.fetchEvents();\n    this.fetchFolderStructure();\n    console.log(this.additional.evaluations);\n    this.v$.model.$touch();\n  },\n  data: function data() {\n    return _defineProperty(_defineProperty(_defineProperty({\n      selectedQalendarDate: null,\n      isModalVisible: false,\n      activatedFile: null,\n      isFileActionsModalVisible: false,\n      isModalOnEdit: false,\n      eventId: 0,\n      selectedDate: \"\",\n      events: [],\n      purchaserFiles: [],\n      galleryImages: [],\n      config: {\n        defaultMode: \"month\",\n        disableModes: [\"week\", \"day\"]\n      },\n      subjects: [],\n      selector: \"\",\n      step: false,\n      keys: [],\n      isFullScreenOpen: false,\n      fullScreenImageSrc: \"\",\n      selectBuilder: [],\n      // Folder Structure\n      folderStructure: {}\n    }, \"selectedDate\", null), \"selectedLocation\", null), \"selectedImage\", null);\n  },\n  watch: {},\n  validations: function validations() {\n    return {\n      model: {}\n    };\n  },\n  computed: {\n    attributeInit: function attributeInit() {\n      return this.model;\n    }\n  },\n  methods: {\n    handleEventClick: function handleEventClick(event) {\n      console.log(new Date(2024, 0, 8));\n      console.log(\"Event: \" + event.title + \"\\nTime: \" + event.time.start);\n\n      // Convert event start time to a Date object\n      var eventDate = new Date(event.time.start);\n      this.selectedQalendarDate = new Date(2024, 0, 8); // Set selected date\n      console.log(this.selectedQalendarDate);\n    },\n    handleFilePondInit: function handleFilePondInit(pond) {},\n    handleFilePondInitGallery: function handleFilePondInitGallery(pond) {},\n    fetchFolderStructure: function fetchFolderStructure() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/api/folders/\" + _this.m.id);\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n            case 6:\n              data = _context.sent;\n              _this.folderStructure = data;\n              _context.next = 13;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error fetching folder structure:\", _context.t0);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 10]]);\n      }))();\n    },\n    toggleLocations: function toggleLocations(date) {\n      this.selectedDate = this.selectedDate === date ? null : date;\n      this.selectedLocation = null;\n    },\n    isDateSelected: function isDateSelected(date) {\n      return this.selectedDate === date;\n    },\n    toggleFiles: function toggleFiles(location) {\n      this.selectedLocation = this.selectedLocation === location ? null : location;\n    },\n    isLocationSelected: function isLocationSelected(location) {\n      return this.selectedLocation === location;\n    },\n    openImage: function openImage(file) {\n      window.open(file.file_url, \"_blank\");\n    },\n    initializeSubjects: function initializeSubjects() {\n      this.subjects = [{\n        id: 1,\n        name: \"Accounting\",\n        geo_name: \"აღრიცხვის ფაილები\",\n        ref: \"accountingPond\",\n        files: this.purchaserFiles ? this.purchaserFiles.AccountingFiles : []\n      }, {\n        id: 2,\n        name: \"Performance Acts\",\n        geo_name: \"შესრულების აქტები\",\n        ref: \"performanceActsPond\",\n        files: this.purchaserFiles ? this.purchaserFiles.performanceActsFiles : []\n      }, {\n        id: 3,\n        name: \"Technical Documentation\",\n        geo_name: \"ტექნიკური დოკუმენტაცია\",\n        ref: \"technicalDocumentationPond\",\n        files: this.purchaserFiles ? this.purchaserFiles.technicalDocumentationFiles : []\n      }\n      // {\n      //     id: 4,\n      //     name: \"Additional Information\",\n      //     geo_name: \"დამატებითი ინფორმაცია/ფაილები\",\n      //     ref: \"additionalInformationPond\",\n      //     files: this.purchaserFiles\n      //         ? this.purchaserFiles.additionalInformationFiles\n      //         : [],\n      // },\n      ];\n    },\n    fetchAfterDelete: function fetchAfterDelete() {\n      this.fetchGalleryImages();\n      this.fetchPurchaserFiles();\n    },\n    fetchPurchaserFiles: function fetchPurchaserFiles() {\n      var _this2 = this;\n      axios.get(\"/purchaser/\".concat(this.model.id, \"/files\")).then(function (response) {\n        _this2.purchaserFiles = response.data;\n        _this2.initializeSubjects();\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching purchaser files\", error);\n      });\n    },\n    fetchGalleryImages: function fetchGalleryImages() {\n      var _this3 = this;\n      axios.get(\"/purchaserGallery/\".concat(this.model.id)).then(function (response) {\n        _this3.galleryImages = response.data;\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching purchaser files\", error);\n      });\n    },\n    onActivateFile: function onActivateFile(file) {\n      this.activatedFile = file;\n      this.isFileActionsModalVisible = true;\n      this.fetchPurchaserFiles();\n    },\n    closeFullScreen: function closeFullScreen() {\n      this.isFullScreenOpen = false;\n      this.fullScreenImageSrc = \"\";\n    },\n    onSlideClick: function onSlideClick(imageSrc) {\n      this.isFullScreenOpen = true;\n      this.fullScreenImageSrc = imageSrc;\n    },\n    fileProcessed: function fileProcessed(item, file) {\n      // this.fetchPurchaserFiles();\n      // this.fetchGalleryImages();\n    },\n    handleDateClicked: function handleDateClicked(date) {\n      this.isModalOnEdit = false;\n      this.isModalVisible = true;\n      this.eventId = 0;\n      this.selectedDate = date;\n    },\n    closeModal: function closeModal() {\n      this.isModalVisible = false;\n      this.isFileActionsModalVisible = false;\n    },\n    handleEditEvent: function handleEditEvent(event_id) {\n      this.eventId = event_id;\n      this.isModalVisible = true;\n      this.isModalOnEdit = true;\n    },\n    deleteFile: function deleteFile(file) {\n      var _this4 = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var userConfirmed, response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              userConfirmed = confirm(\"\\u10D3\\u10D0\\u10E0\\u10EC\\u10DB\\u10E3\\u10DC\\u10D4\\u10D1\\u10E3\\u10DA\\u10D8 \\u10EE\\u10D0\\u10E0\\u10D7 \\u10E0\\u10DD\\u10DB \\u10D2\\u10D8\\u10DC\\u10D3\\u10D0\\u10D7 \\u10E4\\u10D0\\u10D8\\u10DA\\u10D8\\u10E1 \\u10EC\\u10D0\\u10E8\\u10DA\\u10D0: \".concat(file.file_name, \"?\"));\n              if (userConfirmed) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 4:\n              _context2.next = 6;\n              return fetch(\"/api/delete-file\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  fileName: file.file_name\n                })\n              });\n            case 6:\n              response = _context2.sent;\n              if (response.ok) {\n                _this4.fetchFolderStructure();\n                alert(\"\\u10E4\\u10D0\\u10D8\\u10DA\\u10D8 \".concat(file.file_name, \" \\u10EC\\u10D0\\u10E0\\u10DB\\u10D0\\u10E2\\u10D4\\u10D1\\u10D8\\u10D7 \\u10EC\\u10D0\\u10D8\\u10E8\\u10D0\\u10DA\\u10D0.\"));\n              } else {\n                console.error(\"Failed to delete file.\");\n              }\n              _context2.next = 13;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"Error deleting file:\", _context2.t0);\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 10]]);\n      }))();\n    },\n    handleDeleteEvent: function handleDeleteEvent(event_id) {\n      var _this5 = this;\n      var isConfirmed = window.confirm(\"Are you sure you want to delete this event?\");\n      if (isConfirmed) {\n        axios[\"delete\"](\"/calendar/events/\".concat(event_id)).then(function (response) {\n          console.log(\"Event deleted successfully:\", response.data);\n          _this5.fetchEvents();\n        })[\"catch\"](function (error) {\n          console.error(\"Error deleting event:\", error);\n        });\n      } else {\n        console.log(\"Deletion canceled\");\n      }\n    },\n    addEvent: function addEvent(event) {\n      this.fetchEvents();\n      this.isModalVisible = false;\n    },\n    fetchEvents: function fetchEvents() {\n      var _this6 = this;\n      axios.get(\"/calendar/events/purchaser/\".concat(this.model.id)).then(function (response) {\n        _this6.events = response.data;\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching events:\", error);\n      });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64":
/*!********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64 ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\nvar _hoisted_1 = {\n  key: 0,\n  \"class\": \"modal fade show\",\n  tabindex: \"-1\",\n  role: \"dialog\"\n};\nvar _hoisted_2 = {\n  \"class\": \"modal-dialog\",\n  role: \"document\"\n};\nvar _hoisted_3 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_4 = {\n  \"class\": \"modal-header\"\n};\nvar _hoisted_5 = {\n  \"class\": \"modal-title\"\n};\nvar _hoisted_6 = {\n  \"class\": \"modal-body\"\n};\nvar _hoisted_7 = {\n  \"class\": \"form-group\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.isVisible ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_4, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h5\", _hoisted_5, \" Add New Event On \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(this.selectedDate), 1 /* TEXT */), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"button\",\n    \"class\": \"close\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.closeModal && $options.closeModal.apply($options, arguments);\n    }),\n    \"aria-label\": \"Close\"\n  }, _cache[3] || (_cache[3] = [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"×\", -1 /* HOISTED */)]))]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_6, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(function () {\n      return $options.processEvent && $options.processEvent.apply($options, arguments);\n    }, [\"prevent\"]))\n  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_7, [_cache[4] || (_cache[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"for\": \"eventTitle\"\n  }, \"Title: \", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.title = $event;\n    }),\n    id: \"eventTitle\",\n    type: \"text\",\n    placeholder: \"Title\",\n    \"class\": \"form-control\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $data.title]])]), _cache[5] || (_cache[5] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"submit\",\n    \"class\": \"btn btn-primary\"\n  }, \" Submit \", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])])])])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdLnVzZVswXSEuL3Jlc291cmNlcy9qcy9hcHAvY29tcG9uZW50cy9DYWxlbmRhckV2ZW50TW9kYWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWMwZGY4YzY0IiwibWFwcGluZ3MiOiI7Ozs7Ozs7RUFBQUEsR0FBQTtFQUVTLFNBQU0saUJBQWlCO0VBQUNDLFFBQVEsRUFBQyxJQUFJO0VBQUNDLElBQUksRUFBQzs7O0VBQ3ZDLFNBQU0sY0FBYztFQUFDQSxJQUFJLEVBQUM7OztFQUN0QixTQUFNO0FBQWU7O0VBQ2pCLFNBQU07QUFBYzs7RUFDakIsU0FBTTtBQUFhOztFQVl0QixTQUFNO0FBQVk7O0VBRVYsU0FBTTtBQUFZOztTQWxCb0JDLE1BQUEsQ0FBQUMsU0FBUyxzREFBeEVDLHVEQUFBLENBcUNNLE9BckNOQyxVQXFDTSxHQXBDRkMsdURBQUEsQ0FtQ00sT0FuQ05DLFVBbUNNLEdBbENGRCx1REFBQSxDQWlDTSxPQWpDTkUsVUFpQ00sR0FoQ0ZGLHVEQUFBLENBWU0sT0FaTkcsVUFZTSxHQVhGSCx1REFBQSxDQUVLLE1BRkxJLFVBRUssRUFGbUIsb0JBQ0gsR0FBQUMsb0RBQUEsTUFBUUMsWUFBWSxrQkFFekNOLHVEQUFBLENBT1M7SUFOTE8sSUFBSSxFQUFDLFFBQVE7SUFDYixTQUFNLE9BQU87SUFDWkMsT0FBSyxFQUFBQyxNQUFBLFFBQUFBLE1BQUE7TUFBQSxPQUFFQyxRQUFBLENBQUFDLFVBQUEsSUFBQUQsUUFBQSxDQUFBQyxVQUFBLENBQUFDLEtBQUEsQ0FBQUYsUUFBQSxFQUFBRyxTQUFBLENBQVU7SUFBQTtJQUNsQixZQUFVLEVBQUM7Z0NBRVhiLHVEQUFBLENBQXVDO0lBQWpDLGFBQVcsRUFBQztFQUFNLEdBQUMsR0FBTywwQkFHeENBLHVEQUFBLENBa0JNLE9BbEJOYyxVQWtCTSxHQWpCRmQsdURBQUEsQ0FnQk87SUFoQkFlLFFBQU0sRUFBQU4sTUFBQSxRQUFBQSxNQUFBLE1BbkJqQ08sa0RBQUE7TUFBQSxPQW1CMkNOLFFBQUEsQ0FBQU8sWUFBQSxJQUFBUCxRQUFBLENBQUFPLFlBQUEsQ0FBQUwsS0FBQSxDQUFBRixRQUFBLEVBQUFHLFNBQUEsQ0FBWTtJQUFBO01BQy9CYix1REFBQSxDQVdNLE9BWE5rQixVQVdNLDZCQVZGbEIsdURBQUEsQ0FBdUM7SUFBaEMsT0FBSTtFQUFZLEdBQUMsU0FBTywwRUFFL0JBLHVEQUFBLENBT0U7SUE5QjlCLHVCQUFBUyxNQUFBLFFBQUFBLE1BQUEsZ0JBQUFVLE1BQUE7TUFBQSxPQXdCeUNDLEtBQUEsQ0FBQUMsS0FBSyxHQUFBRixNQUFBO0lBQUE7SUFDZEcsRUFBRSxFQUFDLFlBQVk7SUFDZmYsSUFBSSxFQUFDLE1BQU07SUFDWGdCLFdBQVcsRUFBQyxPQUFPO0lBQ25CLFNBQU0sY0FBYztJQUNwQkMsUUFBUSxFQUFSO2lGQUxTSixLQUFBLENBQUFDLEtBQUssaUNBUXRCckIsdURBQUEsQ0FFUztJQUZETyxJQUFJLEVBQUMsUUFBUTtJQUFDLFNBQU07S0FBa0IsVUFFOUMsMkRBbEN4QmtCLHVEQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0NhbGVuZGFyRXZlbnRNb2RhbC52dWU/MWUxOCJdLCJzb3VyY2VzQ29udGVudCI6WyI8IS0tIE5ld0V2ZW50TW9kYWwudnVlIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlIHNob3dcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIHYtaWY9XCJpc1Zpc2libGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBBZGQgTmV3IEV2ZW50IE9uIHt7IHRoaXMuc2VsZWN0ZWREYXRlIH19XG4gICAgICAgICAgICAgICAgICAgIDwvaDU+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjbG9zZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjbG9zZU1vZGFsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZVwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD1cInByb2Nlc3NFdmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiZXZlbnRUaXRsZVwiPlRpdGxlOiA8L2xhYmVsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJ0aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZXZlbnRUaXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUaXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1Ym1pdFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IFtcImlzVmlzaWJsZVwiLCBcInNlbGVjdGVkRGF0ZVwiLCBcInB1cmNoYXNlcklkXCIsIFwib25FZGl0XCIsIFwiZXZlbnRJZFwiXSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICAgICAgICBkYXRhOiBcIjIwMjQtMDEtMDFcIixcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGFsKCk7XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICBpc1Zpc2libGUobmV3VmFsKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplTW9kYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJjbG9zZS1tb2RhbFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgaW5pdGlhbGl6ZU1vZGFsKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMub25FZGl0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRSZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChcbiAgICAgICAgICAgICAgICAgICAgICAgIGAvY2FsZW5kYXIvZXZlbnRzLyR7dGhpcy5ldmVudElkfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnREYXRhID0gZXZlbnRSZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gZXZlbnREYXRhLnRpdGxlO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBldmVudCBkYXRhOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBwcm9jZXNzRXZlbnQoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwiYWRkLWV2ZW50XCIsIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLnNlbGVjdGVkRGF0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjc3JmVG9rZW4gPSBkb2N1bWVudC5jb29raWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgLyg/Oig/Ol58Lio7XFxzKiljc3JmVG9rZW5cXHMqPVxccyooW147XSopLiokKXxeLiokLyxcbiAgICAgICAgICAgICAgICAgICAgXCIkMVwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIlgtQ1NSRi1Ub2tlblwiXSA9IGNzcmZUb2tlbjtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5vbkVkaXRcbiAgICAgICAgICAgICAgICAgICAgPyBgL2NhbGVuZGFyL3VwZGF0ZS1ldmVudC8ke3RoaXMuZXZlbnRJZH1gXG4gICAgICAgICAgICAgICAgICAgIDogXCIvY2FsZW5kYXIvYWRkLWV2ZW50XCI7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoZW5kcG9pbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy5zZWxlY3RlZERhdGUsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZXJfaWQ6IHRoaXMucHVyY2hhc2VySWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcImV2ZW50U3RvcmVkXCIpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc01vZGFsVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBGYWlsZWQgdG8gYWRkIGV2ZW50LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSBcIlwiO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG4iXSwibmFtZXMiOlsia2V5IiwidGFiaW5kZXgiLCJyb2xlIiwiJHByb3BzIiwiaXNWaXNpYmxlIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ob2lzdGVkXzEiLCJfY3JlYXRlRWxlbWVudFZOb2RlIiwiX2hvaXN0ZWRfMiIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwiX2hvaXN0ZWRfNSIsIl90b0Rpc3BsYXlTdHJpbmciLCJzZWxlY3RlZERhdGUiLCJ0eXBlIiwib25DbGljayIsIl9jYWNoZSIsIiRvcHRpb25zIiwiY2xvc2VNb2RhbCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2hvaXN0ZWRfNiIsIm9uU3VibWl0IiwiX3dpdGhNb2RpZmllcnMiLCJwcm9jZXNzRXZlbnQiLCJfaG9pc3RlZF83IiwiJGV2ZW50IiwiJGRhdGEiLCJ0aXRsZSIsImlkIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsIl9jcmVhdGVDb21tZW50Vk5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\nvar _hoisted_1 = {\n  key: 0,\n  \"class\": \"modal fade show\",\n  tabindex: \"-1\",\n  role: \"dialog\"\n};\nvar _hoisted_2 = {\n  \"class\": \"modal-dialog\",\n  role: \"document\"\n};\nvar _hoisted_3 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_4 = {\n  \"class\": \"modal-header\"\n};\nvar _hoisted_5 = {\n  \"class\": \"modal-title\"\n};\nvar _hoisted_6 = {\n  \"class\": \"modal-body\"\n};\nvar _hoisted_7 = {\n  \"class\": \"modal-description\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.isVisible ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_4, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h5\", _hoisted_5, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(this.file.file.name), 1 /* TEXT */), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"button\",\n    \"class\": \"close\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.closeModal && $options.closeModal.apply($options, arguments);\n    }),\n    \"aria-label\": \"Close\"\n  }, _cache[4] || (_cache[4] = [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"×\", -1 /* HOISTED */)]))]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_6, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", _hoisted_7, \" კომენტარი: \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(this.file.file.comment), 1 /* TEXT */), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"button\",\n    \"class\": \"btn btn-primary\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return $options.confirmDelete && $options.confirmDelete.apply($options, arguments);\n    })\n  }, \" Delete \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"button\",\n    \"class\": \"btn btn-secondary ml-1\",\n    onClick: _cache[2] || (_cache[2] = function () {\n      return $options.openInNewTab && $options.openInNewTab.apply($options, arguments);\n    })\n  }, \" View \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    type: \"button\",\n    \"class\": \"btn btn-success ml-1\",\n    onClick: _cache[3] || (_cache[3] = function () {\n      return $options.downloadFile && $options.downloadFile.apply($options, arguments);\n    })\n  }, \" Download \")])])])])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdLnVzZVswXSEuL3Jlc291cmNlcy9qcy9hcHAvY29tcG9uZW50cy9GaWxlQWN0aW9uc01vZGFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lZGZhZjI2ZSIsIm1hcHBpbmdzIjoiOzs7Ozs7O0VBQUFBLEdBQUE7RUFHUyxTQUFNLGlCQUFpQjtFQUFDQyxRQUFRLEVBQUMsSUFBSTtFQUFDQyxJQUFJLEVBQUM7OztFQUN2QyxTQUFNLGNBQWM7RUFBQ0EsSUFBSSxFQUFDOzs7RUFDdEIsU0FBTTtBQUFlOztFQUNqQixTQUFNO0FBQWM7O0VBQ2pCLFNBQU07QUFBYTs7RUFhdEIsU0FBTTtBQUFZOztFQUNoQixTQUFNO0FBQW1COztTQWxCbUJDLE1BQUEsQ0FBQUMsU0FBUyxzREFBeEVDLHVEQUFBLENBNkNNLE9BN0NOQyxVQTZDTSxHQTVDRkMsdURBQUEsQ0EyQ00sT0EzQ05DLFVBMkNNLEdBMUNGRCx1REFBQSxDQXlDTSxPQXpDTkUsVUF5Q00sR0F4Q0ZGLHVEQUFBLENBYU0sT0FiTkcsVUFhTSxHQVpGSCx1REFBQSxDQUVLLE1BRkxJLFVBRUssRUFBQUMsb0RBQUEsTUFET0MsSUFBSSxDQUFDQSxJQUFJLENBQUNDLElBQUksa0JBRzFCUCx1REFBQSxDQU9TO0lBTkxRLElBQUksRUFBQyxRQUFRO0lBQ2IsU0FBTSxPQUFPO0lBQ1pDLE9BQUssRUFBQUMsTUFBQSxRQUFBQSxNQUFBO01BQUEsT0FBRUMsUUFBQSxDQUFBQyxVQUFBLElBQUFELFFBQUEsQ0FBQUMsVUFBQSxDQUFBQyxLQUFBLENBQUFGLFFBQUEsRUFBQUcsU0FBQSxDQUFVO0lBQUE7SUFDbEIsWUFBVSxFQUFDO2dDQUVYZCx1REFBQSxDQUF1QztJQUFqQyxhQUFXLEVBQUM7RUFBTSxHQUFDLEdBQU8sMEJBR3hDQSx1REFBQSxDQXlCTSxPQXpCTmUsVUF5Qk0sR0F4QkZmLHVEQUFBLENBRUksS0FGSmdCLFVBRUksRUFGeUIsY0FDZCxHQUFBWCxvREFBQSxNQUFRQyxJQUFJLENBQUNBLElBQUksQ0FBQ1csT0FBTyxrQkFFeENqQix1REFBQSxDQU1TO0lBTExRLElBQUksRUFBQyxRQUFRO0lBQ2IsU0FBTSxpQkFBaUI7SUFDdEJDLE9BQUssRUFBQUMsTUFBQSxRQUFBQSxNQUFBO01BQUEsT0FBRUMsUUFBQSxDQUFBTyxhQUFBLElBQUFQLFFBQUEsQ0FBQU8sYUFBQSxDQUFBTCxLQUFBLENBQUFGLFFBQUEsRUFBQUcsU0FBQSxDQUFhO0lBQUE7S0FDeEIsVUFFRCxHQUNBZCx1REFBQSxDQU1TO0lBTExRLElBQUksRUFBQyxRQUFRO0lBQ2IsU0FBTSx3QkFBd0I7SUFDN0JDLE9BQUssRUFBQUMsTUFBQSxRQUFBQSxNQUFBO01BQUEsT0FBRUMsUUFBQSxDQUFBUSxZQUFBLElBQUFSLFFBQUEsQ0FBQVEsWUFBQSxDQUFBTixLQUFBLENBQUFGLFFBQUEsRUFBQUcsU0FBQSxDQUFZO0lBQUE7S0FDdkIsUUFFRCxHQUNBZCx1REFBQSxDQU1TO0lBTExRLElBQUksRUFBQyxRQUFRO0lBQ2IsU0FBTSxzQkFBc0I7SUFDM0JDLE9BQUssRUFBQUMsTUFBQSxRQUFBQSxNQUFBO01BQUEsT0FBRUMsUUFBQSxDQUFBUyxZQUFBLElBQUFULFFBQUEsQ0FBQVMsWUFBQSxDQUFBUCxLQUFBLENBQUFGLFFBQUEsRUFBQUcsU0FBQSxDQUFZO0lBQUE7S0FDdkIsWUFFRCxhQTVDcEJPLHVEQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0ZpbGVBY3Rpb25zTW9kYWwudnVlPzA5OGMiXSwic291cmNlc0NvbnRlbnQiOlsiPCEtLSBGaWxlQWN0aW9uc01vZGFsLnZ1ZSAtLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlIHNob3dcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIHYtaWY9XCJpc1Zpc2libGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyB0aGlzLmZpbGUuZmlsZS5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgIDwvaDU+XG5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImNsb3NlTW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkNsb3NlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJtb2RhbC1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAg4YOZ4YOd4YOb4YOU4YOc4YOi4YOQ4YOg4YOYOiB7eyB0aGlzLmZpbGUuZmlsZS5jb21tZW50IH19XG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjb25maXJtRGVsZXRlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgbWwtMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJvcGVuSW5OZXdUYWJcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICBWaWV3XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzIG1sLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZG93bmxvYWRGaWxlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWRcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbXCJpc1Zpc2libGVcIiwgXCJmaWxlXCJdLFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjb25maXJtRGVsZXRlKCkge1xuICAgICAgICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgZmlsZT9cIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZUZpbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlRmlsZSgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRlXCIsIHRoaXMuZmlsZSk7XG4gICAgICAgICAgICBheGlvc1xuICAgICAgICAgICAgICAgIC5kZWxldGUoYC9wdXJjaGFzZXIvbWVkaWEvJHt0aGlzLmZpbGUuZmlsZS5pZH1gKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KFwiZmlsZURlbGV0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZGVsZXRpbmcgZmlsZVwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW5Jbk5ld1RhYigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuZmlsZS5zZXJ2ZXJJZCwgXCJfYmxhbmtcIik7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZG93bmxvYWRGaWxlKCkge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgbGluay5ocmVmID0gdGhpcy5maWxlLnNlcnZlcklkO1xuICAgICAgICAgICAgbGluay50YXJnZXQgPSBcIl9ibGFua1wiO1xuICAgICAgICAgICAgbGluay5kb3dubG9hZCA9IHRoaXMuZmlsZS5maWxlLm5hbWU7XG4gICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIl0sIm5hbWVzIjpbImtleSIsInRhYmluZGV4Iiwicm9sZSIsIiRwcm9wcyIsImlzVmlzaWJsZSIsIl9jcmVhdGVFbGVtZW50QmxvY2siLCJfaG9pc3RlZF8xIiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9ob2lzdGVkXzUiLCJfdG9EaXNwbGF5U3RyaW5nIiwiZmlsZSIsIm5hbWUiLCJ0eXBlIiwib25DbGljayIsIl9jYWNoZSIsIiRvcHRpb25zIiwiY2xvc2VNb2RhbCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2hvaXN0ZWRfNiIsIl9ob2lzdGVkXzciLCJjb21tZW50IiwiY29uZmlybURlbGV0ZSIsIm9wZW5Jbk5ld1RhYiIsImRvd25sb2FkRmlsZSIsIl9jcmVhdGVDb21tZW50Vk5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\nvar _hoisted_1 = {\n  \"class\": \"container-fluid\"\n};\nvar _hoisted_2 = {\n  \"class\": \"row\"\n};\nvar _hoisted_3 = {\n  \"class\": \"col-12\"\n};\nvar _hoisted_4 = {\n  \"class\": \"invoice p-3 mb-3\"\n};\nvar _hoisted_5 = {\n  style: {}\n};\nvar _hoisted_6 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_7 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_8 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_9 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_10 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_11 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_12 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_13 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_14 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_15 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_16 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_17 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_18 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_19 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_20 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_21 = {\n  \"class\": \"col-sm-3 col-form-label\"\n};\nvar _hoisted_22 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_23 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_24 = [\"innerHTML\"];\nvar _hoisted_25 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_26 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_27 = [\"innerHTML\"];\nvar _hoisted_28 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_29 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_30 = [\"innerHTML\"];\nvar _hoisted_31 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_32 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_33 = [\"innerHTML\"];\nvar _hoisted_34 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_35 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_36 = [\"innerHTML\"];\nvar _hoisted_37 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_38 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_39 = [\"innerHTML\"];\nvar _hoisted_40 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_41 = {\n  \"class\": \"col-sm-9\"\n};\nvar _hoisted_42 = [\"innerHTML\"];\nvar _hoisted_43 = {\n  \"class\": \"form-group row\"\n};\nvar _hoisted_44 = {\n  \"class\": \"col-sm-4\"\n};\nvar _hoisted_45 = {\n  \"class\": \"col-sm-6\"\n};\nvar _hoisted_46 = {\n  key: 0\n};\nvar _hoisted_47 = [\"onClick\", \"src\"];\nvar _hoisted_48 = {\n  key: 0,\n  \"class\": \"full-screen-modal\"\n};\nvar _hoisted_49 = [\"src\"];\nvar _hoisted_50 = {\n  \"class\": \"row\"\n};\nvar _hoisted_51 = {\n  \"class\": \"col\"\n};\nvar _hoisted_52 = {\n  \"class\": \"col-sm\",\n  style: {\n    \"overflow-y\": \"auto\",\n    \"max-height\": \"300px\"\n  }\n};\nvar _hoisted_53 = {\n  \"class\": \"list-group\"\n};\nvar _hoisted_54 = [\"onClick\"];\nvar _hoisted_55 = {\n  \"class\": \"col-md-9 mt-1\"\n};\nvar _hoisted_56 = {\n  \"class\": \"mt-5 row\"\n};\nvar _hoisted_57 = {\n  \"class\": \"col-md-3\",\n  style: {\n    \"background-color\": \"#f1f0ef\",\n    \"text-align\": \"center\",\n    \"padding\": \"1rem\",\n    \"border-radius\": \"10px\"\n  }\n};\nvar _hoisted_58 = {\n  style: {\n    \"overflow-y\": \"auto\",\n    \"max-height\": \"300px\"\n  }\n};\nvar _hoisted_59 = {\n  \"class\": \"list-group\"\n};\nvar _hoisted_60 = [\"href\"];\nvar _hoisted_61 = {\n  style: {\n    \"width\": \"35%\"\n  },\n  \"class\": \"container files mt-5 mx-auto\"\n};\nvar _hoisted_62 = [\"onClick\", \"aria-expanded\", \"aria-controls\"];\nvar _hoisted_63 = {\n  key: 0,\n  \"class\": \"fas fa-chevron-up\"\n};\nvar _hoisted_64 = {\n  key: 1,\n  \"class\": \"fas fa-chevron-down\"\n};\nvar _hoisted_65 = [\"id\"];\nvar _hoisted_66 = [\"onClick\"];\nvar _hoisted_67 = {\n  key: 0,\n  \"class\": \"fas fa-chevron-up ml-auto\"\n};\nvar _hoisted_68 = {\n  key: 1,\n  \"class\": \"fas fa-chevron-down ml-auto\"\n};\nvar _hoisted_69 = {\n  \"class\": \"ml-4 mt-2\"\n};\nvar _hoisted_70 = {\n  \"class\": \"mt-3 mb-2\"\n};\nvar _hoisted_71 = [\"onClick\"];\nvar _hoisted_72 = [\"onClick\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _this = this;\n  var _component_file_pond = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"file-pond\");\n  var _component_Qalendar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Qalendar\");\n  var _component_calendar_event_modal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"calendar-event-modal\");\n  var _component_file_actions_modal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"file-actions-modal\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Main content \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_4, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_5, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_6, [_cache[1] || (_cache[1] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"for\": \"staticEmail\",\n    \"class\": \"col-sm-3 col-form-label\"\n  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"b\", null, \"მყიდველის სახელი:\")], -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_7, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.name), 1 /* TEXT */)]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_8, [_cache[2] || (_cache[2] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput2\"\n  }, \"დამატებითი სახელი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_9, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_10, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.subj_name), 1 /* TEXT */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_11, [_cache[3] || (_cache[3] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"მყიდველის მისამართი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_12, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.subj_address), 1 /* TEXT */)]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_13, [_cache[4] || (_cache[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"საიდენთიფიკაციო კოდი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_14, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_15, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.identification_num), 1 /* TEXT */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_16, [_cache[5] || (_cache[5] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"ტექნიკური მომსახურებისთვის საჭირო დრო:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_17, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_18, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.technical_time) + \" წთ\", 1 /* TEXT */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_19, [_cache[6] || (_cache[6] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"წმენდითი მომსახურებისთვის საჭირო დრო:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_20, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", _hoisted_21, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.model.cleaning_time) + \" წთ\", 1 /* TEXT */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_22, [_cache[7] || (_cache[7] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"აღწერა:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_23, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.description\n  }, null, 8 /* PROPS */, _hoisted_24)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_25, [_cache[8] || (_cache[8] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"პირველადი აღწერის თარიღი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_26, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.first_review_date\n  }, null, 8 /* PROPS */, _hoisted_27)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_28, [_cache[9] || (_cache[9] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"კომენტარი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_29, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.first_review_description\n  }, null, 8 /* PROPS */, _hoisted_30)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_31, [_cache[10] || (_cache[10] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"ტექნიკური აღწერის თარიღი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_32, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.technical_review_date\n  }, null, 8 /* PROPS */, _hoisted_33)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_34, [_cache[11] || (_cache[11] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"კომენტარი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_35, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.technical_review_description\n  }, null, 8 /* PROPS */, _hoisted_36)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_37, [_cache[12] || (_cache[12] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"საინფორმაციო ბაზის შექმნის თარიღი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_38, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.base_creation_date\n  }, null, 8 /* PROPS */, _hoisted_39)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_40, [_cache[13] || (_cache[13] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-3 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"კომენტარი:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_41, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n    innerHTML: $props.model.base_description\n  }, null, 8 /* PROPS */, _hoisted_42)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_43, [_cache[14] || (_cache[14] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"label\", {\n    \"class\": \"col-sm-2 col-form-label\",\n    \"for\": \"formGroupExampleInput\"\n  }, \"გალერეა:\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_44, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_file_pond, {\n    onActivatefile: $options.onActivateFile,\n    onProcessfile: $options.fileProcessed,\n    \"label-idle\": \"გალერეა\",\n    name: \"purchaserGallery\",\n    server: \"/uploadPurchaserGallery/\".concat($props.model.id),\n    ref: \"pond\",\n    \"allow-multiple\": true,\n    files: $data.galleryImages,\n    allowRemove: false,\n    allowRevert: false,\n    onInit: $options.handleFilePondInitGallery\n  }, null, 8 /* PROPS */, [\"onActivatefile\", \"onProcessfile\", \"server\", \"files\", \"onInit\"])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_45, [$data.galleryImages.length > 0 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_46, [((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($data.galleryImages, function (file, index) {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      \"class\": \"galleryImage\",\n      style: {\n        \"display\": \"inline-block\",\n        \"padding\": \"3px\"\n      },\n      key: index\n    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n      onClick: function onClick($event) {\n        return $options.onSlideClick(file.source);\n      },\n      src: file.source,\n      alt: \"uploaded preview\",\n      style: {\n        \"max-width\": \"200px\",\n        \"max-height\": \"200px\",\n        \"margin-right\": \"10px\"\n      }\n    }, null, 8 /* PROPS */, _hoisted_47)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true)])]), $data.isFullScreenOpen ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_48, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    \"class\": \"close-button\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return $options.closeFullScreen && $options.closeFullScreen.apply($options, arguments);\n    })\n  }, \"×\"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n    \"class\": \"full-screen-image\",\n    src: $data.fullScreenImageSrc\n  }, null, 8 /* PROPS */, _hoisted_49)])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_50, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_51, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Scrollable object with items from events \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_52, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"ul\", _hoisted_53, [((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($data.events, function (event) {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"li\", {\n      key: event.id,\n      \"class\": \"list-group-item\",\n      onClick: function onClick($event) {\n        return $options.handleEventClick(event);\n      }\n    }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(event.title + \" \" + event.time.start), 9 /* TEXT, PROPS */, _hoisted_54);\n  }), 128 /* KEYED_FRAGMENT */))])])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_55, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Qalendar and calendar-event-modal components \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_Qalendar, {\n    events: $data.events,\n    \"selected-date\": $data.selectedQalendarDate || new Date(),\n    config: $data.config,\n    \"day-min-height\": 250,\n    onDateWasClicked: $options.handleDateClicked,\n    onEditEvent: $options.handleEditEvent,\n    onDeleteEvent: $options.handleDeleteEvent,\n    ref: \"calendar\"\n  }, null, 8 /* PROPS */, [\"events\", \"selected-date\", \"config\", \"onDateWasClicked\", \"onEditEvent\", \"onDeleteEvent\"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_calendar_event_modal, {\n    onEventStored: $options.fetchEvents,\n    \"is-visible\": this.isModalVisible,\n    \"selected-date\": this.selectedDate,\n    \"purchaser-id\": this.model.id,\n    \"on-edit\": this.isModalOnEdit,\n    \"event-id\": this.eventId,\n    onCloseModal: $options.closeModal,\n    onAddEvent: $options.addEvent\n  }, null, 8 /* PROPS */, [\"onEventStored\", \"is-visible\", \"selected-date\", \"purchaser-id\", \"on-edit\", \"event-id\", \"onCloseModal\", \"onAddEvent\"])])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_56, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_57, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Section Title \"), _cache[15] || (_cache[15] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h6\", {\n    \"class\": \"mb-3\"\n  }, \"დეფექტური აქტები\", -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Scrollable List \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_58, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"ul\", _hoisted_59, [((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($props.additional.reports, function (report) {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"li\", {\n      key: report.id,\n      \"class\": \"list-group-item list-group-item-action\"\n    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"a\", {\n      href: \"/reports/\".concat(report.id, \"?open=1\"),\n      \"class\": \"text-decoration-none text-dark d-block\"\n    }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(report.title + \" \" + report.uuid), 9 /* TEXT, PROPS */, _hoisted_60)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($data.subjects, function (subject) {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: subject.id,\n      \"class\": \"col-md-3\"\n    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_file_pond, {\n      onActivatefile: $options.onActivateFile,\n      onProcessfile: $options.fileProcessed,\n      name: subject.name + 'Files',\n      ref_for: true,\n      ref: subject.ref,\n      \"label-idle\": subject.geo_name,\n      server: \"/purchaser/\".concat(_this.model.id, \"/files\"),\n      \"allow-multiple\": true,\n      allowRemove: false,\n      allowRevert: false,\n      files: subject.files,\n      onInit: function onInit($event) {\n        return $options.handleFilePondInit(subject.ref);\n      }\n    }, null, 8 /* PROPS */, [\"onActivatefile\", \"onProcessfile\", \"name\", \"label-idle\", \"server\", \"files\", \"onInit\"])]);\n  }), 128 /* KEYED_FRAGMENT */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_file_actions_modal, {\n    \"is-visible\": $data.isFileActionsModalVisible,\n    file: $data.activatedFile,\n    onFileDeleted: $options.fetchAfterDelete,\n    onClose: $options.closeModal\n  }, null, 8 /* PROPS */, [\"is-visible\", \"file\", \"onFileDeleted\", \"onClose\"])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Folder Structure \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_61, [_cache[20] || (_cache[20] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h4\", null, \"დამატებითი ფაილები:\", -1 /* HOISTED */)), _cache[21] || (_cache[21] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"hr\", null, null, -1 /* HOISTED */)), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($data.folderStructure, function (locations, date) {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: date,\n      \"class\": \"mb-4\"\n    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Date toggle \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h3\", {\n      onClick: function onClick($event) {\n        return $options.toggleLocations(date);\n      },\n      \"class\": \"btn btn-primary w-100 text-left p-3 rounded-pill d-flex align-items-center justify-content-between\",\n      \"aria-expanded\": $options.isDateSelected(date).toString(),\n      \"aria-controls\": 'locations-' + date\n    }, [_cache[16] || (_cache[16] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"i\", {\n      \"class\": \"fas fa-calendar-day mr-2\"\n    }, null, -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(date) + \" \", 1 /* TEXT */), $options.isDateSelected(date) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"i\", _hoisted_63)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"i\", _hoisted_64))], 8 /* PROPS */, _hoisted_62), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n      id: 'locations-' + date,\n      \"class\": \"ml-4 mt-2\"\n    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Loop through locations \"), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(locations, function (folders, location) {\n      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n        key: location,\n        \"class\": \"mb-3\"\n      }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n        onClick: function onClick($event) {\n          return $options.toggleFiles(date, location);\n        },\n        \"class\": \"btn btn-outline-primary w-100 text-left d-flex align-items-center p-3 rounded-pill\"\n      }, [_cache[17] || (_cache[17] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"i\", {\n        \"class\": \"fas fa-folder mr-2\"\n      }, null, -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(location) + \" \", 1 /* TEXT */), $options.isLocationSelected(date, location) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"i\", _hoisted_67)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"i\", _hoisted_68))], 8 /* PROPS */, _hoisted_66), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_69, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Loop through folders under location \"), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(folders, function (files, folder) {\n        return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n          key: folder,\n          \"class\": \"mb-2\"\n        }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h5\", _hoisted_70, [_cache[18] || (_cache[18] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"i\", {\n          \"class\": \"fas fa-folder-open mr-1\"\n        }, null, -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(folder), 1 /* TEXT */)]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" Loop through files \"), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(files, function (file) {\n          return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n            key: file.file_name,\n            \"class\": \"mb-2 d-flex align-items-center\"\n          }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n            onClick: function onClick($event) {\n              return $options.openImage(file);\n            },\n            \"class\": \"btn btn-link text-left flex-grow-1 d-flex align-items-center\"\n          }, [_cache[19] || (_cache[19] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"i\", {\n            \"class\": \"fas fa-image mr-2\"\n          }, null, -1 /* HOISTED */)), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(file.file_name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_71), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n            onClick: function onClick($event) {\n              return $options.deleteFile(file);\n            },\n            \"class\": \"btn btn-danger ml-2\"\n          }, \" წაშლა \", 8 /* PROPS */, _hoisted_72)]);\n        }), 128 /* KEYED_FRAGMENT */))]);\n      }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, $options.isLocationSelected(date, location)]])]);\n    }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_65), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, $options.isDateSelected(date)]])]);\n  }), 128 /* KEYED_FRAGMENT */))]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" End Folder Structure \")])])])])]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*!\\n * FilePondPluginImagePreview 4.6.12\\n * Licensed under MIT, https://opensource.org/licenses/MIT/\\n * Please visit https://pqina.nl/filepond/ for details.\\n */\\n\\n/* eslint-disable */\\n.filepond--image-preview-markup{position:absolute;left:0;top:0}.filepond--image-preview-wrapper{z-index:2}.filepond--image-preview-overlay{display:block;position:absolute;left:0;top:0;width:100%;min-height:5rem;max-height:7rem;margin:0;opacity:0;z-index:2;pointer-events:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.filepond--image-preview-overlay svg{width:100%;height:auto;color:inherit;max-height:inherit}.filepond--image-preview-overlay-idle{mix-blend-mode:multiply;color:rgba(40,40,40,.85)}.filepond--image-preview-overlay-success{mix-blend-mode:normal;color:#369763}.filepond--image-preview-overlay-failure{mix-blend-mode:normal;color:#c44e47}@supports (-webkit-marquee-repetition:infinite) and ((-o-object-fit: fill) or (object-fit: fill)){.filepond--image-preview-overlay-idle{mix-blend-mode:normal}}.filepond--image-preview-wrapper{-webkit-user-select:none;-ms-user-select:none;user-select:none;position:absolute;left:0;top:0;right:0;height:100%;margin:0;border-radius:.45em;overflow:hidden;background:rgba(0,0,0,.01)}.filepond--image-preview{position:absolute;left:0;top:0;z-index:1;display:flex;align-items:center;height:100%;width:100%;pointer-events:none;background:#222;will-change:transform,opacity}.filepond--image-clip{position:relative;overflow:hidden;margin:0 auto}.filepond--image-clip[data-transparency-indicator=grid] canvas,.filepond--image-clip[data-transparency-indicator=grid] img{background-color:#fff;background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' fill='%23eee'%3E%3Cpath d='M0 0h50v50H0M50 50h50v50H50'/%3E%3C/svg%3E\\\");background-size:1.25em 1.25em}.filepond--image-bitmap,.filepond--image-vector{position:absolute;left:0;top:0;will-change:transform}.filepond--root[data-style-panel-layout~=integrated] .filepond--image-preview-wrapper{border-radius:0}.filepond--root[data-style-panel-layout~=integrated] .filepond--image-preview{height:100%;display:flex;justify-content:center;align-items:center}.filepond--root[data-style-panel-layout~=circle] .filepond--image-preview-wrapper{border-radius:99999rem}.filepond--root[data-style-panel-layout~=circle] .filepond--image-preview-overlay{top:auto;bottom:0;-webkit-transform:scaleY(-1);transform:scaleY(-1)}.filepond--root[data-style-panel-layout~=circle] .filepond--file .filepond--file-action-button[data-align*=bottom]:not([data-align*=center]){margin-bottom:.325em}.filepond--root[data-style-panel-layout~=circle] .filepond--file [data-align*=left]{left:calc(50% - 3em)}.filepond--root[data-style-panel-layout~=circle] .filepond--file [data-align*=right]{right:calc(50% - 3em)}.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=left],.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=right]{margin-bottom:.5125em}.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=center]{margin-top:0;margin-bottom:.1875em;margin-left:.1875em}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\"],\"names\":[],\"mappings\":\"AAAA;;;;EAIE;;AAEF,mBAAmB;AACnB,gCAAgC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,SAAS,CAAC,iCAAiC,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,mBAAmB,CAAC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,qCAAqC,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,kBAAkB,CAAC,sCAAsC,uBAAuB,CAAC,wBAAwB,CAAC,yCAAyC,qBAAqB,CAAC,aAAa,CAAC,yCAAyC,qBAAqB,CAAC,aAAa,CAAC,kGAAgG,sCAAsC,qBAAqB,CAAC,CAAC,iCAAiC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,mBAAmB,CAAC,eAAe,CAAC,0BAA0B,CAAC,yBAAyB,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,kBAAkB,CAAC,WAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,eAAe,CAAC,6BAA6B,CAAC,sBAAsB,iBAAiB,CAAC,eAAe,CAAC,aAAa,CAAC,2HAA2H,qBAAqB,CAAC,8LAA8L,CAAC,6BAA6B,CAAC,gDAAgD,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,sFAAsF,eAAe,CAAC,8EAA8E,WAAW,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,kFAAkF,sBAAsB,CAAC,kFAAkF,QAAQ,CAAC,QAAQ,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,6IAA6I,oBAAoB,CAAC,oFAAoF,oBAAoB,CAAC,qFAAqF,qBAAqB,CAAC,2OAA2O,qBAAqB,CAAC,uHAAuH,YAAY,CAAC,qBAAqB,CAAC,mBAAmB\",\"sourcesContent\":[\"/*!\\n * FilePondPluginImagePreview 4.6.12\\n * Licensed under MIT, https://opensource.org/licenses/MIT/\\n * Please visit https://pqina.nl/filepond/ for details.\\n */\\n\\n/* eslint-disable */\\n.filepond--image-preview-markup{position:absolute;left:0;top:0}.filepond--image-preview-wrapper{z-index:2}.filepond--image-preview-overlay{display:block;position:absolute;left:0;top:0;width:100%;min-height:5rem;max-height:7rem;margin:0;opacity:0;z-index:2;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--image-preview-overlay svg{width:100%;height:auto;color:inherit;max-height:inherit}.filepond--image-preview-overlay-idle{mix-blend-mode:multiply;color:rgba(40,40,40,.85)}.filepond--image-preview-overlay-success{mix-blend-mode:normal;color:#369763}.filepond--image-preview-overlay-failure{mix-blend-mode:normal;color:#c44e47}@supports (-webkit-marquee-repetition:infinite) and ((-o-object-fit:fill) or (object-fit:fill)){.filepond--image-preview-overlay-idle{mix-blend-mode:normal}}.filepond--image-preview-wrapper{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:absolute;left:0;top:0;right:0;height:100%;margin:0;border-radius:.45em;overflow:hidden;background:rgba(0,0,0,.01)}.filepond--image-preview{position:absolute;left:0;top:0;z-index:1;display:flex;align-items:center;height:100%;width:100%;pointer-events:none;background:#222;will-change:transform,opacity}.filepond--image-clip{position:relative;overflow:hidden;margin:0 auto}.filepond--image-clip[data-transparency-indicator=grid] canvas,.filepond--image-clip[data-transparency-indicator=grid] img{background-color:#fff;background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg' fill='%23eee'%3E%3Cpath d='M0 0h50v50H0M50 50h50v50H50'/%3E%3C/svg%3E\\\");background-size:1.25em 1.25em}.filepond--image-bitmap,.filepond--image-vector{position:absolute;left:0;top:0;will-change:transform}.filepond--root[data-style-panel-layout~=integrated] .filepond--image-preview-wrapper{border-radius:0}.filepond--root[data-style-panel-layout~=integrated] .filepond--image-preview{height:100%;display:flex;justify-content:center;align-items:center}.filepond--root[data-style-panel-layout~=circle] .filepond--image-preview-wrapper{border-radius:99999rem}.filepond--root[data-style-panel-layout~=circle] .filepond--image-preview-overlay{top:auto;bottom:0;-webkit-transform:scaleY(-1);transform:scaleY(-1)}.filepond--root[data-style-panel-layout~=circle] .filepond--file .filepond--file-action-button[data-align*=bottom]:not([data-align*=center]){margin-bottom:.325em}.filepond--root[data-style-panel-layout~=circle] .filepond--file [data-align*=left]{left:calc(50% - 3em)}.filepond--root[data-style-panel-layout~=circle] .filepond--file [data-align*=right]{right:calc(50% - 3em)}.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=left],.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=right]{margin-bottom:.5125em}.filepond--root[data-style-panel-layout~=circle] .filepond--progress-indicator[data-align*=bottom][data-align*=center]{margin-top:0;margin-bottom:.1875em;margin-left:.1875em}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond/dist/filepond.min.css":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond/dist/filepond.min.css ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*!\\n * FilePond 4.32.7\\n * Licensed under MIT, https://opensource.org/licenses/MIT/\\n * Please visit https://pqina.nl/filepond/ for details.\\n */\\n\\n/* eslint-disable */\\n.filepond--assistant{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--browser.filepond--browser{position:absolute;margin:0;padding:0;left:1em;top:1.75em;width:calc(100% - 2em);opacity:0;font-size:0}.filepond--data{position:absolute;width:0;height:0;padding:0;margin:0;border:none;visibility:hidden;pointer-events:none;contain:strict}.filepond--drip{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;opacity:.1;pointer-events:none;border-radius:.5em;background:rgba(0,0,0,.01)}.filepond--drip-blob{-webkit-transform-origin:center center;transform-origin:center center;width:8em;height:8em;margin-left:-4em;margin-top:-4em;background:#292625;border-radius:50%}.filepond--drip-blob,.filepond--drop-label{position:absolute;top:0;left:0;will-change:transform,opacity}.filepond--drop-label{right:0;margin:0;color:#4f4f4f;display:flex;justify-content:center;align-items:center;height:0;-webkit-user-select:none;-ms-user-select:none;user-select:none}.filepond--drop-label.filepond--drop-label label{display:block;margin:0;padding:.5em}.filepond--drop-label label{cursor:default;font-size:.875em;font-weight:400;text-align:center;line-height:1.5}.filepond--label-action{text-decoration:underline;-webkit-text-decoration-skip:ink;text-decoration-skip-ink:auto;-webkit-text-decoration-color:#a7a4a4;text-decoration-color:#a7a4a4;cursor:pointer}.filepond--root[data-disabled] .filepond--drop-label label{opacity:.5}.filepond--file-action-button.filepond--file-action-button{font-size:1em;width:1.625em;height:1.625em;font-family:inherit;line-height:inherit;margin:0;padding:0;border:none;outline:none;will-change:transform,opacity}.filepond--file-action-button.filepond--file-action-button span{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file-action-button.filepond--file-action-button svg{width:100%;height:100%}.filepond--file-action-button.filepond--file-action-button:after{position:absolute;left:-.75em;right:-.75em;top:-.75em;bottom:-.75em;content:\\\"\\\"}.filepond--file-action-button{cursor:auto;color:#fff;border-radius:50%;background-color:rgba(0,0,0,.5);background-image:none;box-shadow:0 0 0 0 hsla(0,0%,100%,0);transition:box-shadow .25s ease-in}.filepond--file-action-button:focus,.filepond--file-action-button:hover{box-shadow:0 0 0 .125em hsla(0,0%,100%,.9)}.filepond--file-action-button[disabled]{color:hsla(0,0%,100%,.5);background-color:rgba(0,0,0,.25)}.filepond--file-action-button[hidden]{display:none}.filepond--action-edit-item.filepond--action-edit-item{width:2em;height:2em;padding:.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=center]{margin-left:-.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=bottom]{margin-bottom:-.1875em}.filepond--action-edit-item-alt{border:none;line-height:inherit;background:transparent;font-family:inherit;color:inherit;outline:none;padding:0;margin:0 0 0 .25em;pointer-events:all;position:absolute}.filepond--action-edit-item-alt svg{width:1.3125em;height:1.3125em}.filepond--action-edit-item-alt span{font-size:0;opacity:0}.filepond--file-info{position:static;display:flex;flex-direction:column;align-items:flex-start;flex:1;margin:0 .5em 0 0;min-width:0;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-info *{margin:0}.filepond--file-info .filepond--file-info-main{font-size:.75em;line-height:1.2;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:100%}.filepond--file-info .filepond--file-info-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out;white-space:nowrap}.filepond--file-info .filepond--file-info-sub:empty{display:none}.filepond--file-status{position:static;display:flex;flex-direction:column;align-items:flex-end;flex-grow:0;flex-shrink:0;margin:0;min-width:2.25em;text-align:right;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-status *{margin:0;white-space:nowrap}.filepond--file-status .filepond--file-status-main{font-size:.75em;line-height:1.2}.filepond--file-status .filepond--file-status-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out}.filepond--file-wrapper.filepond--file-wrapper{border:none;margin:0;padding:0;min-width:0;height:100%}.filepond--file-wrapper.filepond--file-wrapper>legend{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file{position:static;display:flex;height:100%;align-items:flex-start;padding:.5625em;color:#fff;border-radius:.5em}.filepond--file .filepond--file-status{margin-left:auto;margin-right:2.25em}.filepond--file .filepond--processing-complete-indicator{pointer-events:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;z-index:3}.filepond--file .filepond--file-action-button,.filepond--file .filepond--processing-complete-indicator,.filepond--file .filepond--progress-indicator{position:absolute}.filepond--file [data-align*=left]{left:.5625em}.filepond--file [data-align*=right]{right:.5625em}.filepond--file [data-align*=center]{left:calc(50% - .8125em)}.filepond--file [data-align*=bottom]{bottom:1.125em}.filepond--file [data-align=center]{top:calc(50% - .8125em)}.filepond--file .filepond--progress-indicator{margin-top:.1875em}.filepond--file .filepond--progress-indicator[data-align*=right]{margin-right:.1875em}.filepond--file .filepond--progress-indicator[data-align*=left]{margin-left:.1875em}[data-filepond-item-state*=error] .filepond--file-info,[data-filepond-item-state*=invalid] .filepond--file-info,[data-filepond-item-state=cancelled] .filepond--file-info{margin-right:2.25em}[data-filepond-item-state~=processing] .filepond--file-status-sub{opacity:0}[data-filepond-item-state~=processing] .filepond--action-abort-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-error] .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-error] .filepond--action-retry-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing svg{-webkit-animation:fall .5s linear .125s both;animation:fall .5s linear .125s both}[data-filepond-item-state=processing-complete] .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--file-info-sub,[data-filepond-item-state=processing-complete] .filepond--processing-complete-indicator:not([style*=hidden])~.filepond--file-status .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing~.filepond--file-info .filepond--file-info-sub{opacity:.5}[data-filepond-item-state*=error] .filepond--file-wrapper,[data-filepond-item-state*=error] .filepond--panel,[data-filepond-item-state*=invalid] .filepond--file-wrapper,[data-filepond-item-state*=invalid] .filepond--panel{-webkit-animation:shake .65s linear both;animation:shake .65s linear both}[data-filepond-item-state*=busy] .filepond--progress-indicator svg{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@-webkit-keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}.filepond--hopper[data-hopper-state=drag-over]>*{pointer-events:none}.filepond--hopper[data-hopper-state=drag-over]:after{content:\\\"\\\";position:absolute;left:0;top:0;right:0;bottom:0;z-index:100}.filepond--progress-indicator{z-index:103}.filepond--file-action-button{z-index:102}.filepond--file-status{z-index:101}.filepond--file-info{z-index:100}.filepond--item{position:absolute;top:0;left:0;right:0;z-index:1;padding:0;margin:.25em;will-change:transform,opacity;touch-action:auto}.filepond--item>.filepond--panel{z-index:-1}.filepond--item>.filepond--panel .filepond--panel-bottom{box-shadow:0 .0625em .125em -.0625em rgba(0,0,0,.25)}.filepond--item>.filepond--file-wrapper,.filepond--item>.filepond--panel{transition:opacity .15s ease-out}.filepond--item[data-drag-state]{cursor:-webkit-grab;cursor:grab}.filepond--item[data-drag-state]>.filepond--panel{transition:box-shadow .125s ease-in-out;box-shadow:0 0 0 transparent}.filepond--item[data-drag-state=drag]{cursor:-webkit-grabbing;cursor:grabbing}.filepond--item[data-drag-state=drag]>.filepond--panel{box-shadow:0 .125em .3125em rgba(0,0,0,.325)}.filepond--item[data-drag-state]:not([data-drag-state=idle]){z-index:2}.filepond--item-panel{background-color:#64605e}[data-filepond-item-state=processing-complete] .filepond--item-panel{background-color:#369763}[data-filepond-item-state*=error] .filepond--item-panel,[data-filepond-item-state*=invalid] .filepond--item-panel{background-color:#c44e47}.filepond--item-panel{border-radius:.5em;transition:background-color .25s}.filepond--list-scroller{position:absolute;top:0;left:0;right:0;margin:0;will-change:transform}.filepond--list-scroller[data-state=overflow] .filepond--list{bottom:0;right:0}.filepond--list-scroller[data-state=overflow]{overflow-y:scroll;overflow-x:hidden;-webkit-overflow-scrolling:touch;-webkit-mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent);mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent)}.filepond--list-scroller::-webkit-scrollbar{background:transparent}.filepond--list-scroller::-webkit-scrollbar:vertical{width:1em}.filepond--list-scroller::-webkit-scrollbar:horizontal{height:0}.filepond--list-scroller::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.3);border-radius:99999px;border:.3125em solid transparent;background-clip:content-box}.filepond--list.filepond--list{position:absolute;top:0;margin:0;padding:0;list-style-type:none;will-change:transform}.filepond--list{left:.75em;right:.75em}.filepond--root[data-style-panel-layout~=integrated]{width:100%;height:100%;max-width:none;margin:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root{border-radius:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root>*,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{bottom:0;height:auto;display:flex;justify-content:center;align-items:center;z-index:7}.filepond--root[data-style-panel-layout~=circle] .filepond--item-panel,.filepond--root[data-style-panel-layout~=integrated] .filepond--item-panel{display:none}.filepond--root[data-style-panel-layout~=compact] .filepond--list-scroller,.filepond--root[data-style-panel-layout~=integrated] .filepond--list-scroller{overflow:hidden;height:100%;margin-top:0;margin-bottom:0}.filepond--root[data-style-panel-layout~=compact] .filepond--list,.filepond--root[data-style-panel-layout~=integrated] .filepond--list{left:0;right:0;height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--item,.filepond--root[data-style-panel-layout~=integrated] .filepond--item{margin:0}.filepond--root[data-style-panel-layout~=compact] .filepond--file-wrapper,.filepond--root[data-style-panel-layout~=integrated] .filepond--file-wrapper{height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{z-index:7}.filepond--root[data-style-panel-layout~=circle]{border-radius:99999rem;overflow:hidden}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel{border-radius:inherit}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--file-info,.filepond--root[data-style-panel-layout~=circle] .filepond--file-status{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--action-edit-item{opacity:1!important;visibility:visible!important}@media not all and (-webkit-min-device-pixel-ratio:0), not all and (min-resolution:0.001dpcm){@supports (-webkit-appearance:none) and (stroke-color:transparent){.filepond--root[data-style-panel-layout~=circle]{will-change:transform}}}.filepond--panel-root{border-radius:.5em;background-color:#f1f0ef}.filepond--panel{position:absolute;left:0;top:0;right:0;margin:0;height:100%!important;pointer-events:none}.filepond-panel:not([data-scalable=false]){height:auto!important}.filepond--panel[data-scalable=false]>div{display:none}.filepond--panel[data-scalable=true]{-webkit-transform-style:preserve-3d;transform-style:preserve-3d;background-color:transparent!important;border:none!important}.filepond--panel-bottom,.filepond--panel-center,.filepond--panel-top{position:absolute;left:0;top:0;right:0;margin:0;padding:0}.filepond--panel-bottom,.filepond--panel-top{height:.5em}.filepond--panel-top{border-bottom-left-radius:0!important;border-bottom-right-radius:0!important;border-bottom:none!important}.filepond--panel-top:after{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;bottom:-1px;background-color:inherit}.filepond--panel-bottom,.filepond--panel-center{will-change:transform;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:left top;transform-origin:left top;-webkit-transform:translate3d(0,.5em,0);transform:translate3d(0,.5em,0)}.filepond--panel-bottom{border-top-left-radius:0!important;border-top-right-radius:0!important;border-top:none!important}.filepond--panel-bottom:before{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;top:-1px;background-color:inherit}.filepond--panel-center{height:100px!important;border-top:none!important;border-bottom:none!important;border-radius:0!important}.filepond--panel-center:not([style]){visibility:hidden}.filepond--progress-indicator{position:static;width:1.25em;height:1.25em;color:#fff;margin:0;pointer-events:none;will-change:transform,opacity}.filepond--progress-indicator svg{width:100%;height:100%;vertical-align:top;transform-box:fill-box}.filepond--progress-indicator path{fill:none;stroke:currentColor}.filepond--list-scroller{z-index:6}.filepond--drop-label{z-index:5}.filepond--drip{z-index:3}.filepond--root>.filepond--panel{z-index:2}.filepond--browser{z-index:1}.filepond--root{box-sizing:border-box;position:relative;margin-bottom:1em;font-size:1rem;line-height:normal;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:450;text-align:left;text-rendering:optimizeLegibility;direction:ltr;contain:layout style size}.filepond--root *{box-sizing:inherit;line-height:inherit}.filepond--root :not(text){font-size:inherit}.filepond--root[data-disabled]{pointer-events:none}.filepond--root[data-disabled] .filepond--list-scroller{pointer-events:all}.filepond--root[data-disabled] .filepond--list{pointer-events:none}.filepond--root .filepond--drop-label{min-height:4.75em}.filepond--root .filepond--list-scroller{margin-top:1em;margin-bottom:1em}.filepond--root .filepond--credits{position:absolute;right:0;opacity:.4;line-height:.85;font-size:11px;color:inherit;text-decoration:none;z-index:3;bottom:-14px}.filepond--root .filepond--credits[style]{top:0;bottom:auto;margin-top:14px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/filepond/dist/filepond.min.css\"],\"names\":[],\"mappings\":\"AAAA;;;;EAIE;;AAEF,mBAAmB;AACnB,qBAAqB,iBAAiB,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,0BAA0B,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,qCAAqC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,cAAc,CAAC,gBAAgB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,qBAAqB,sCAAsC,CAAC,8BAA8B,CAAC,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,eAAe,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,2CAA2C,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,6BAA6B,CAAC,sBAAsB,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,iDAAiD,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,4BAA4B,cAAc,CAAC,gBAAgB,CAAC,eAAe,CAAC,iBAAiB,CAAC,eAAe,CAAC,wBAAwB,yBAAyB,CAAC,gCAAgC,CAAC,6BAA6B,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,cAAc,CAAC,2DAA2D,UAAU,CAAC,2DAA2D,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,6BAA6B,CAAC,gEAAgE,iBAAiB,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,0BAA0B,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,+DAA+D,UAAU,CAAC,WAAW,CAAC,iEAAiE,iBAAiB,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,8BAA8B,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,qBAAqB,CAAC,oCAAoC,CAAC,kCAAkC,CAAC,wEAAwE,0CAA0C,CAAC,wCAAwC,wBAAwB,CAAC,gCAAgC,CAAC,sCAAsC,YAAY,CAAC,uDAAuD,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,2EAA2E,oBAAoB,CAAC,2EAA2E,sBAAsB,CAAC,gCAAgC,WAAW,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,oCAAoC,cAAc,CAAC,eAAe,CAAC,qCAAqC,WAAW,CAAC,SAAS,CAAC,qBAAqB,eAAe,CAAC,YAAY,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,6BAA6B,CAAC,mBAAmB,CAAC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,uBAAuB,QAAQ,CAAC,+CAA+C,eAAe,CAAC,eAAe,CAAC,sBAAsB,CAAC,eAAe,CAAC,kBAAkB,CAAC,UAAU,CAAC,8CAA8C,gBAAgB,CAAC,UAAU,CAAC,mCAAmC,CAAC,kBAAkB,CAAC,oDAAoD,YAAY,CAAC,uBAAuB,eAAe,CAAC,YAAY,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,mBAAmB,CAAC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,yBAAyB,QAAQ,CAAC,kBAAkB,CAAC,mDAAmD,eAAe,CAAC,eAAe,CAAC,kDAAkD,gBAAgB,CAAC,UAAU,CAAC,mCAAmC,CAAC,+CAA+C,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,sDAAsD,iBAAiB,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,0BAA0B,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,gBAAgB,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,sBAAsB,CAAC,eAAe,CAAC,UAAU,CAAC,kBAAkB,CAAC,uCAAuC,gBAAgB,CAAC,mBAAmB,CAAC,yDAAyD,mBAAmB,CAAC,wBAAwB,CAAuB,oBAAoB,CAAC,gBAAgB,CAAC,SAAS,CAAC,qJAAqJ,iBAAiB,CAAC,mCAAmC,YAAY,CAAC,oCAAoC,aAAa,CAAC,qCAAqC,wBAAwB,CAAC,qCAAqC,cAAc,CAAC,oCAAoC,uBAAuB,CAAC,8CAA8C,kBAAkB,CAAC,iEAAiE,oBAAoB,CAAC,gEAAgE,mBAAmB,CAAC,0KAA0K,mBAAmB,CAAC,kEAAkE,SAAS,CAAC,iIAAiI,UAAU,CAAC,uEAAuE,SAAS,CAAC,sIAAsI,UAAU,CAAC,4FAA4F,4CAA4C,CAAC,oCAAoC,CAAC,0EAA0E,UAAU,CAAC,uOAAuO,SAAS,CAAC,sIAAsI,UAAU,CAAC,8NAA8N,wCAAwC,CAAC,gCAAgC,CAAC,mEAAmE,yCAAyC,CAAC,iCAAiC,CAAC,wBAAwB,GAAG,8BAA8B,CAAC,sBAAsB,CAAC,GAAG,+BAA+B,CAAC,uBAAuB,CAAC,CAAC,gBAAgB,GAAG,8BAA8B,CAAC,sBAAsB,CAAC,GAAG,+BAA+B,CAAC,uBAAuB,CAAC,CAAC,yBAAyB,QAAQ,sCAAsC,CAAC,8BAA8B,CAAC,QAAQ,oCAAoC,CAAC,4BAA4B,CAAC,YAAY,oCAAoC,CAAC,4BAA4B,CAAC,QAAQ,mCAAmC,CAAC,2BAA2B,CAAC,CAAC,iBAAiB,QAAQ,sCAAsC,CAAC,8BAA8B,CAAC,QAAQ,oCAAoC,CAAC,4BAA4B,CAAC,YAAY,oCAAoC,CAAC,4BAA4B,CAAC,QAAQ,mCAAmC,CAAC,2BAA2B,CAAC,CAAC,wBAAwB,GAAG,SAAS,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,IAAI,SAAS,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,6CAA6C,CAAC,qCAAqC,CAAC,GAAG,0BAA0B,CAAC,kBAAkB,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,CAAC,gBAAgB,GAAG,SAAS,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,IAAI,SAAS,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,6CAA6C,CAAC,qCAAqC,CAAC,GAAG,0BAA0B,CAAC,kBAAkB,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,CAAC,iDAAiD,mBAAmB,CAAC,qDAAqD,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,8BAA8B,WAAW,CAAC,8BAA8B,WAAW,CAAC,uBAAuB,WAAW,CAAC,qBAAqB,WAAW,CAAC,gBAAgB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,6BAA6B,CAAC,iBAAiB,CAAC,iCAAiC,UAAU,CAAC,yDAAyD,oDAAoD,CAAC,yEAAyE,gCAAgC,CAAC,iCAAiC,mBAAmB,CAAC,WAAW,CAAC,kDAAkD,uCAAuC,CAAC,4BAA4B,CAAC,sCAAsC,uBAAuB,CAAC,eAAe,CAAC,uDAAuD,4CAA4C,CAAC,6DAA6D,SAAS,CAAC,sBAAsB,wBAAwB,CAAC,qEAAqE,wBAAwB,CAAC,kHAAkH,wBAAwB,CAAC,sBAAsB,kBAAkB,CAAC,gCAAgC,CAAC,yBAAyB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,8DAA8D,QAAQ,CAAC,OAAO,CAAC,8CAA8C,iBAAiB,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,uEAAuE,CAAC,+DAA+D,CAAC,4CAA4C,sBAAsB,CAAC,qDAAqD,SAAS,CAAC,uDAAuD,QAAQ,CAAC,kDAAkD,+BAA+B,CAAC,qBAAqB,CAAC,gCAAgC,CAAC,2BAA2B,CAAC,+BAA+B,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,gBAAgB,UAAU,CAAC,WAAW,CAAC,qDAAqD,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,kJAAkJ,eAAe,CAAC,sJAAsJ,YAAY,CAAC,kJAAkJ,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,CAAC,kJAAkJ,YAAY,CAAC,yJAAyJ,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,uIAAuI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,uIAAuI,QAAQ,CAAC,uJAAuJ,WAAW,CAAC,mJAAmJ,SAAS,CAAC,iDAAiD,sBAAsB,CAAC,eAAe,CAAC,kEAAkE,qBAAqB,CAAC,oEAAoE,YAAY,CAAC,8IAA8I,YAAY,CAAC,6EAA6E,mBAAmB,CAAC,4BAA4B,CAAC,8FAA8C,mEAAmE,iDAAiD,qBAAqB,CAAC,CAAC,CAAC,sBAAsB,kBAAkB,CAAC,wBAAwB,CAAC,iBAAiB,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,2CAA2C,qBAAqB,CAAC,0CAA0C,YAAY,CAAC,qCAAqC,mCAAmC,CAAC,2BAA2B,CAAC,sCAAsC,CAAC,qBAAqB,CAAC,qEAAqE,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,6CAA6C,WAAW,CAAC,qBAAqB,qCAAqC,CAAC,sCAAsC,CAAC,4BAA4B,CAAC,2BAA2B,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,wBAAwB,CAAC,gDAAgD,qBAAqB,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,iCAAiC,CAAC,yBAAyB,CAAC,uCAAuC,CAAC,+BAA+B,CAAC,wBAAwB,kCAAkC,CAAC,mCAAmC,CAAC,yBAAyB,CAAC,+BAA+B,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC,wBAAwB,sBAAsB,CAAC,yBAAyB,CAAC,4BAA4B,CAAC,yBAAyB,CAAC,qCAAqC,iBAAiB,CAAC,8BAA8B,eAAe,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,6BAA6B,CAAC,kCAAkC,UAAU,CAAC,WAAW,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,mCAAmC,SAAS,CAAC,mBAAmB,CAAC,yBAAyB,SAAS,CAAC,sBAAsB,SAAS,CAAC,gBAAgB,SAAS,CAAC,iCAAiC,SAAS,CAAC,mBAAmB,SAAS,CAAC,gBAAgB,qBAAqB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,cAAc,CAAC,kBAAkB,CAAC,wIAAwI,CAAC,eAAe,CAAC,eAAe,CAAC,iCAAiC,CAAC,aAAa,CAAC,yBAAyB,CAAC,kBAAkB,kBAAkB,CAAC,mBAAmB,CAAC,2BAA2B,iBAAiB,CAAC,+BAA+B,mBAAmB,CAAC,wDAAwD,kBAAkB,CAAC,+CAA+C,mBAAmB,CAAC,sCAAsC,iBAAiB,CAAC,yCAAyC,cAAc,CAAC,iBAAiB,CAAC,mCAAmC,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC,oBAAoB,CAAC,SAAS,CAAC,YAAY,CAAC,0CAA0C,KAAK,CAAC,WAAW,CAAC,eAAe\",\"sourcesContent\":[\"/*!\\n * FilePond 4.32.7\\n * Licensed under MIT, https://opensource.org/licenses/MIT/\\n * Please visit https://pqina.nl/filepond/ for details.\\n */\\n\\n/* eslint-disable */\\n.filepond--assistant{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--browser.filepond--browser{position:absolute;margin:0;padding:0;left:1em;top:1.75em;width:calc(100% - 2em);opacity:0;font-size:0}.filepond--data{position:absolute;width:0;height:0;padding:0;margin:0;border:none;visibility:hidden;pointer-events:none;contain:strict}.filepond--drip{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;opacity:.1;pointer-events:none;border-radius:.5em;background:rgba(0,0,0,.01)}.filepond--drip-blob{-webkit-transform-origin:center center;transform-origin:center center;width:8em;height:8em;margin-left:-4em;margin-top:-4em;background:#292625;border-radius:50%}.filepond--drip-blob,.filepond--drop-label{position:absolute;top:0;left:0;will-change:transform,opacity}.filepond--drop-label{right:0;margin:0;color:#4f4f4f;display:flex;justify-content:center;align-items:center;height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--drop-label.filepond--drop-label label{display:block;margin:0;padding:.5em}.filepond--drop-label label{cursor:default;font-size:.875em;font-weight:400;text-align:center;line-height:1.5}.filepond--label-action{text-decoration:underline;-webkit-text-decoration-skip:ink;text-decoration-skip-ink:auto;-webkit-text-decoration-color:#a7a4a4;text-decoration-color:#a7a4a4;cursor:pointer}.filepond--root[data-disabled] .filepond--drop-label label{opacity:.5}.filepond--file-action-button.filepond--file-action-button{font-size:1em;width:1.625em;height:1.625em;font-family:inherit;line-height:inherit;margin:0;padding:0;border:none;outline:none;will-change:transform,opacity}.filepond--file-action-button.filepond--file-action-button span{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file-action-button.filepond--file-action-button svg{width:100%;height:100%}.filepond--file-action-button.filepond--file-action-button:after{position:absolute;left:-.75em;right:-.75em;top:-.75em;bottom:-.75em;content:\\\"\\\"}.filepond--file-action-button{cursor:auto;color:#fff;border-radius:50%;background-color:rgba(0,0,0,.5);background-image:none;box-shadow:0 0 0 0 hsla(0,0%,100%,0);transition:box-shadow .25s ease-in}.filepond--file-action-button:focus,.filepond--file-action-button:hover{box-shadow:0 0 0 .125em hsla(0,0%,100%,.9)}.filepond--file-action-button[disabled]{color:hsla(0,0%,100%,.5);background-color:rgba(0,0,0,.25)}.filepond--file-action-button[hidden]{display:none}.filepond--action-edit-item.filepond--action-edit-item{width:2em;height:2em;padding:.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=center]{margin-left:-.1875em}.filepond--action-edit-item.filepond--action-edit-item[data-align*=bottom]{margin-bottom:-.1875em}.filepond--action-edit-item-alt{border:none;line-height:inherit;background:transparent;font-family:inherit;color:inherit;outline:none;padding:0;margin:0 0 0 .25em;pointer-events:all;position:absolute}.filepond--action-edit-item-alt svg{width:1.3125em;height:1.3125em}.filepond--action-edit-item-alt span{font-size:0;opacity:0}.filepond--file-info{position:static;display:flex;flex-direction:column;align-items:flex-start;flex:1;margin:0 .5em 0 0;min-width:0;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-info *{margin:0}.filepond--file-info .filepond--file-info-main{font-size:.75em;line-height:1.2;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:100%}.filepond--file-info .filepond--file-info-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out;white-space:nowrap}.filepond--file-info .filepond--file-info-sub:empty{display:none}.filepond--file-status{position:static;display:flex;flex-direction:column;align-items:flex-end;flex-grow:0;flex-shrink:0;margin:0;min-width:2.25em;text-align:right;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-status *{margin:0;white-space:nowrap}.filepond--file-status .filepond--file-status-main{font-size:.75em;line-height:1.2}.filepond--file-status .filepond--file-status-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out}.filepond--file-wrapper.filepond--file-wrapper{border:none;margin:0;padding:0;min-width:0;height:100%}.filepond--file-wrapper.filepond--file-wrapper>legend{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file{position:static;display:flex;height:100%;align-items:flex-start;padding:.5625em;color:#fff;border-radius:.5em}.filepond--file .filepond--file-status{margin-left:auto;margin-right:2.25em}.filepond--file .filepond--processing-complete-indicator{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:3}.filepond--file .filepond--file-action-button,.filepond--file .filepond--processing-complete-indicator,.filepond--file .filepond--progress-indicator{position:absolute}.filepond--file [data-align*=left]{left:.5625em}.filepond--file [data-align*=right]{right:.5625em}.filepond--file [data-align*=center]{left:calc(50% - .8125em)}.filepond--file [data-align*=bottom]{bottom:1.125em}.filepond--file [data-align=center]{top:calc(50% - .8125em)}.filepond--file .filepond--progress-indicator{margin-top:.1875em}.filepond--file .filepond--progress-indicator[data-align*=right]{margin-right:.1875em}.filepond--file .filepond--progress-indicator[data-align*=left]{margin-left:.1875em}[data-filepond-item-state*=error] .filepond--file-info,[data-filepond-item-state*=invalid] .filepond--file-info,[data-filepond-item-state=cancelled] .filepond--file-info{margin-right:2.25em}[data-filepond-item-state~=processing] .filepond--file-status-sub{opacity:0}[data-filepond-item-state~=processing] .filepond--action-abort-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-error] .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-error] .filepond--action-retry-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing svg{-webkit-animation:fall .5s linear .125s both;animation:fall .5s linear .125s both}[data-filepond-item-state=processing-complete] .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--file-info-sub,[data-filepond-item-state=processing-complete] .filepond--processing-complete-indicator:not([style*=hidden])~.filepond--file-status .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing~.filepond--file-info .filepond--file-info-sub{opacity:.5}[data-filepond-item-state*=error] .filepond--file-wrapper,[data-filepond-item-state*=error] .filepond--panel,[data-filepond-item-state*=invalid] .filepond--file-wrapper,[data-filepond-item-state*=invalid] .filepond--panel{-webkit-animation:shake .65s linear both;animation:shake .65s linear both}[data-filepond-item-state*=busy] .filepond--progress-indicator svg{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@-webkit-keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}.filepond--hopper[data-hopper-state=drag-over]>*{pointer-events:none}.filepond--hopper[data-hopper-state=drag-over]:after{content:\\\"\\\";position:absolute;left:0;top:0;right:0;bottom:0;z-index:100}.filepond--progress-indicator{z-index:103}.filepond--file-action-button{z-index:102}.filepond--file-status{z-index:101}.filepond--file-info{z-index:100}.filepond--item{position:absolute;top:0;left:0;right:0;z-index:1;padding:0;margin:.25em;will-change:transform,opacity;touch-action:auto}.filepond--item>.filepond--panel{z-index:-1}.filepond--item>.filepond--panel .filepond--panel-bottom{box-shadow:0 .0625em .125em -.0625em rgba(0,0,0,.25)}.filepond--item>.filepond--file-wrapper,.filepond--item>.filepond--panel{transition:opacity .15s ease-out}.filepond--item[data-drag-state]{cursor:-webkit-grab;cursor:grab}.filepond--item[data-drag-state]>.filepond--panel{transition:box-shadow .125s ease-in-out;box-shadow:0 0 0 transparent}.filepond--item[data-drag-state=drag]{cursor:-webkit-grabbing;cursor:grabbing}.filepond--item[data-drag-state=drag]>.filepond--panel{box-shadow:0 .125em .3125em rgba(0,0,0,.325)}.filepond--item[data-drag-state]:not([data-drag-state=idle]){z-index:2}.filepond--item-panel{background-color:#64605e}[data-filepond-item-state=processing-complete] .filepond--item-panel{background-color:#369763}[data-filepond-item-state*=error] .filepond--item-panel,[data-filepond-item-state*=invalid] .filepond--item-panel{background-color:#c44e47}.filepond--item-panel{border-radius:.5em;transition:background-color .25s}.filepond--list-scroller{position:absolute;top:0;left:0;right:0;margin:0;will-change:transform}.filepond--list-scroller[data-state=overflow] .filepond--list{bottom:0;right:0}.filepond--list-scroller[data-state=overflow]{overflow-y:scroll;overflow-x:hidden;-webkit-overflow-scrolling:touch;-webkit-mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent);mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent)}.filepond--list-scroller::-webkit-scrollbar{background:transparent}.filepond--list-scroller::-webkit-scrollbar:vertical{width:1em}.filepond--list-scroller::-webkit-scrollbar:horizontal{height:0}.filepond--list-scroller::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.3);border-radius:99999px;border:.3125em solid transparent;background-clip:content-box}.filepond--list.filepond--list{position:absolute;top:0;margin:0;padding:0;list-style-type:none;will-change:transform}.filepond--list{left:.75em;right:.75em}.filepond--root[data-style-panel-layout~=integrated]{width:100%;height:100%;max-width:none;margin:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root{border-radius:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root>*,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{bottom:0;height:auto;display:flex;justify-content:center;align-items:center;z-index:7}.filepond--root[data-style-panel-layout~=circle] .filepond--item-panel,.filepond--root[data-style-panel-layout~=integrated] .filepond--item-panel{display:none}.filepond--root[data-style-panel-layout~=compact] .filepond--list-scroller,.filepond--root[data-style-panel-layout~=integrated] .filepond--list-scroller{overflow:hidden;height:100%;margin-top:0;margin-bottom:0}.filepond--root[data-style-panel-layout~=compact] .filepond--list,.filepond--root[data-style-panel-layout~=integrated] .filepond--list{left:0;right:0;height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--item,.filepond--root[data-style-panel-layout~=integrated] .filepond--item{margin:0}.filepond--root[data-style-panel-layout~=compact] .filepond--file-wrapper,.filepond--root[data-style-panel-layout~=integrated] .filepond--file-wrapper{height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{z-index:7}.filepond--root[data-style-panel-layout~=circle]{border-radius:99999rem;overflow:hidden}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel{border-radius:inherit}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--file-info,.filepond--root[data-style-panel-layout~=circle] .filepond--file-status{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--action-edit-item{opacity:1!important;visibility:visible!important}@media not all and (min-resolution:0.001dpcm){@supports (-webkit-appearance:none) and (stroke-color:transparent){.filepond--root[data-style-panel-layout~=circle]{will-change:transform}}}.filepond--panel-root{border-radius:.5em;background-color:#f1f0ef}.filepond--panel{position:absolute;left:0;top:0;right:0;margin:0;height:100%!important;pointer-events:none}.filepond-panel:not([data-scalable=false]){height:auto!important}.filepond--panel[data-scalable=false]>div{display:none}.filepond--panel[data-scalable=true]{-webkit-transform-style:preserve-3d;transform-style:preserve-3d;background-color:transparent!important;border:none!important}.filepond--panel-bottom,.filepond--panel-center,.filepond--panel-top{position:absolute;left:0;top:0;right:0;margin:0;padding:0}.filepond--panel-bottom,.filepond--panel-top{height:.5em}.filepond--panel-top{border-bottom-left-radius:0!important;border-bottom-right-radius:0!important;border-bottom:none!important}.filepond--panel-top:after{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;bottom:-1px;background-color:inherit}.filepond--panel-bottom,.filepond--panel-center{will-change:transform;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:left top;transform-origin:left top;-webkit-transform:translate3d(0,.5em,0);transform:translate3d(0,.5em,0)}.filepond--panel-bottom{border-top-left-radius:0!important;border-top-right-radius:0!important;border-top:none!important}.filepond--panel-bottom:before{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;top:-1px;background-color:inherit}.filepond--panel-center{height:100px!important;border-top:none!important;border-bottom:none!important;border-radius:0!important}.filepond--panel-center:not([style]){visibility:hidden}.filepond--progress-indicator{position:static;width:1.25em;height:1.25em;color:#fff;margin:0;pointer-events:none;will-change:transform,opacity}.filepond--progress-indicator svg{width:100%;height:100%;vertical-align:top;transform-box:fill-box}.filepond--progress-indicator path{fill:none;stroke:currentColor}.filepond--list-scroller{z-index:6}.filepond--drop-label{z-index:5}.filepond--drip{z-index:3}.filepond--root>.filepond--panel{z-index:2}.filepond--browser{z-index:1}.filepond--root{box-sizing:border-box;position:relative;margin-bottom:1em;font-size:1rem;line-height:normal;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:450;text-align:left;text-rendering:optimizeLegibility;direction:ltr;contain:layout style size}.filepond--root *{box-sizing:inherit;line-height:inherit}.filepond--root :not(text){font-size:inherit}.filepond--root[data-disabled]{pointer-events:none}.filepond--root[data-disabled] .filepond--list-scroller{pointer-events:all}.filepond--root[data-disabled] .filepond--list{pointer-events:none}.filepond--root .filepond--drop-label{min-height:4.75em}.filepond--root .filepond--list-scroller{margin-top:1em;margin-bottom:1em}.filepond--root .filepond--credits{position:absolute;right:0;opacity:.4;line-height:.85;font-size:11px;color:inherit;text-decoration:none;z-index:3;bottom:-14px}.filepond--root .filepond--credits[style]{top:0;bottom:auto;margin-top:14px}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond/dist/filepond.min.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue3-carousel/dist/carousel.css":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue3-carousel/dist/carousel.css ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root {\\n  /* Color */\\n  --vc-clr-primary: #000;\\n  --vc-clr-secondary: #090f207f;\\n  --vc-clr-white: #ffffff;\\n\\n  /* Icon */\\n  --vc-icn-width: 1.2em;\\n\\n  /* Navigation */\\n  --vc-nav-width: 30px;\\n  --vc-nav-height: 30px;\\n  --vc-nav-border-radius: 0;\\n  --vc-nav-color: var(--vc-clr-primary);\\n  --vc-nav-color-hover: var(--vc-clr-secondary);\\n  --vc-nav-background: transparent;\\n\\n  /* Pagination */\\n  --vc-pgn-width: 12px;\\n  --vc-pgn-height: 4px;\\n  --vc-pgn-margin: 4px;\\n  --vc-pgn-border-radius: 0;\\n  --vc-pgn-background-color: var(--vc-clr-secondary);\\n  --vc-pgn-active-color: var(--vc-clr-primary);\\n}\\n\\n.carousel {\\n  position: relative;\\n  text-align: center;\\n  box-sizing: border-box;\\n  touch-action: pan-y;\\n  overscroll-behavior: none;\\n}\\n\\n.carousel.is-dragging {\\n  touch-action: none;\\n}\\n\\n.carousel * {\\n  box-sizing: border-box;\\n}\\n\\n.carousel__track {\\n  display: flex;\\n  padding: 0 !important;\\n  position: relative;\\n}\\n\\n.carousel__viewport {\\n  overflow: hidden;\\n}\\n\\n.carousel__sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  border: 0;\\n}\\n\\n.carousel__icon {\\n  width: var(--vc-icn-width);\\n  height: var(--vc-icn-width);\\n  fill: currentColor;\\n}\\n\\n.carousel__prev,\\n.carousel__next {\\n  box-sizing: content-box;\\n  background: var(--vc-nav-background);\\n  border-radius: var(--vc-nav-border-radius);\\n  width: var(--vc-nav-width);\\n  height: var(--vc-nav-height);\\n  text-align: center;\\n  font-size: var(--vc-nav-height);\\n  padding: 0;\\n  color: var(--vc-nav-color);\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: absolute;\\n  border: 0;\\n  cursor: pointer;\\n  margin: 0 10px;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n.carousel__next--disabled,\\n.carousel__prev--disabled {\\n  cursor: not-allowed;\\n  opacity: 0.5;\\n}\\n\\n.carousel__prev {\\n  left: 0;\\n}\\n\\n.carousel__next {\\n  right: 0;\\n}\\n\\n.carousel--rtl .carousel__prev {\\n  left: auto;\\n  right: 0;\\n}\\n\\n.carousel--rtl .carousel__next {\\n  right: auto;\\n  left: 0;\\n}\\n\\n@media (hover: hover) {\\n  .carousel__prev:hover,\\n  .carousel__next:hover {\\n    color: var(--vc-nav-color-hover);\\n  }\\n}\\n\\n.carousel__pagination {\\n  display: flex;\\n  justify-content: center;\\n  list-style: none;\\n  line-height: 0;\\n  margin: 10px 0 0;\\n  padding: 0;\\n}\\n\\n.carousel__pagination-button {\\n  display: block;\\n  border: 0;\\n  margin: 0;\\n  cursor: pointer;\\n  padding: var(--vc-pgn-margin);\\n  background: transparent;\\n}\\n\\n.carousel__pagination-button::after {\\n  display: block;\\n  content: '';\\n  width: var(--vc-pgn-width);\\n  height: var(--vc-pgn-height);\\n  border-radius: var(--vc-pgn-border-radius);\\n  background-color: var(--vc-pgn-background-color);\\n}\\n\\n.carousel__pagination-button--active::after {\\n  background-color: var(--vc-pgn-active-color);\\n}\\n\\n@media(hover: hover) {\\n  .carousel__pagination-button:hover::after {\\n    background-color: var(--vc-pgn-active-color);\\n  }\\n}\\n\\n.carousel__slide {\\n  scroll-snap-stop: auto;\\n  flex-shrink: 0;\\n  margin: 0;\\n  position: relative;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  /* Fix iOS scrolling #22 */\\n  transform: translateZ(0);\\n}\\n\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/vue3-carousel/dist/carousel.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,UAAU;EACV,sBAAsB;EACtB,6BAA6B;EAC7B,uBAAuB;;EAEvB,SAAS;EACT,qBAAqB;;EAErB,eAAe;EACf,oBAAoB;EACpB,qBAAqB;EACrB,yBAAyB;EACzB,qCAAqC;EACrC,6CAA6C;EAC7C,gCAAgC;;EAEhC,eAAe;EACf,oBAAoB;EACpB,oBAAoB;EACpB,oBAAoB;EACpB,yBAAyB;EACzB,kDAAkD;EAClD,4CAA4C;AAC9C;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,sBAAsB;EACtB,mBAAmB;EACnB,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,0BAA0B;EAC1B,2BAA2B;EAC3B,kBAAkB;AACpB;;AAEA;;EAEE,uBAAuB;EACvB,oCAAoC;EACpC,0CAA0C;EAC1C,0BAA0B;EAC1B,4BAA4B;EAC5B,kBAAkB;EAClB,+BAA+B;EAC/B,UAAU;EACV,0BAA0B;EAC1B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,SAAS;EACT,eAAe;EACf,cAAc;EACd,QAAQ;EACR,2BAA2B;AAC7B;;AAEA;;EAEE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,UAAU;EACV,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,OAAO;AACT;;AAEA;EACE;;IAEE,gCAAgC;EAClC;AACF;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;EACd,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,SAAS;EACT,SAAS;EACT,eAAe;EACf,6BAA6B;EAC7B,uBAAuB;AACzB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,0BAA0B;EAC1B,4BAA4B;EAC5B,0CAA0C;EAC1C,gDAAgD;AAClD;;AAEA;EACE,4CAA4C;AAC9C;;AAEA;EACE;IACE,4CAA4C;EAC9C;AACF;;AAEA;EACE,sBAAsB;EACtB,cAAc;EACd,SAAS;EACT,kBAAkB;;EAElB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;;EAEnB,0BAA0B;EAC1B,wBAAwB;AAC1B\",\"sourcesContent\":[\":root {\\n  /* Color */\\n  --vc-clr-primary: #000;\\n  --vc-clr-secondary: #090f207f;\\n  --vc-clr-white: #ffffff;\\n\\n  /* Icon */\\n  --vc-icn-width: 1.2em;\\n\\n  /* Navigation */\\n  --vc-nav-width: 30px;\\n  --vc-nav-height: 30px;\\n  --vc-nav-border-radius: 0;\\n  --vc-nav-color: var(--vc-clr-primary);\\n  --vc-nav-color-hover: var(--vc-clr-secondary);\\n  --vc-nav-background: transparent;\\n\\n  /* Pagination */\\n  --vc-pgn-width: 12px;\\n  --vc-pgn-height: 4px;\\n  --vc-pgn-margin: 4px;\\n  --vc-pgn-border-radius: 0;\\n  --vc-pgn-background-color: var(--vc-clr-secondary);\\n  --vc-pgn-active-color: var(--vc-clr-primary);\\n}\\n\\n.carousel {\\n  position: relative;\\n  text-align: center;\\n  box-sizing: border-box;\\n  touch-action: pan-y;\\n  overscroll-behavior: none;\\n}\\n\\n.carousel.is-dragging {\\n  touch-action: none;\\n}\\n\\n.carousel * {\\n  box-sizing: border-box;\\n}\\n\\n.carousel__track {\\n  display: flex;\\n  padding: 0 !important;\\n  position: relative;\\n}\\n\\n.carousel__viewport {\\n  overflow: hidden;\\n}\\n\\n.carousel__sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  border: 0;\\n}\\n\\n.carousel__icon {\\n  width: var(--vc-icn-width);\\n  height: var(--vc-icn-width);\\n  fill: currentColor;\\n}\\n\\n.carousel__prev,\\n.carousel__next {\\n  box-sizing: content-box;\\n  background: var(--vc-nav-background);\\n  border-radius: var(--vc-nav-border-radius);\\n  width: var(--vc-nav-width);\\n  height: var(--vc-nav-height);\\n  text-align: center;\\n  font-size: var(--vc-nav-height);\\n  padding: 0;\\n  color: var(--vc-nav-color);\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: absolute;\\n  border: 0;\\n  cursor: pointer;\\n  margin: 0 10px;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n\\n.carousel__next--disabled,\\n.carousel__prev--disabled {\\n  cursor: not-allowed;\\n  opacity: 0.5;\\n}\\n\\n.carousel__prev {\\n  left: 0;\\n}\\n\\n.carousel__next {\\n  right: 0;\\n}\\n\\n.carousel--rtl .carousel__prev {\\n  left: auto;\\n  right: 0;\\n}\\n\\n.carousel--rtl .carousel__next {\\n  right: auto;\\n  left: 0;\\n}\\n\\n@media (hover: hover) {\\n  .carousel__prev:hover,\\n  .carousel__next:hover {\\n    color: var(--vc-nav-color-hover);\\n  }\\n}\\n\\n.carousel__pagination {\\n  display: flex;\\n  justify-content: center;\\n  list-style: none;\\n  line-height: 0;\\n  margin: 10px 0 0;\\n  padding: 0;\\n}\\n\\n.carousel__pagination-button {\\n  display: block;\\n  border: 0;\\n  margin: 0;\\n  cursor: pointer;\\n  padding: var(--vc-pgn-margin);\\n  background: transparent;\\n}\\n\\n.carousel__pagination-button::after {\\n  display: block;\\n  content: '';\\n  width: var(--vc-pgn-width);\\n  height: var(--vc-pgn-height);\\n  border-radius: var(--vc-pgn-border-radius);\\n  background-color: var(--vc-pgn-background-color);\\n}\\n\\n.carousel__pagination-button--active::after {\\n  background-color: var(--vc-pgn-active-color);\\n}\\n\\n@media(hover: hover) {\\n  .carousel__pagination-button:hover::after {\\n    background-color: var(--vc-pgn-active-color);\\n  }\\n}\\n\\n.carousel__slide {\\n  scroll-snap-stop: auto;\\n  flex-shrink: 0;\\n  margin: 0;\\n  position: relative;\\n\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  /* Fix iOS scrolling #22 */\\n  transform: translateZ(0);\\n}\\n\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xMS51c2VbMV0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTEudXNlWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZTMtY2Fyb3VzZWwvZGlzdC9jYXJvdXNlbC5jc3MiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUM0RztBQUM3QjtBQUMvRSw4QkFBOEIsc0VBQTJCLENBQUMsMkZBQXFDO0FBQy9GO0FBQ0EsaURBQWlELDBDQUEwQyxrQ0FBa0MsNEJBQTRCLDBDQUEwQywrQ0FBK0MsMEJBQTBCLDhCQUE4QiwwQ0FBMEMsa0RBQWtELHFDQUFxQywrQ0FBK0MseUJBQXlCLHlCQUF5Qiw4QkFBOEIsdURBQXVELGlEQUFpRCxHQUFHLGVBQWUsdUJBQXVCLHVCQUF1QiwyQkFBMkIsd0JBQXdCLDhCQUE4QixHQUFHLDJCQUEyQix1QkFBdUIsR0FBRyxpQkFBaUIsMkJBQTJCLEdBQUcsc0JBQXNCLGtCQUFrQiwwQkFBMEIsdUJBQXVCLEdBQUcseUJBQXlCLHFCQUFxQixHQUFHLHdCQUF3Qix1QkFBdUIsZUFBZSxnQkFBZ0IsZUFBZSxpQkFBaUIscUJBQXFCLDJCQUEyQixjQUFjLEdBQUcscUJBQXFCLCtCQUErQixnQ0FBZ0MsdUJBQXVCLEdBQUcsdUNBQXVDLDRCQUE0Qix5Q0FBeUMsK0NBQStDLCtCQUErQixpQ0FBaUMsdUJBQXVCLG9DQUFvQyxlQUFlLCtCQUErQixrQkFBa0IsNEJBQTRCLHdCQUF3Qix1QkFBdUIsY0FBYyxvQkFBb0IsbUJBQW1CLGFBQWEsZ0NBQWdDLEdBQUcsMkRBQTJELHdCQUF3QixpQkFBaUIsR0FBRyxxQkFBcUIsWUFBWSxHQUFHLHFCQUFxQixhQUFhLEdBQUcsb0NBQW9DLGVBQWUsYUFBYSxHQUFHLG9DQUFvQyxnQkFBZ0IsWUFBWSxHQUFHLDJCQUEyQixxREFBcUQsdUNBQXVDLEtBQUssR0FBRywyQkFBMkIsa0JBQWtCLDRCQUE0QixxQkFBcUIsbUJBQW1CLHFCQUFxQixlQUFlLEdBQUcsa0NBQWtDLG1CQUFtQixjQUFjLGNBQWMsb0JBQW9CLGtDQUFrQyw0QkFBNEIsR0FBRyx5Q0FBeUMsbUJBQW1CLGdCQUFnQiwrQkFBK0IsaUNBQWlDLCtDQUErQyxxREFBcUQsR0FBRyxpREFBaUQsaURBQWlELEdBQUcsMEJBQTBCLCtDQUErQyxtREFBbUQsS0FBSyxHQUFHLHNCQUFzQiwyQkFBMkIsbUJBQW1CLGNBQWMsdUJBQXVCLG9CQUFvQiw0QkFBNEIsd0JBQXdCLDhEQUE4RCxHQUFHLFdBQVcsK0dBQStHLFVBQVUsWUFBWSxhQUFhLGNBQWMsV0FBVyxhQUFhLFdBQVcsWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGNBQWMsV0FBVyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLE1BQU0sS0FBSyxZQUFZLGFBQWEsYUFBYSxPQUFPLE1BQU0sWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxXQUFXLFlBQVksV0FBVyxZQUFZLGFBQWEsYUFBYSxXQUFXLFVBQVUsVUFBVSxVQUFVLFlBQVksT0FBTyxNQUFNLFlBQVksV0FBVyxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssVUFBVSxVQUFVLE1BQU0sS0FBSyxVQUFVLFVBQVUsTUFBTSxLQUFLLE1BQU0sWUFBWSxNQUFNLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxXQUFXLFlBQVksV0FBVyxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxLQUFLLFlBQVksTUFBTSxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsYUFBYSxXQUFXLFlBQVksY0FBYyxhQUFhLGFBQWEsaUNBQWlDLDBDQUEwQyxrQ0FBa0MsNEJBQTRCLDBDQUEwQywrQ0FBK0MsMEJBQTBCLDhCQUE4QiwwQ0FBMEMsa0RBQWtELHFDQUFxQywrQ0FBK0MseUJBQXlCLHlCQUF5Qiw4QkFBOEIsdURBQXVELGlEQUFpRCxHQUFHLGVBQWUsdUJBQXVCLHVCQUF1QiwyQkFBMkIsd0JBQXdCLDhCQUE4QixHQUFHLDJCQUEyQix1QkFBdUIsR0FBRyxpQkFBaUIsMkJBQTJCLEdBQUcsc0JBQXNCLGtCQUFrQiwwQkFBMEIsdUJBQXVCLEdBQUcseUJBQXlCLHFCQUFxQixHQUFHLHdCQUF3Qix1QkFBdUIsZUFBZSxnQkFBZ0IsZUFBZSxpQkFBaUIscUJBQXFCLDJCQUEyQixjQUFjLEdBQUcscUJBQXFCLCtCQUErQixnQ0FBZ0MsdUJBQXVCLEdBQUcsdUNBQXVDLDRCQUE0Qix5Q0FBeUMsK0NBQStDLCtCQUErQixpQ0FBaUMsdUJBQXVCLG9DQUFvQyxlQUFlLCtCQUErQixrQkFBa0IsNEJBQTRCLHdCQUF3Qix1QkFBdUIsY0FBYyxvQkFBb0IsbUJBQW1CLGFBQWEsZ0NBQWdDLEdBQUcsMkRBQTJELHdCQUF3QixpQkFBaUIsR0FBRyxxQkFBcUIsWUFBWSxHQUFHLHFCQUFxQixhQUFhLEdBQUcsb0NBQW9DLGVBQWUsYUFBYSxHQUFHLG9DQUFvQyxnQkFBZ0IsWUFBWSxHQUFHLDJCQUEyQixxREFBcUQsdUNBQXVDLEtBQUssR0FBRywyQkFBMkIsa0JBQWtCLDRCQUE0QixxQkFBcUIsbUJBQW1CLHFCQUFxQixlQUFlLEdBQUcsa0NBQWtDLG1CQUFtQixjQUFjLGNBQWMsb0JBQW9CLGtDQUFrQyw0QkFBNEIsR0FBRyx5Q0FBeUMsbUJBQW1CLGdCQUFnQiwrQkFBK0IsaUNBQWlDLCtDQUErQyxxREFBcUQsR0FBRyxpREFBaUQsaURBQWlELEdBQUcsMEJBQTBCLCtDQUErQyxtREFBbUQsS0FBSyxHQUFHLHNCQUFzQiwyQkFBMkIsbUJBQW1CLGNBQWMsdUJBQXVCLG9CQUFvQiw0QkFBNEIsd0JBQXdCLDhEQUE4RCxHQUFHLHVCQUF1QjtBQUMvL1A7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUzLWNhcm91c2VsL2Rpc3QvY2Fyb3VzZWwuY3NzPzdlMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLyogQ29sb3IgKi9cXG4gIC0tdmMtY2xyLXByaW1hcnk6ICMwMDA7XFxuICAtLXZjLWNsci1zZWNvbmRhcnk6ICMwOTBmMjA3ZjtcXG4gIC0tdmMtY2xyLXdoaXRlOiAjZmZmZmZmO1xcblxcbiAgLyogSWNvbiAqL1xcbiAgLS12Yy1pY24td2lkdGg6IDEuMmVtO1xcblxcbiAgLyogTmF2aWdhdGlvbiAqL1xcbiAgLS12Yy1uYXYtd2lkdGg6IDMwcHg7XFxuICAtLXZjLW5hdi1oZWlnaHQ6IDMwcHg7XFxuICAtLXZjLW5hdi1ib3JkZXItcmFkaXVzOiAwO1xcbiAgLS12Yy1uYXYtY29sb3I6IHZhcigtLXZjLWNsci1wcmltYXJ5KTtcXG4gIC0tdmMtbmF2LWNvbG9yLWhvdmVyOiB2YXIoLS12Yy1jbHItc2Vjb25kYXJ5KTtcXG4gIC0tdmMtbmF2LWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcblxcbiAgLyogUGFnaW5hdGlvbiAqL1xcbiAgLS12Yy1wZ24td2lkdGg6IDEycHg7XFxuICAtLXZjLXBnbi1oZWlnaHQ6IDRweDtcXG4gIC0tdmMtcGduLW1hcmdpbjogNHB4O1xcbiAgLS12Yy1wZ24tYm9yZGVyLXJhZGl1czogMDtcXG4gIC0tdmMtcGduLWJhY2tncm91bmQtY29sb3I6IHZhcigtLXZjLWNsci1zZWNvbmRhcnkpO1xcbiAgLS12Yy1wZ24tYWN0aXZlLWNvbG9yOiB2YXIoLS12Yy1jbHItcHJpbWFyeSk7XFxufVxcblxcbi5jYXJvdXNlbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgdG91Y2gtYWN0aW9uOiBwYW4teTtcXG4gIG92ZXJzY3JvbGwtYmVoYXZpb3I6IG5vbmU7XFxufVxcblxcbi5jYXJvdXNlbC5pcy1kcmFnZ2luZyB7XFxuICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVxcblxcbi5jYXJvdXNlbCAqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5jYXJvdXNlbF9fdHJhY2sge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNhcm91c2VsX192aWV3cG9ydCB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4uY2Fyb3VzZWxfX3NyLW9ubHkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWxfX2ljb24ge1xcbiAgd2lkdGg6IHZhcigtLXZjLWljbi13aWR0aCk7XFxuICBoZWlnaHQ6IHZhcigtLXZjLWljbi13aWR0aCk7XFxuICBmaWxsOiBjdXJyZW50Q29sb3I7XFxufVxcblxcbi5jYXJvdXNlbF9fcHJldixcXG4uY2Fyb3VzZWxfX25leHQge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS12Yy1uYXYtYmFja2dyb3VuZCk7XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS12Yy1uYXYtYm9yZGVyLXJhZGl1cyk7XFxuICB3aWR0aDogdmFyKC0tdmMtbmF2LXdpZHRoKTtcXG4gIGhlaWdodDogdmFyKC0tdmMtbmF2LWhlaWdodCk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IHZhcigtLXZjLW5hdi1oZWlnaHQpO1xcbiAgcGFkZGluZzogMDtcXG4gIGNvbG9yOiB2YXIoLS12Yy1uYXYtY29sb3IpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlcjogMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG1hcmdpbjogMCAxMHB4O1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxufVxcblxcbi5jYXJvdXNlbF9fbmV4dC0tZGlzYWJsZWQsXFxuLmNhcm91c2VsX19wcmV2LS1kaXNhYmxlZCB7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4uY2Fyb3VzZWxfX3ByZXYge1xcbiAgbGVmdDogMDtcXG59XFxuXFxuLmNhcm91c2VsX19uZXh0IHtcXG4gIHJpZ2h0OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWwtLXJ0bCAuY2Fyb3VzZWxfX3ByZXYge1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWwtLXJ0bCAuY2Fyb3VzZWxfX25leHQge1xcbiAgcmlnaHQ6IGF1dG87XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3Zlcikge1xcbiAgLmNhcm91c2VsX19wcmV2OmhvdmVyLFxcbiAgLmNhcm91c2VsX19uZXh0OmhvdmVyIHtcXG4gICAgY29sb3I6IHZhcigtLXZjLW5hdi1jb2xvci1ob3Zlcik7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbF9fcGFnaW5hdGlvbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBtYXJnaW46IDEwcHggMCAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLmNhcm91c2VsX19wYWdpbmF0aW9uLWJ1dHRvbiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGJvcmRlcjogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBhZGRpbmc6IHZhcigtLXZjLXBnbi1tYXJnaW4pO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5jYXJvdXNlbF9fcGFnaW5hdGlvbi1idXR0b246OmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogJyc7XFxuICB3aWR0aDogdmFyKC0tdmMtcGduLXdpZHRoKTtcXG4gIGhlaWdodDogdmFyKC0tdmMtcGduLWhlaWdodCk7XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS12Yy1wZ24tYm9yZGVyLXJhZGl1cyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12Yy1wZ24tYmFja2dyb3VuZC1jb2xvcik7XFxufVxcblxcbi5jYXJvdXNlbF9fcGFnaW5hdGlvbi1idXR0b24tLWFjdGl2ZTo6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdmMtcGduLWFjdGl2ZS1jb2xvcik7XFxufVxcblxcbkBtZWRpYShob3ZlcjogaG92ZXIpIHtcXG4gIC5jYXJvdXNlbF9fcGFnaW5hdGlvbi1idXR0b246aG92ZXI6OmFmdGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdmMtcGduLWFjdGl2ZS1jb2xvcik7XFxuICB9XFxufVxcblxcbi5jYXJvdXNlbF9fc2xpZGUge1xcbiAgc2Nyb2xsLXNuYXAtc3RvcDogYXV0bztcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gIC8qIEZpeCBpT1Mgc2Nyb2xsaW5nICMyMiAqL1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvdnVlMy1jYXJvdXNlbC9kaXN0L2Nhcm91c2VsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFVBQVU7RUFDVixzQkFBc0I7RUFDdEIsNkJBQTZCO0VBQzdCLHVCQUF1Qjs7RUFFdkIsU0FBUztFQUNULHFCQUFxQjs7RUFFckIsZUFBZTtFQUNmLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIseUJBQXlCO0VBQ3pCLHFDQUFxQztFQUNyQyw2Q0FBNkM7RUFDN0MsZ0NBQWdDOztFQUVoQyxlQUFlO0VBQ2Ysb0JBQW9CO0VBQ3BCLG9CQUFvQjtFQUNwQixvQkFBb0I7RUFDcEIseUJBQXlCO0VBQ3pCLGtEQUFrRDtFQUNsRCw0Q0FBNEM7QUFDOUM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHFCQUFxQjtFQUNyQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLFdBQVc7RUFDWCxVQUFVO0VBQ1YsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsU0FBUztBQUNYOztBQUVBO0VBQ0UsMEJBQTBCO0VBQzFCLDJCQUEyQjtFQUMzQixrQkFBa0I7QUFDcEI7O0FBRUE7O0VBRUUsdUJBQXVCO0VBQ3ZCLG9DQUFvQztFQUNwQywwQ0FBMEM7RUFDMUMsMEJBQTBCO0VBQzFCLDRCQUE0QjtFQUM1QixrQkFBa0I7RUFDbEIsK0JBQStCO0VBQy9CLFVBQVU7RUFDViwwQkFBMEI7RUFDMUIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxlQUFlO0VBQ2YsY0FBYztFQUNkLFFBQVE7RUFDUiwyQkFBMkI7QUFDN0I7O0FBRUE7O0VBRUUsbUJBQW1CO0VBQ25CLFlBQVk7QUFDZDs7QUFFQTtFQUNFLE9BQU87QUFDVDs7QUFFQTtFQUNFLFFBQVE7QUFDVjs7QUFFQTtFQUNFLFVBQVU7RUFDVixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsT0FBTztBQUNUOztBQUVBO0VBQ0U7O0lBRUUsZ0NBQWdDO0VBQ2xDO0FBQ0Y7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLGdCQUFnQjtFQUNoQixjQUFjO0VBQ2QsZ0JBQWdCO0VBQ2hCLFVBQVU7QUFDWjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxTQUFTO0VBQ1QsU0FBUztFQUNULGVBQWU7RUFDZiw2QkFBNkI7RUFDN0IsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCwwQkFBMEI7RUFDMUIsNEJBQTRCO0VBQzVCLDBDQUEwQztFQUMxQyxnREFBZ0Q7QUFDbEQ7O0FBRUE7RUFDRSw0Q0FBNEM7QUFDOUM7O0FBRUE7RUFDRTtJQUNFLDRDQUE0QztFQUM5QztBQUNGOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLGNBQWM7RUFDZCxTQUFTO0VBQ1Qsa0JBQWtCOztFQUVsQixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjs7RUFFbkIsMEJBQTBCO0VBQzFCLHdCQUF3QjtBQUMxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAvKiBDb2xvciAqL1xcbiAgLS12Yy1jbHItcHJpbWFyeTogIzAwMDtcXG4gIC0tdmMtY2xyLXNlY29uZGFyeTogIzA5MGYyMDdmO1xcbiAgLS12Yy1jbHItd2hpdGU6ICNmZmZmZmY7XFxuXFxuICAvKiBJY29uICovXFxuICAtLXZjLWljbi13aWR0aDogMS4yZW07XFxuXFxuICAvKiBOYXZpZ2F0aW9uICovXFxuICAtLXZjLW5hdi13aWR0aDogMzBweDtcXG4gIC0tdmMtbmF2LWhlaWdodDogMzBweDtcXG4gIC0tdmMtbmF2LWJvcmRlci1yYWRpdXM6IDA7XFxuICAtLXZjLW5hdi1jb2xvcjogdmFyKC0tdmMtY2xyLXByaW1hcnkpO1xcbiAgLS12Yy1uYXYtY29sb3ItaG92ZXI6IHZhcigtLXZjLWNsci1zZWNvbmRhcnkpO1xcbiAgLS12Yy1uYXYtYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuXFxuICAvKiBQYWdpbmF0aW9uICovXFxuICAtLXZjLXBnbi13aWR0aDogMTJweDtcXG4gIC0tdmMtcGduLWhlaWdodDogNHB4O1xcbiAgLS12Yy1wZ24tbWFyZ2luOiA0cHg7XFxuICAtLXZjLXBnbi1ib3JkZXItcmFkaXVzOiAwO1xcbiAgLS12Yy1wZ24tYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdmMtY2xyLXNlY29uZGFyeSk7XFxuICAtLXZjLXBnbi1hY3RpdmUtY29sb3I6IHZhcigtLXZjLWNsci1wcmltYXJ5KTtcXG59XFxuXFxuLmNhcm91c2VsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB0b3VjaC1hY3Rpb246IHBhbi15O1xcbiAgb3ZlcnNjcm9sbC1iZWhhdmlvcjogbm9uZTtcXG59XFxuXFxuLmNhcm91c2VsLmlzLWRyYWdnaW5nIHtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG59XFxuXFxuLmNhcm91c2VsICoge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmNhcm91c2VsX190cmFjayB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY2Fyb3VzZWxfX3ZpZXdwb3J0IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5jYXJvdXNlbF9fc3Itb25seSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAtMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi5jYXJvdXNlbF9faWNvbiB7XFxuICB3aWR0aDogdmFyKC0tdmMtaWNuLXdpZHRoKTtcXG4gIGhlaWdodDogdmFyKC0tdmMtaWNuLXdpZHRoKTtcXG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcXG59XFxuXFxuLmNhcm91c2VsX19wcmV2LFxcbi5jYXJvdXNlbF9fbmV4dCB7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXZjLW5hdi1iYWNrZ3JvdW5kKTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXZjLW5hdi1ib3JkZXItcmFkaXVzKTtcXG4gIHdpZHRoOiB2YXIoLS12Yy1uYXYtd2lkdGgpO1xcbiAgaGVpZ2h0OiB2YXIoLS12Yy1uYXYtaGVpZ2h0KTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogdmFyKC0tdmMtbmF2LWhlaWdodCk7XFxuICBwYWRkaW5nOiAwO1xcbiAgY29sb3I6IHZhcigtLXZjLW5hdi1jb2xvcik7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luOiAwIDEwcHg7XFxuICB0b3A6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG59XFxuXFxuLmNhcm91c2VsX19uZXh0LS1kaXNhYmxlZCxcXG4uY2Fyb3VzZWxfX3ByZXYtLWRpc2FibGVkIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcblxcbi5jYXJvdXNlbF9fcHJldiB7XFxuICBsZWZ0OiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWxfX25leHQge1xcbiAgcmlnaHQ6IDA7XFxufVxcblxcbi5jYXJvdXNlbC0tcnRsIC5jYXJvdXNlbF9fcHJldiB7XFxuICBsZWZ0OiBhdXRvO1xcbiAgcmlnaHQ6IDA7XFxufVxcblxcbi5jYXJvdXNlbC0tcnRsIC5jYXJvdXNlbF9fbmV4dCB7XFxuICByaWdodDogYXV0bztcXG4gIGxlZnQ6IDA7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSB7XFxuICAuY2Fyb3VzZWxfX3ByZXY6aG92ZXIsXFxuICAuY2Fyb3VzZWxfX25leHQ6aG92ZXIge1xcbiAgICBjb2xvcjogdmFyKC0tdmMtbmF2LWNvbG9yLWhvdmVyKTtcXG4gIH1cXG59XFxuXFxuLmNhcm91c2VsX19wYWdpbmF0aW9uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIG1hcmdpbjogMTBweCAwIDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uY2Fyb3VzZWxfX3BhZ2luYXRpb24tYnV0dG9uIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgYm9yZGVyOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogdmFyKC0tdmMtcGduLW1hcmdpbik7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmNhcm91c2VsX19wYWdpbmF0aW9uLWJ1dHRvbjo6YWZ0ZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnJztcXG4gIHdpZHRoOiB2YXIoLS12Yy1wZ24td2lkdGgpO1xcbiAgaGVpZ2h0OiB2YXIoLS12Yy1wZ24taGVpZ2h0KTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXZjLXBnbi1ib3JkZXItcmFkaXVzKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXZjLXBnbi1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuXFxuLmNhcm91c2VsX19wYWdpbmF0aW9uLWJ1dHRvbi0tYWN0aXZlOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12Yy1wZ24tYWN0aXZlLWNvbG9yKTtcXG59XFxuXFxuQG1lZGlhKGhvdmVyOiBob3Zlcikge1xcbiAgLmNhcm91c2VsX19wYWdpbmF0aW9uLWJ1dHRvbjpob3Zlcjo6YWZ0ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS12Yy1wZ24tYWN0aXZlLWNvbG9yKTtcXG4gIH1cXG59XFxuXFxuLmNhcm91c2VsX19zbGlkZSB7XFxuICBzY3JvbGwtc25hcC1zdG9wOiBhdXRvO1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBtYXJnaW46IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcblxcbiAgLyogRml4IGlPUyBzY3JvbGxpbmcgIzIyICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue3-carousel/dist/carousel.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/qalendar/dist/style.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/qalendar/dist/style.css ***!
  \*************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".calendar-root[data-v-67f77862],.date-picker-root[data-v-67f77862]{--qalendar-blue: rgb(38 132 255);--qalendar-blue-transparent: rgba(38 132 255 / 90%);--qalendar-gray-quite-dark: rgb(110 110 110);--qalendar-gray: rgb(180 180 180);--qalendar-green: rgb(51 182 121);--qalendar-theme-color: var(--qalendar-blue);--qalendar-light-gray: rgba(240 236 236 / 76%);--qalendar-option-hover: var(--qalendar-light-gray);--qalendar-dark-mode-elevated-surface: #383838;--qalendar-dark-mode-lightly-elevated-surface: #2e2e2e;--qalendar-dark-mode-text-primary: rgba(255 255 255 1);--qalendar-dark-mode-text-secondary: rgba(255 255 255 .7);--qalendar-dark-mode-text-hint: rgba(255 255 255 .5);--qalendar-dark-mode-line-color: var(--qalendar-gray);--qalendar-border-gray-thin: 1px solid rgb(224 224 224);--qalendar-border-dashed-gray-thin: 1px dashed rgb(224 224 224);--qalendar-border-blue-thin: 1px solid var(--qalendar-theme-color);--qalendar-border-radius: 8px;--qalendar-spacing: 10px;--qalendar-spacing-half: 5px;--qalendar-spacing-double: 20px;--qalendar-box-shadow: 0 4px 4px rgba(0 0 0 / 6%), 0 1px 4px rgba(0 0 0 / 18%);--qalendar-text-transition: color .2s ease;--qalendar-week-padding-left: 56px;--qalendar-font-3xs: .625rem;--qalendar-font-2xs: .688rem;--qalendar-font-xs: .75rem;--qalendar-font-s: .875rem;--qalendar-font-m: 1rem;--qalendar-font-l: 1.25rem;--qalendar-font-xl: 1.5rem}@media (prefers-color-scheme: dark){.calendar-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}}[style*=\\\"color-scheme: dark\\\"] .calendar-root[data-v-67f77862],[style*=\\\"color-scheme: dark\\\"] .date-picker-root[data-v-67f77862]{--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}@media (prefers-color-scheme: dark){.calendar-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root[data-v-67f77862],[style*=\\\"color-scheme: dark\\\"] .date-picker-root[data-v-67f77862]{--qalendar-gray-quite-dark: rgb(221, 221, 221)}@media (min-width: 62rem){.calendar-root[data-v-67f77862]{--qalendar-spacing: 20px;--qalendar-spacing-half: 10px;--qalendar-spacing-double: 40px}}.date-picker[data-v-67f77862]{position:relative;width:fit-content;min-width:16rem}.mode-is-month .date-picker[data-v-67f77862]{min-width:8rem}.mode-is-day .date-picker[data-v-67f77862]{min-width:10rem}.qalendar-is-small .date-picker[data-v-67f77862]{min-width:initial}.date-picker[data-v-67f77862]:not(.is-in-qalendar){min-width:initial}.qalendar-is-small .date-picker[data-v-67f77862]:not(.is-in-qalendar){margin:0 auto}.date-picker__value-display[data-v-67f77862]{height:36px;border-radius:4px;padding:0 var(--qalendar-spacing);font-size:var(--qalendar-font-m);cursor:pointer;display:flex;align-items:center;justify-content:center;gap:var(--qalendar-spacing-half);user-select:none;border:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.date-picker__value-display[data-v-67f77862]:not(.is-light-mode .date-picker__value-display){color:var(--qalendar-dark-mode-text-hint);background-color:var(--qalendar-dark-mode-lightly-elevated-surface);border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .date-picker__value-display[data-v-67f77862]{color:var(--qalendar-dark-mode-text-hint);background-color:var(--qalendar-dark-mode-lightly-elevated-surface);border-color:transparent}.qalendar-is-small .date-picker__value-display[data-v-67f77862]{border:0}.date-picker__value-display .date-picker__value-display-text[data-v-67f77862]{display:initial}.qalendar-is-small .date-picker__value-display .date-picker__value-display-text[data-v-67f77862]{display:none}.date-picker__value-display svg[data-v-67f77862]{font-size:initial}.qalendar-is-small .date-picker__value-display svg[data-v-67f77862]{font-size:var(--qalendar-font-l)}.date-picker__week-picker[data-v-67f77862]{padding:var(--qalendar-spacing-half);z-index:51;background-color:#fff;border:var(--qalendar-border-gray-thin);border-radius:4px;min-width:250px;box-shadow:0 2px 4px #f0ececc2}@media (prefers-color-scheme: dark){.date-picker__week-picker[data-v-67f77862]:not(.is-light-mode .date-picker__week-picker){background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent;box-shadow:0 2px 4px #0000001a}}[style*=\\\"color-scheme: dark\\\"] .date-picker__week-picker[data-v-67f77862]{background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent;box-shadow:0 2px 4px #0000001a}.date-picker__week-picker.is-in-qalendar[data-v-67f77862]{top:calc(100% - 1px);position:absolute;right:0}.date-picker__week-picker.is-in-qalendar .mode-is-month[data-v-67f77862],.mode-is-week .date-picker__week-picker.is-in-qalendar[data-v-67f77862]{left:50%;transform:translate(-50%)}.qalendar-is-small .date-picker__week-picker.is-in-qalendar .mode-is-month[data-v-67f77862],.qalendar-is-small .mode-is-week .date-picker__week-picker.is-in-qalendar[data-v-67f77862]{left:initial;transform:initial}.date-picker__week-picker-navigation[data-v-67f77862]{font-weight:900;display:flex;align-items:center;justify-content:space-between;gap:var(--qalendar-spacing-half);margin-bottom:.25em;user-select:none}.date-picker__week-picker-navigation .is-icon[data-v-67f77862]{transition:var(--qalendar-text-transition);color:#131313}@media (prefers-color-scheme: dark){.date-picker__week-picker-navigation .is-icon[data-v-67f77862]:not(.is-light-mode .date-picker__week-picker-navigation .is-icon){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .date-picker__week-picker-navigation .is-icon[data-v-67f77862]{color:var(--qalendar-dark-mode-text-hint)}@media (hover: hover){.date-picker__week-picker-navigation .is-icon[data-v-67f77862]:hover{color:var(--qalendar-blue);cursor:pointer}}.date-picker__toggle-mode[data-v-67f77862]{transition:var(--qalendar-text-transition)}@media (hover: hover){.date-picker__toggle-mode[data-v-67f77862]:hover{color:var(--qalendar-blue);cursor:pointer}}.date-picker .months[data-v-67f77862]{display:flex;flex-wrap:wrap;gap:var(--qalendar-spacing-half);max-width:20rem}.date-picker .months span[data-v-67f77862]{padding:4px;border:var(--qalendar-border-gray-thin);border-radius:2px;flex:1 0 33%;text-align:center;cursor:pointer;font-size:var(--qalendar-font-xs);transition:all .2s ease}@media (hover: hover){.date-picker .months span[data-v-67f77862]:hover{background-color:var(--qalendar-theme-color);color:#fff;border:var(--qalendar-border-blue-thin)}}.date-picker .week[data-v-67f77862]{width:100%;display:flex;justify-content:space-evenly;align-items:center;margin:4px 0}.date-picker .week.is-active[data-v-67f77862]{border:1px dashed var(--qalendar-theme-color);border-radius:4px}.date-picker .week span[data-v-67f77862]{display:flex;min-height:32px;min-width:32px;justify-content:center;align-items:center;flex:1 1 100%;cursor:pointer;border-radius:50%;font-size:var(--qalendar-font-xs)}.date-picker .week span.is-weekend[data-v-67f77862]{color:gray}@media (hover: hover){.date-picker .week span.has-day[data-v-67f77862]:hover{background-color:var(--qalendar-option-hover)}}.date-picker .week span.is-today[data-v-67f77862]{background-color:var(--qalendar-blue);color:#fff}.date-picker .week span.is-not-in-month[data-v-67f77862]{color:#a9a9a9}.date-picker .week span.is-disabled[data-v-67f77862]{color:#a9a9a9;cursor:not-allowed}[data-lang=ar] .date-picker .week span[data-v-67f77862]{font-size:.65rem}.date-picker__day-names[data-v-67f77862]{text-transform:uppercase;font-weight:700;font-size:var(--qalendar-font-s)}.calendar-header[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding:var(--qalendar-spacing-half);border-radius:var(--qalendar-border-radius)}@media (min-width: 37.5rem){.calendar-header[data-v-37f1c389]{justify-content:space-between;grid-gap:var(--qalendar-spacing)}}@media (prefers-color-scheme: dark){.calendar-header[data-v-37f1c389]:not(.is-light-mode .calendar-header){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header[data-v-37f1c389]{color:var(--qalendar-dark-mode-text-hint)}.calendar-header__period[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;gap:var(--qalendar-spacing)}.calendar-header__period-name[data-v-37f1c389]{font-size:var(--qalendar-font-l);text-align:center}@media (min-width: 37.5rem){.calendar-header__period-name[data-v-37f1c389]{margin-bottom:0;text-align:left}}.calendar-header__multiselects[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;gap:var(--qalendar-spacing)}.calendar-header__chevron-arrows[data-v-37f1c389]{display:flex;align-items:center;grid-gap:20px}.calendar-header__chevron-arrows .calendar-header__chevron-arrow[data-v-37f1c389]{cursor:pointer;transition:color .2s ease;font-size:var(--qalendar-font-m)}@media (hover: hover){.calendar-header__chevron-arrows .calendar-header__chevron-arrow[data-v-37f1c389]:hover{color:var(--qalendar-gray-quite-dark)}}.calendar-header__mode-picker[data-v-37f1c389]{position:relative;display:flex;align-items:center;justify-content:center;width:fit-content;height:36px;border-radius:4px;font-size:var(--qalendar-font-m);cursor:pointer;border:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.calendar-header__mode-picker[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker){border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker[data-v-37f1c389]{border-color:transparent}.calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]{padding:0 var(--qalendar-spacing);width:100%;height:100%;display:flex;align-items:center;user-select:none;border-radius:4px}@media (prefers-color-scheme: dark){.calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker .calendar-header__mode-value){background-color:var(--qalendar-dark-mode-lightly-elevated-surface)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]{background-color:var(--qalendar-dark-mode-lightly-elevated-surface)}.calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]{position:absolute;z-index:51;top:100%;left:50%;transform:translate(-50%);border:var(--qalendar-border-gray-thin);background-color:#fff}@media (prefers-color-scheme: dark){.calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker .calendar-header__mode-options){border-color:transparent;background-color:var(--qalendar-dark-mode-elevated-surface)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]{border-color:transparent;background-color:var(--qalendar-dark-mode-elevated-surface)}.calendar-header__mode-picker .calendar-header__mode-options .calendar-header__mode-option[data-v-37f1c389]{padding:var(--qalendar-spacing-half) var(--qalendar-spacing)}@media (hover: hover){.calendar-header__mode-picker .calendar-header__mode-options .calendar-header__mode-option[data-v-37f1c389]:hover{background-color:var(--qalendar-option-hover)}}.day-timeline[data-v-014bf4e0]{position:absolute;top:0;left:0;width:calc(100% + 10px);height:var(--11371d19);transform:translate(-10px);display:flex;flex-flow:column;justify-content:space-evenly}.day-timeline__hour[data-v-014bf4e0]{padding-left:4px;display:flex;flex-flow:column;justify-content:flex-start;height:100%;font-size:clamp(10px,.625rem,14px);color:var(--qalendar-gray-quite-dark)}.day-timeline__hour-text[data-v-014bf4e0]{line-height:0;transform:translate(-40px)}.day-timeline__hour:first-child .day-timeline__hour-text[data-v-014bf4e0]{display:none}.day-timeline__hour[data-v-014bf4e0]:not(:last-child){border-bottom:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.day-timeline__hour[data-v-014bf4e0]:not(:last-child):not(.is-light-mode .day-timeline__hour:not(:last-child)){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .day-timeline__hour[data-v-014bf4e0]:not(:last-child){border-color:var(--qalendar-dark-mode-line-color)}.week-timeline__event[data-v-778d59fc]{position:relative;--event-padding: 3px;display:flex;align-items:center;height:.9rem;width:calc(100% - var(--event-padding));font-size:var(--qalendar-font-2xs);border-radius:4px;padding:var(--event-padding);margin-bottom:.25em;text-align:left;cursor:pointer;user-select:none;overflow:hidden}.week-timeline__event[data-v-778d59fc]:active{cursor:not-allowed}.week-timeline[data-v-a43746b6]{height:fit-content;display:flex;justify-content:space-evenly;padding-bottom:var(--qalendar-spacing-half);padding-left:var(--qalendar-week-padding-left);border-bottom:var(--qalendar-border-gray-thin)}.mode-is-day .week-timeline[data-v-a43746b6]{width:100%;padding-left:0}.week-timeline__day[data-v-a43746b6]{width:100%;display:flex;flex-flow:column;align-items:center;justify-content:flex-start}.week-timeline__day-name[data-v-a43746b6]{font-size:var(--qalendar-font-3xs);font-weight:400;margin-bottom:4px;color:var(--qalendar-gray-quite-dark)}.week-timeline__date[data-v-a43746b6]{font-size:1.2rem;margin-bottom:4px;height:2rem;width:2rem;border-radius:50%;display:flex;align-items:center;justify-content:center}.is-today .week-timeline__date[data-v-a43746b6]{background-color:var(--qalendar-blue);color:#fff}.week-timeline__events[data-v-a43746b6]{width:100%;flex:1;border-right:1px dashed rgb(224,224,224)}.week-timeline__day:first-child .week-timeline__events[data-v-a43746b6]{border-left:1px dashed rgb(224,224,224)}.calendar-week__event[data-v-5564d436]{position:absolute;width:100%;border-radius:4px;cursor:pointer;box-sizing:content-box;user-select:none;overflow:hidden}.calendar-week__event.is-editable[data-v-5564d436]{cursor:grab}.calendar-week__event.has-disabled-dnd[data-v-5564d436]{cursor:initial}.calendar-week__event .calendar-week__event-row[data-v-5564d436]{display:flex;align-items:flex-start;margin-bottom:.25em}.calendar-week__event .calendar-week__event-row p[data-v-5564d436]{margin:0;padding:0}.calendar-week__event .calendar-week__event-info-wrapper[data-v-5564d436]{position:relative;padding:var(--qalendar-spacing-half);font-size:var(--qalendar-font-xs);height:100%;box-sizing:border-box;user-select:none}.calendar-week__event .calendar-week__event-blend-out[data-v-5564d436]{position:absolute;bottom:0;height:20px;width:100%;transform:translate(calc(var(--qalendar-spacing-half) * -1))}.calendar-week__event .calendar-week__event-icon[data-v-5564d436]{margin:2px 4px 0 0;font-size:var(--qalendar-font-xs)}.calendar-week__event .calendar-week__event-resize[data-v-5564d436]{position:absolute;width:100%;cursor:ns-resize;height:5px}.calendar-week__event .calendar-week__event-resize-up[data-v-5564d436]{top:0}.calendar-week__event .calendar-week__event-resize-down[data-v-5564d436]{bottom:0}.calendar-week__day[data-v-b268be7e]{position:relative;width:100%;height:100%;display:flex;flex-direction:column}.calendar-week__day .calendar-week__day-interval[data-v-b268be7e]{flex:1;font-size:var(--qalendar-font-xs);color:var(--qalendar-gray);padding:2px}.calendar-week__day .calendar-week__day-interval.has-border[data-v-b268be7e]{border-bottom:var(--qalendar-border-dashed-gray-thin)}.calendar-week__day[data-v-b268be7e]:first-child{border-left:1px dashed rgb(224,224,224)}@media (prefers-color-scheme: dark){.calendar-week__day[data-v-b268be7e]:first-child:not(.is-light-mode .calendar-week__day:first-child){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-week__day[data-v-b268be7e]:first-child{border-color:var(--qalendar-dark-mode-line-color)}.calendar-week__day[data-v-b268be7e]:not(:last-child){border-right:1px dashed rgb(224,224,224)}@media (prefers-color-scheme: dark){.calendar-week__day[data-v-b268be7e]:not(:last-child):not(.is-light-mode .calendar-week__day:not(:last-child)){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-week__day[data-v-b268be7e]:not(:last-child){border-color:var(--qalendar-dark-mode-line-color)}.event-flyout[data-v-d6a61e37]{position:fixed;z-index:50;background-color:#fff;max-height:100%;width:var(--7c0b2114);max-width:98%;border:var(--qalendar-border-gray-thin);border-radius:8px;box-shadow:0 12px 24px #00000017,0 6px 12px #0000002e;overflow:hidden;transition:all .2s ease;transition-property:opacity,transform;transform:translateY(-40px);opacity:0;pointer-events:none}@media (prefers-color-scheme: dark){.event-flyout[data-v-d6a61e37]:not(.is-light-mode .event-flyout){background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .event-flyout[data-v-d6a61e37]{background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent}.event-flyout.is-visible[data-v-d6a61e37]{opacity:1;transform:translateY(0);pointer-events:initial}.event-flyout__relative-wrapper[data-v-d6a61e37]{position:relative}.event-flyout__menu[data-v-d6a61e37]{display:flex;justify-content:space-between;align-items:center}.event-flyout__menu .event-flyout__menu-editable[data-v-d6a61e37],.event-flyout__menu .event-flyout__menu-close[data-v-d6a61e37]{padding:var(--qalendar-spacing) var(--qalendar-spacing) 0 var(--qalendar-spacing);display:flex;grid-gap:20px}.is-not-editable .event-flyout__menu .event-flyout__menu-close[data-v-d6a61e37]{position:absolute;top:0;right:0}.event-flyout__menu-item[data-v-d6a61e37]{font-size:var(--qalendar-font-l);color:gray}@media (prefers-color-scheme: dark){.event-flyout__menu-item[data-v-d6a61e37]:not(.is-light-mode .event-flyout__menu-item){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .event-flyout__menu-item[data-v-d6a61e37]{color:var(--qalendar-dark-mode-text-hint)}.event-flyout__menu-item[data-v-d6a61e37]:hover{color:var(--qalendar-theme-color);cursor:pointer}.event-flyout .is-trash-icon[data-v-d6a61e37]:hover{color:red}.event-flyout__info-wrapper[data-v-d6a61e37]{padding:var(--qalendar-spacing)}.event-flyout__row[data-v-d6a61e37]{display:flex;grid-gap:var(--qalendar-spacing);margin-bottom:.25em;font-weight:400}.event-flyout__row p[data-v-d6a61e37]{margin:0;padding:0}.event-flyout__row svg[data-v-d6a61e37]{margin-top:.1rem;color:#5f6368;width:14px}@media (prefers-color-scheme: dark){.event-flyout__row svg[data-v-d6a61e37]:not(.is-light-mode .event-flyout__row svg){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .event-flyout__row svg[data-v-d6a61e37]{color:var(--qalendar-dark-mode-text-hint)}.event-flyout__color-icon[data-v-d6a61e37]{--icon-height: 16px;border-radius:50%;height:var(--icon-height);width:var(--icon-height)}.event-flyout .is-title[data-v-d6a61e37]{font-size:var(--qalendar-font-l);align-items:center}.is-not-editable .event-flyout .is-title[data-v-d6a61e37]{max-width:90%}.event-flyout .is-time[data-v-d6a61e37]{font-size:var(--qalendar-font-s);margin-bottom:.75em}.calendar-week__wrapper[data-v-8bb6ad05]{position:relative;padding-left:var(--qalendar-week-padding-left);overflow-y:auto}.calendar-week[data-v-8bb6ad05]{position:relative;width:100%;flex:1 1 auto}.calendar-week__events[data-v-8bb6ad05]{display:flex;width:100%;height:var(--5cb5d057);overflow:hidden}.calendar-week .current-time-line[data-v-8bb6ad05]{position:absolute;left:0;width:100%;height:2px;z-index:1;background-color:red}.calendar-week .current-time-line__circle[data-v-8bb6ad05]{position:relative}.calendar-week .current-time-line__circle[data-v-8bb6ad05]:before{content:\\\"\\\";position:absolute;transform:translate(-45%,-45%);width:10px;height:10px;border-radius:50%;background-color:red}.calendar-week .custom-current-time[data-v-8bb6ad05]{position:absolute;left:0;width:100%;z-index:1}.calendar-month__event[data-v-4766dfc7]{--event-inline-padding: 4px;display:flex;align-items:center;overflow:hidden;border-radius:4px;font-size:var(--qalendar-font-2xs);width:calc(100% - calc(var(--event-inline-padding) * 2));margin-bottom:4px;padding:.25rem var(--event-inline-padding);cursor:pointer;user-select:none}.calendar-month__event .calendar-month__event-time[data-v-4766dfc7]{margin-right:6px}.calendar-month__event .calendar-month__event-time[data-v-4766dfc7],.calendar-month__event .calendar-month__event-title[data-v-4766dfc7],.calendar-month__event .calendar-month__event-color[data-v-4766dfc7]{flex-shrink:0}.qalendar-is-small .calendar-month__event .calendar-month__event-time[data-v-4766dfc7],.qalendar-is-small .calendar-month__event .calendar-month__event-title[data-v-4766dfc7]{display:none}.qalendar-is-small .calendar-month__event[data-v-4766dfc7]{background-color:var(--63a9bc8a);width:4px;height:4px;border-radius:50%;padding:1px;margin-right:1px}.calendar-month__event.is-draggable[data-v-4766dfc7]{cursor:grab}.calendar-month__event[data-v-4766dfc7]:active{z-index:100}.calendar-month__event[data-v-4766dfc7]:not(.is-draggable):active{cursor:not-allowed}@media (hover: hover){.calendar-month__event[data-v-4766dfc7]:hover{background-color:var(--qalendar-light-gray)}}@media (hover: hover) and (hover: hover){.calendar-month__event[data-v-4766dfc7]:hover:hover{background-color:var(--qalendar-option-hover)}}.calendar-month__event .calendar-month__event-color[data-v-4766dfc7]{background-color:var(--63a9bc8a);width:6px;height:6px;border-radius:50%;margin-right:4px}.calendar-month__weekday[data-v-e7ff2963]{height:100%;flex:1;display:flex;flex-flow:column;align-items:center;border-right:var(--qalendar-border-gray-thin);border-bottom:var(--qalendar-border-gray-thin);overflow:hidden;transition:background-color .2s ease-in-out}@media (prefers-color-scheme: dark){.calendar-month__weekday[data-v-e7ff2963]:not(.is-light-mode .calendar-month__weekday){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-month__weekday[data-v-e7ff2963]{border-color:var(--qalendar-dark-mode-line-color)}.calendar-month__weekday.is-droppable[data-v-e7ff2963]{background-color:var(--qalendar-light-gray)}.calendar-month__weekday[data-v-e7ff2963]:last-child{border-right:0}.qalendar-is-small .calendar-month__weekday.is-selected[data-v-e7ff2963]{-webkit-box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);-moz-box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);border-radius:5px}.qalendar-is-small .calendar-month__weekday[data-v-e7ff2963]{height:45px;width:45px;display:flex;flex-flow:column;justify-content:space-around}.calendar-month__weekday .calendar-month__day-date[data-v-e7ff2963]{font-size:var(--qalendar-font-xs);color:var(--qalendar-gray-quite-dark)}.calendar-month__weekday .calendar-month__day-date[data-v-e7ff2963]:first-child{margin-top:6px}.calendar-month__weekday .calendar-month__weekday-more[data-v-e7ff2963]{font-size:var(--qalendar-font-2xs);width:100%;padding-left:4px;color:var(--qalendar-gray-quite-dark);cursor:pointer}.calendar-month__weekday .calendar-month_events[data-v-e7ff2963]{width:100%}.qalendar-is-small .calendar-month__weekday .calendar-month_events[data-v-e7ff2963]{display:flex;flex-flow:row;justify-content:center}.qalendar-is-small .calendar-month__weekday .calendar-month_events .calendar-month__weekday-more[data-v-e7ff2963]{display:none}.calendar-month__weekday.is-today .calendar-month__day-date[data-v-e7ff2963]{background-color:var(--qalendar-theme-color);color:#fff;border-radius:50%;padding:4px 6px}.qalendar-is-small .calendar-month__weekday.is-today .calendar-month__day-date[data-v-e7ff2963]{padding:2px 4px}.space-reserver[data-v-e7ff2963]{height:100%;flex:1;display:flex;flex-flow:column;align-items:center;border-right:var(--qalendar-border-gray-thin);border-bottom:var(--qalendar-border-gray-thin);border-right-color:transparent}@media (prefers-color-scheme: dark){.space-reserver[data-v-e7ff2963]:not(.is-light-mode .space-reserver){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .space-reserver[data-v-e7ff2963]{border-color:var(--qalendar-dark-mode-line-color)}.space-reserver+.calendar-month__weekday[data-v-e7ff2963]:not(.trailing-or-leading){border-left:var(--qalendar-border-gray-thin)}.calendar-month__day-name[data-v-09c7c5db]{display:block;font-size:12px;font-weight:500;color:var(--qalendar-gray-quite-dark);margin-bottom:var(--qalendar-spacing-half)}.agenda__event[data-v-698b431e]{background-color:var(--691f2791);color:var(--fa1649c2);display:flex;flex-flow:column;justify-content:flex-start;border-radius:4px;font-size:var(--qalendar-font-2xs);margin-bottom:4px;padding:var(--qalendar-spacing);cursor:pointer;user-select:none}.agenda__wrapper[data-v-b60cbce5]{display:flex;flex-flow:row;padding:10px 5px 0}.agenda__wrapper .agenda__header[data-v-b60cbce5]{padding-right:10px}.agenda__wrapper .agenda__header .agenda__header-day-name[data-v-b60cbce5]{text-align:center;color:var(--qalendar-theme-color);font-size:var(--qalendar-font-xs);font-weight:700}.agenda__wrapper .agenda__header .agenda__header-date[data-v-b60cbce5]{height:fit-content;display:flex;justify-content:center;align-items:center;padding:5px;border-radius:4px;background-color:var(--qalendar-theme-color);color:#fff;font-weight:600;font-size:var(--qalendar-font-m)}.agenda__wrapper .agenda__content[data-v-b60cbce5]{display:flex;flex-flow:column;width:100%;height:auto}.agenda__wrapper .agenda__content .is-empty[data-v-b60cbce5]{min-height:70px;display:flex;justify-content:center;align-items:center}.calendar-month[data-v-206c177e]{position:relative;display:flex;flex-flow:column;width:100%;height:100%;overflow-y:auto}.qalendar-is-small .calendar-month[data-v-206c177e]{height:initial}.calendar-month .calendar-month__week-day-names[data-v-206c177e]{display:flex;justify-content:space-between}.calendar-month .calendar-month__week-day-names .calendar-month__week-day-name[data-v-206c177e]{flex:1;text-align:center}.calendar-month .calendar-month__weeks[data-v-206c177e]{height:100%;flex-grow:1;display:flex;flex-flow:column;justify-content:space-between}.calendar-month .calendar-month__week[data-v-206c177e]{display:flex;flex:1}.calendar-month .calendar-month__week[data-v-206c177e]:first-child{border-top:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.calendar-month .calendar-month__week[data-v-206c177e]:first-child:not(.is-light-mode .calendar-month .calendar-month__week:first-child){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-month .calendar-month__week[data-v-206c177e]:first-child{border-color:var(--qalendar-dark-mode-line-color)}.calendar-month .calendar-month__day_events[data-v-206c177e]{height:100%;display:none}.qalendar-is-small .calendar-month .calendar-month__day_events[data-v-206c177e]{display:block}.ps{overflow:hidden!important;overflow-anchor:none;-ms-overflow-style:none;touch-action:auto;-ms-touch-action:auto}.ps__rail-x{display:none;opacity:0;transition:background-color .2s linear,opacity .2s linear;-webkit-transition:background-color .2s linear,opacity .2s linear;height:15px;bottom:0px;position:absolute}.ps__rail-y{display:none;opacity:0;transition:background-color .2s linear,opacity .2s linear;-webkit-transition:background-color .2s linear,opacity .2s linear;width:15px;right:0;position:absolute}.ps--active-x>.ps__rail-x,.ps--active-y>.ps__rail-y{display:block;background-color:transparent}.ps:hover>.ps__rail-x,.ps:hover>.ps__rail-y,.ps--focus>.ps__rail-x,.ps--focus>.ps__rail-y,.ps--scrolling-x>.ps__rail-x,.ps--scrolling-y>.ps__rail-y{opacity:.6}.ps .ps__rail-x:hover,.ps .ps__rail-y:hover,.ps .ps__rail-x:focus,.ps .ps__rail-y:focus,.ps .ps__rail-x.ps--clicking,.ps .ps__rail-y.ps--clicking{background-color:#eee;opacity:.9}.ps__thumb-x{background-color:#aaa;border-radius:6px;transition:background-color .2s linear,height .2s ease-in-out;-webkit-transition:background-color .2s linear,height .2s ease-in-out;height:6px;bottom:2px;position:absolute}.ps__thumb-y{background-color:#aaa;border-radius:6px;transition:background-color .2s linear,width .2s ease-in-out;-webkit-transition:background-color .2s linear,width .2s ease-in-out;width:6px;right:2px;position:absolute}.ps__rail-x:hover>.ps__thumb-x,.ps__rail-x:focus>.ps__thumb-x,.ps__rail-x.ps--clicking .ps__thumb-x{background-color:#999;height:11px}.ps__rail-y:hover>.ps__thumb-y,.ps__rail-y:focus>.ps__thumb-y,.ps__rail-y.ps--clicking .ps__thumb-y{background-color:#999;width:11px}@supports (-ms-overflow-style: none){.ps{overflow:auto!important}}@media screen and (-ms-high-contrast: active),(-ms-high-contrast: none){.ps{overflow:auto!important}}.calendar-root,.date-picker-root{--qalendar-blue: rgb(38 132 255);--qalendar-blue-transparent: rgba(38 132 255 / 90%);--qalendar-gray-quite-dark: rgb(110 110 110);--qalendar-gray: rgb(180 180 180);--qalendar-green: rgb(51 182 121);--qalendar-theme-color: var(--qalendar-blue);--qalendar-light-gray: rgba(240 236 236 / 76%);--qalendar-option-hover: var(--qalendar-light-gray);--qalendar-dark-mode-elevated-surface: #383838;--qalendar-dark-mode-lightly-elevated-surface: #2e2e2e;--qalendar-dark-mode-text-primary: rgba(255 255 255 1);--qalendar-dark-mode-text-secondary: rgba(255 255 255 .7);--qalendar-dark-mode-text-hint: rgba(255 255 255 .5);--qalendar-dark-mode-line-color: var(--qalendar-gray);--qalendar-border-gray-thin: 1px solid rgb(224 224 224);--qalendar-border-dashed-gray-thin: 1px dashed rgb(224 224 224);--qalendar-border-blue-thin: 1px solid var(--qalendar-theme-color);--qalendar-border-radius: 8px;--qalendar-spacing: 10px;--qalendar-spacing-half: 5px;--qalendar-spacing-double: 20px;--qalendar-box-shadow: 0 4px 4px rgba(0 0 0 / 6%), 0 1px 4px rgba(0 0 0 / 18%);--qalendar-text-transition: color .2s ease;--qalendar-week-padding-left: 56px;--qalendar-font-3xs: .625rem;--qalendar-font-2xs: .688rem;--qalendar-font-xs: .75rem;--qalendar-font-s: .875rem;--qalendar-font-m: 1rem;--qalendar-font-l: 1.25rem;--qalendar-font-xl: 1.5rem}@media (prefers-color-scheme: dark){.calendar-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}}[style*=\\\"color-scheme: dark\\\"] .calendar-root,[style*=\\\"color-scheme: dark\\\"] .date-picker-root{--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}@media (prefers-color-scheme: dark){.calendar-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root,[style*=\\\"color-scheme: dark\\\"] .date-picker-root{--qalendar-gray-quite-dark: rgb(221, 221, 221)}@media (min-width: 62rem){.calendar-root{--qalendar-spacing: 20px;--qalendar-spacing-half: 10px;--qalendar-spacing-double: 40px}}.calendar-root-wrapper{width:100%;max-width:100vw;height:100%;display:flex}.calendar-root-wrapper .calendar-root{flex:1;border:var(--qalendar-border-gray-thin);border-radius:var(--qalendar-border-radius);font-family:var(--51d82805);position:relative;width:100%;margin:0 auto;display:flex;flex-flow:column}@media (prefers-color-scheme: dark){.calendar-root-wrapper .calendar-root:not(.is-light-mode .calendar-root-wrapper .calendar-root){background:#121212;color:#fff;border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .calendar-root-wrapper .calendar-root{background:#121212;color:#fff;border-color:transparent}.calendar-root-wrapper .calendar-root .top-bar-loader{position:absolute;top:1px;left:2px;width:calc(100% - 4px);height:3px;background:rgba(241,241,241,.2);border-radius:16px;overflow:hidden}.calendar-root-wrapper .calendar-root .top-bar-loader:before{content:\\\"\\\";height:4px;width:calc(100% - 4px);position:absolute;top:1px;left:2px;background:rgb(38,132,255);background:linear-gradient(90deg,rgb(38,132,255) 0%,rgba(38,132,255,.5088410364) 48%,rgb(38,132,255) 100%);animation:load 1.8s infinite;border-radius:16px}@media (prefers-color-scheme: dark){.calendar-root-wrapper .calendar-root .top-bar-loader:before:not(.is-light-mode .calendar-root-wrapper .calendar-root .top-bar-loader:before){background:rgb(229,224,245)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root-wrapper .calendar-root .top-bar-loader:before{background:rgb(229,224,245)}@keyframes load{0%{width:0;left:-100%}50%{left:0;width:100%}to{width:0;left:100%}}.calendar-root-wrapper .calendar-root .loading-enter-active,.calendar-root-wrapper .calendar-root .loading-leave-active{transition:background .5s ease}.calendar-root-wrapper .calendar-root .loading-leave-to,.calendar-root-wrapper .calendar-root .loading-enter-from{background-color:#fff0}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/qalendar/dist/style.css\"],\"names\":[],\"mappings\":\"AAAA,mEAAmE,gCAAgC,CAAC,mDAAmD,CAAC,4CAA4C,CAAC,iCAAiC,CAAC,iCAAiC,CAAC,4CAA4C,CAAC,8CAA8C,CAAC,mDAAmD,CAAC,8CAA8C,CAAC,sDAAsD,CAAC,sDAAsD,CAAC,yDAAyD,CAAC,oDAAoD,CAAC,qDAAqD,CAAC,uDAAuD,CAAC,+DAA+D,CAAC,kEAAkE,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,+BAA+B,CAAC,8EAA8E,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,4BAA4B,CAAC,4BAA4B,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,uBAAuB,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,oCAAoC,2MAA2M,8CAA8C,CAAC,gCAAgC,CAAC,CAAC,+HAA+H,8CAA8C,CAAC,gCAAgC,CAAC,oCAAoC,2MAA2M,8CAA8C,CAAC,CAAC,+HAA+H,8CAA8C,CAAC,0BAA0B,gCAAgC,wBAAwB,CAAC,6BAA6B,CAAC,+BAA+B,CAAC,CAAC,8BAA8B,iBAAiB,CAAC,iBAAiB,CAAC,eAAe,CAAC,6CAA6C,cAAc,CAAC,2CAA2C,eAAe,CAAC,iDAAiD,iBAAiB,CAAC,mDAAmD,iBAAiB,CAAC,sEAAsE,aAAa,CAAC,6CAA6C,WAAW,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,gCAAgC,CAAC,cAAc,CAAC,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,gCAAgC,CAAC,gBAAgB,CAAC,uCAAuC,CAAC,oCAAoC,6FAA6F,yCAAyC,CAAC,mEAAmE,CAAC,wBAAwB,CAAC,CAAC,2EAA2E,yCAAyC,CAAC,mEAAmE,CAAC,wBAAwB,CAAC,gEAAgE,QAAQ,CAAC,8EAA8E,eAAe,CAAC,iGAAiG,YAAY,CAAC,iDAAiD,iBAAiB,CAAC,oEAAoE,gCAAgC,CAAC,2CAA2C,oCAAoC,CAAC,UAAU,CAAC,qBAAqB,CAAC,uCAAuC,CAAC,iBAAiB,CAAC,eAAe,CAAC,8BAA8B,CAAC,oCAAoC,yFAAyF,2DAA2D,CAAC,wBAAwB,CAAC,8BAA8B,CAAC,CAAC,yEAAyE,2DAA2D,CAAC,wBAAwB,CAAC,8BAA8B,CAAC,0DAA0D,oBAAoB,CAAC,iBAAiB,CAAC,OAAO,CAAC,iJAAiJ,QAAQ,CAAC,yBAAyB,CAAC,uLAAuL,YAAY,CAAC,iBAAiB,CAAC,sDAAsD,eAAe,CAAC,YAAY,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,gCAAgC,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,+DAA+D,0CAA0C,CAAC,aAAa,CAAC,oCAAoC,iIAAiI,yCAAyC,CAAC,CAAC,6FAA6F,yCAAyC,CAAC,sBAAsB,qEAAqE,0BAA0B,CAAC,cAAc,CAAC,CAAC,2CAA2C,0CAA0C,CAAC,sBAAsB,iDAAiD,0BAA0B,CAAC,cAAc,CAAC,CAAC,sCAAsC,YAAY,CAAC,cAAc,CAAC,gCAAgC,CAAC,eAAe,CAAC,2CAA2C,WAAW,CAAC,uCAAuC,CAAC,iBAAiB,CAAC,YAAY,CAAC,iBAAiB,CAAC,cAAc,CAAC,iCAAiC,CAAC,uBAAuB,CAAC,sBAAsB,iDAAiD,4CAA4C,CAAC,UAAU,CAAC,uCAAuC,CAAC,CAAC,oCAAoC,UAAU,CAAC,YAAY,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,YAAY,CAAC,8CAA8C,6CAA6C,CAAC,iBAAiB,CAAC,yCAAyC,YAAY,CAAC,eAAe,CAAC,cAAc,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,aAAa,CAAC,cAAc,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,oDAAoD,UAAU,CAAC,sBAAsB,uDAAuD,6CAA6C,CAAC,CAAC,kDAAkD,qCAAqC,CAAC,UAAU,CAAC,yDAAyD,aAAa,CAAC,qDAAqD,aAAa,CAAC,kBAAkB,CAAC,wDAAwD,gBAAgB,CAAC,yCAAyC,wBAAwB,CAAC,eAAe,CAAC,gCAAgC,CAAC,kCAAkC,YAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,oCAAoC,CAAC,2CAA2C,CAAC,4BAA4B,kCAAkC,6BAA6B,CAAC,gCAAgC,CAAC,CAAC,oCAAoC,uEAAuE,yCAAyC,CAAC,CAAC,gEAAgE,yCAAyC,CAAC,0CAA0C,YAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,+CAA+C,gCAAgC,CAAC,iBAAiB,CAAC,4BAA4B,+CAA+C,eAAe,CAAC,eAAe,CAAC,CAAC,gDAAgD,YAAY,CAAC,cAAc,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,kDAAkD,YAAY,CAAC,kBAAkB,CAAC,aAAa,CAAC,kFAAkF,cAAc,CAAC,yBAAyB,CAAC,gCAAgC,CAAC,sBAAsB,wFAAwF,qCAAqC,CAAC,CAAC,+CAA+C,iBAAiB,CAAC,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,WAAW,CAAC,iBAAiB,CAAC,gCAAgC,CAAC,cAAc,CAAC,uCAAuC,CAAC,oCAAoC,iGAAiG,wBAAwB,CAAC,CAAC,6EAA6E,wBAAwB,CAAC,4EAA4E,iCAAiC,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,oCAAoC,2JAA2J,mEAAmE,CAAC,CAAC,0GAA0G,mEAAmE,CAAC,8EAA8E,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,yBAAyB,CAAC,uCAAuC,CAAC,qBAAqB,CAAC,oCAAoC,+JAA+J,wBAAwB,CAAC,2DAA2D,CAAC,CAAC,4GAA4G,wBAAwB,CAAC,2DAA2D,CAAC,4GAA4G,4DAA4D,CAAC,sBAAsB,kHAAkH,6CAA6C,CAAC,CAAC,+BAA+B,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,YAAY,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,qCAAqC,gBAAgB,CAAC,YAAY,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,WAAW,CAAC,kCAAkC,CAAC,qCAAqC,CAAC,0CAA0C,aAAa,CAAC,0BAA0B,CAAC,0EAA0E,YAAY,CAAC,sDAAsD,8CAA8C,CAAC,oCAAoC,+GAA+G,iDAAiD,CAAC,CAAC,oFAAoF,iDAAiD,CAAC,uCAAuC,iBAAiB,CAAC,oBAAoB,CAAC,YAAY,CAAC,kBAAkB,CAAC,YAAY,CAAC,uCAAuC,CAAC,kCAAkC,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,eAAe,CAAC,cAAc,CAAC,gBAAgB,CAAC,eAAe,CAAC,8CAA8C,kBAAkB,CAAC,gCAAgC,kBAAkB,CAAC,YAAY,CAAC,4BAA4B,CAAC,2CAA2C,CAAC,8CAA8C,CAAC,8CAA8C,CAAC,6CAA6C,UAAU,CAAC,cAAc,CAAC,qCAAqC,UAAU,CAAC,YAAY,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,0CAA0C,kCAAkC,CAAC,eAAe,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,sCAAsC,gBAAgB,CAAC,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,YAAY,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,gDAAgD,qCAAqC,CAAC,UAAU,CAAC,wCAAwC,UAAU,CAAC,MAAM,CAAC,wCAAwC,CAAC,wEAAwE,uCAAuC,CAAC,uCAAuC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAC,cAAc,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,eAAe,CAAC,mDAAmD,WAAW,CAAC,wDAAwD,cAAc,CAAC,iEAAiE,YAAY,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,mEAAmE,QAAQ,CAAC,SAAS,CAAC,0EAA0E,iBAAiB,CAAC,oCAAoC,CAAC,iCAAiC,CAAC,WAAW,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,uEAAuE,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,4DAA4D,CAAC,kEAAkE,kBAAkB,CAAC,iCAAiC,CAAC,oEAAoE,iBAAiB,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,uEAAuE,KAAK,CAAC,yEAAyE,QAAQ,CAAC,qCAAqC,iBAAiB,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,qBAAqB,CAAC,kEAAkE,MAAM,CAAC,iCAAiC,CAAC,0BAA0B,CAAC,WAAW,CAAC,6EAA6E,qDAAqD,CAAC,iDAAiD,uCAAuC,CAAC,oCAAoC,qGAAqG,iDAAiD,CAAC,CAAC,+EAA+E,iDAAiD,CAAC,sDAAsD,wCAAwC,CAAC,oCAAoC,+GAA+G,iDAAiD,CAAC,CAAC,oFAAoF,iDAAiD,CAAC,+BAA+B,cAAc,CAAC,UAAU,CAAC,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,aAAa,CAAC,uCAAuC,CAAC,iBAAiB,CAAC,qDAAqD,CAAC,eAAe,CAAC,uBAAuB,CAAC,qCAAqC,CAAC,2BAA2B,CAAC,SAAS,CAAC,mBAAmB,CAAC,oCAAoC,iEAAiE,2DAA2D,CAAC,wBAAwB,CAAC,CAAC,6DAA6D,2DAA2D,CAAC,wBAAwB,CAAC,0CAA0C,SAAS,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,iDAAiD,iBAAiB,CAAC,qCAAqC,YAAY,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,iIAAiI,iFAAiF,CAAC,YAAY,CAAC,aAAa,CAAC,gFAAgF,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,0CAA0C,gCAAgC,CAAC,UAAU,CAAC,oCAAoC,uFAAuF,yCAAyC,CAAC,CAAC,wEAAwE,yCAAyC,CAAC,gDAAgD,iCAAiC,CAAC,cAAc,CAAC,oDAAoD,SAAS,CAAC,6CAA6C,+BAA+B,CAAC,oCAAoC,YAAY,CAAC,gCAAgC,CAAC,mBAAmB,CAAC,eAAe,CAAC,sCAAsC,QAAQ,CAAC,SAAS,CAAC,wCAAwC,gBAAgB,CAAC,aAAa,CAAC,UAAU,CAAC,oCAAoC,mFAAmF,yCAAyC,CAAC,CAAC,sEAAsE,yCAAyC,CAAC,2CAA2C,mBAAmB,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,yCAAyC,gCAAgC,CAAC,kBAAkB,CAAC,0DAA0D,aAAa,CAAC,wCAAwC,gCAAgC,CAAC,mBAAmB,CAAC,yCAAyC,iBAAiB,CAAC,8CAA8C,CAAC,eAAe,CAAC,gCAAgC,iBAAiB,CAAC,UAAU,CAAC,aAAa,CAAC,wCAAwC,YAAY,CAAC,UAAU,CAAC,sBAAsB,CAAC,eAAe,CAAC,mDAAmD,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,2DAA2D,iBAAiB,CAAC,kEAAkE,UAAU,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,qDAAqD,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,wCAAwC,2BAA2B,CAAC,YAAY,CAAC,kBAAkB,CAAC,eAAe,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,wDAAwD,CAAC,iBAAiB,CAAC,0CAA0C,CAAC,cAAc,CAAC,gBAAgB,CAAC,oEAAoE,gBAAgB,CAAC,8MAA8M,aAAa,CAAC,+KAA+K,YAAY,CAAC,2DAA2D,gCAAgC,CAAC,SAAS,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,gBAAgB,CAAC,qDAAqD,WAAW,CAAC,+CAA+C,WAAW,CAAC,kEAAkE,kBAAkB,CAAC,sBAAsB,8CAA8C,2CAA2C,CAAC,CAAC,yCAAyC,oDAAoD,6CAA6C,CAAC,CAAC,qEAAqE,gCAAgC,CAAC,SAAS,CAAC,UAAU,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,0CAA0C,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,8CAA8C,CAAC,eAAe,CAAC,2CAA2C,CAAC,oCAAoC,uFAAuF,iDAAiD,CAAC,CAAC,wEAAwE,iDAAiD,CAAC,uDAAuD,2CAA2C,CAAC,qDAAqD,cAAc,CAAC,yEAAyE,8DAA8D,CAAC,2DAA2D,CAAC,sDAAsD,CAAC,iBAAiB,CAAC,6DAA6D,WAAW,CAAC,UAAU,CAAC,YAAY,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,oEAAoE,iCAAiC,CAAC,qCAAqC,CAAC,gFAAgF,cAAc,CAAC,wEAAwE,kCAAkC,CAAC,UAAU,CAAC,gBAAgB,CAAC,qCAAqC,CAAC,cAAc,CAAC,iEAAiE,UAAU,CAAC,oFAAoF,YAAY,CAAC,aAAa,CAAC,sBAAsB,CAAC,kHAAkH,YAAY,CAAC,6EAA6E,4CAA4C,CAAC,UAAU,CAAC,iBAAiB,CAAC,eAAe,CAAC,gGAAgG,eAAe,CAAC,iCAAiC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,8CAA8C,CAAC,8BAA8B,CAAC,oCAAoC,qEAAqE,iDAAiD,CAAC,CAAC,+DAA+D,iDAAiD,CAAC,oFAAoF,4CAA4C,CAAC,2CAA2C,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC,qCAAqC,CAAC,0CAA0C,CAAC,gCAAgC,gCAAgC,CAAC,qBAAqB,CAAC,YAAY,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,kCAAkC,CAAC,iBAAiB,CAAC,+BAA+B,CAAC,cAAc,CAAC,gBAAgB,CAAC,kCAAkC,YAAY,CAAC,aAAa,CAAC,kBAAkB,CAAC,kDAAkD,kBAAkB,CAAC,2EAA2E,iBAAiB,CAAC,iCAAiC,CAAC,iCAAiC,CAAC,eAAe,CAAC,uEAAuE,kBAAkB,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,WAAW,CAAC,iBAAiB,CAAC,4CAA4C,CAAC,UAAU,CAAC,eAAe,CAAC,gCAAgC,CAAC,mDAAmD,YAAY,CAAC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,6DAA6D,eAAe,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,iCAAiC,iBAAiB,CAAC,YAAY,CAAC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAC,oDAAoD,cAAc,CAAC,iEAAiE,YAAY,CAAC,6BAA6B,CAAC,gGAAgG,MAAM,CAAC,iBAAiB,CAAC,wDAAwD,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,uDAAuD,YAAY,CAAC,MAAM,CAAC,mEAAmE,2CAA2C,CAAC,oCAAoC,yIAAyI,iDAAiD,CAAC,CAAC,iGAAiG,iDAAiD,CAAC,6DAA6D,WAAW,CAAC,YAAY,CAAC,gFAAgF,aAAa,CAAC,IAAI,yBAAyB,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,YAAY,YAAY,CAAC,SAAS,CAAC,yDAAyD,CAAC,iEAAiE,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,YAAY,YAAY,CAAC,SAAS,CAAC,yDAAyD,CAAC,iEAAiE,CAAC,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,oDAAoD,aAAa,CAAC,4BAA4B,CAAC,oJAAoJ,UAAU,CAAC,kJAAkJ,qBAAqB,CAAC,UAAU,CAAC,aAAa,qBAAqB,CAAC,iBAAiB,CAAC,6DAA6D,CAAC,qEAAqE,CAAC,UAAU,CAAC,UAAU,CAAC,iBAAiB,CAAC,aAAa,qBAAqB,CAAC,iBAAiB,CAAC,4DAA4D,CAAC,oEAAoE,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,oGAAoG,qBAAqB,CAAC,WAAW,CAAC,oGAAoG,qBAAqB,CAAC,UAAU,CAAC,qCAAqC,IAAI,uBAAuB,CAAC,CAAC,wEAAwE,IAAI,uBAAuB,CAAC,CAAC,iCAAiC,gCAAgC,CAAC,mDAAmD,CAAC,4CAA4C,CAAC,iCAAiC,CAAC,iCAAiC,CAAC,4CAA4C,CAAC,8CAA8C,CAAC,mDAAmD,CAAC,8CAA8C,CAAC,sDAAsD,CAAC,sDAAsD,CAAC,yDAAyD,CAAC,oDAAoD,CAAC,qDAAqD,CAAC,uDAAuD,CAAC,+DAA+D,CAAC,kEAAkE,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,4BAA4B,CAAC,+BAA+B,CAAC,8EAA8E,CAAC,0CAA0C,CAAC,kCAAkC,CAAC,4BAA4B,CAAC,4BAA4B,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,uBAAuB,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,oCAAoC,yKAAyK,8CAA8C,CAAC,gCAAgC,CAAC,CAAC,6FAA6F,8CAA8C,CAAC,gCAAgC,CAAC,oCAAoC,yKAAyK,8CAA8C,CAAC,CAAC,6FAA6F,8CAA8C,CAAC,0BAA0B,eAAe,wBAAwB,CAAC,6BAA6B,CAAC,+BAA+B,CAAC,CAAC,uBAAuB,UAAU,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,sCAAsC,MAAM,CAAC,uCAAuC,CAAC,2CAA2C,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,gBAAgB,CAAC,oCAAoC,gGAAgG,kBAAkB,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,oEAAoE,kBAAkB,CAAC,UAAU,CAAC,wBAAwB,CAAC,sDAAsD,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,UAAU,CAAC,+BAA+B,CAAC,kBAAkB,CAAC,eAAe,CAAC,6DAA6D,UAAU,CAAC,UAAU,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,0GAA0G,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,oCAAoC,8IAA8I,2BAA2B,CAAC,CAAC,2FAA2F,2BAA2B,CAAC,gBAAgB,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,wHAAwH,8BAA8B,CAAC,kHAAkH,sBAAsB\",\"sourcesContent\":[\".calendar-root[data-v-67f77862],.date-picker-root[data-v-67f77862]{--qalendar-blue: rgb(38 132 255);--qalendar-blue-transparent: rgba(38 132 255 / 90%);--qalendar-gray-quite-dark: rgb(110 110 110);--qalendar-gray: rgb(180 180 180);--qalendar-green: rgb(51 182 121);--qalendar-theme-color: var(--qalendar-blue);--qalendar-light-gray: rgba(240 236 236 / 76%);--qalendar-option-hover: var(--qalendar-light-gray);--qalendar-dark-mode-elevated-surface: #383838;--qalendar-dark-mode-lightly-elevated-surface: #2e2e2e;--qalendar-dark-mode-text-primary: rgba(255 255 255 1);--qalendar-dark-mode-text-secondary: rgba(255 255 255 .7);--qalendar-dark-mode-text-hint: rgba(255 255 255 .5);--qalendar-dark-mode-line-color: var(--qalendar-gray);--qalendar-border-gray-thin: 1px solid rgb(224 224 224);--qalendar-border-dashed-gray-thin: 1px dashed rgb(224 224 224);--qalendar-border-blue-thin: 1px solid var(--qalendar-theme-color);--qalendar-border-radius: 8px;--qalendar-spacing: 10px;--qalendar-spacing-half: 5px;--qalendar-spacing-double: 20px;--qalendar-box-shadow: 0 4px 4px rgba(0 0 0 / 6%), 0 1px 4px rgba(0 0 0 / 18%);--qalendar-text-transition: color .2s ease;--qalendar-week-padding-left: 56px;--qalendar-font-3xs: .625rem;--qalendar-font-2xs: .688rem;--qalendar-font-xs: .75rem;--qalendar-font-s: .875rem;--qalendar-font-m: 1rem;--qalendar-font-l: 1.25rem;--qalendar-font-xl: 1.5rem}@media (prefers-color-scheme: dark){.calendar-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}}[style*=\\\"color-scheme: dark\\\"] .calendar-root[data-v-67f77862],[style*=\\\"color-scheme: dark\\\"] .date-picker-root[data-v-67f77862]{--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}@media (prefers-color-scheme: dark){.calendar-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root[data-v-67f77862]:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root[data-v-67f77862],[style*=\\\"color-scheme: dark\\\"] .date-picker-root[data-v-67f77862]{--qalendar-gray-quite-dark: rgb(221, 221, 221)}@media (min-width: 62rem){.calendar-root[data-v-67f77862]{--qalendar-spacing: 20px;--qalendar-spacing-half: 10px;--qalendar-spacing-double: 40px}}.date-picker[data-v-67f77862]{position:relative;width:fit-content;min-width:16rem}.mode-is-month .date-picker[data-v-67f77862]{min-width:8rem}.mode-is-day .date-picker[data-v-67f77862]{min-width:10rem}.qalendar-is-small .date-picker[data-v-67f77862]{min-width:initial}.date-picker[data-v-67f77862]:not(.is-in-qalendar){min-width:initial}.qalendar-is-small .date-picker[data-v-67f77862]:not(.is-in-qalendar){margin:0 auto}.date-picker__value-display[data-v-67f77862]{height:36px;border-radius:4px;padding:0 var(--qalendar-spacing);font-size:var(--qalendar-font-m);cursor:pointer;display:flex;align-items:center;justify-content:center;gap:var(--qalendar-spacing-half);user-select:none;border:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.date-picker__value-display[data-v-67f77862]:not(.is-light-mode .date-picker__value-display){color:var(--qalendar-dark-mode-text-hint);background-color:var(--qalendar-dark-mode-lightly-elevated-surface);border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .date-picker__value-display[data-v-67f77862]{color:var(--qalendar-dark-mode-text-hint);background-color:var(--qalendar-dark-mode-lightly-elevated-surface);border-color:transparent}.qalendar-is-small .date-picker__value-display[data-v-67f77862]{border:0}.date-picker__value-display .date-picker__value-display-text[data-v-67f77862]{display:initial}.qalendar-is-small .date-picker__value-display .date-picker__value-display-text[data-v-67f77862]{display:none}.date-picker__value-display svg[data-v-67f77862]{font-size:initial}.qalendar-is-small .date-picker__value-display svg[data-v-67f77862]{font-size:var(--qalendar-font-l)}.date-picker__week-picker[data-v-67f77862]{padding:var(--qalendar-spacing-half);z-index:51;background-color:#fff;border:var(--qalendar-border-gray-thin);border-radius:4px;min-width:250px;box-shadow:0 2px 4px #f0ececc2}@media (prefers-color-scheme: dark){.date-picker__week-picker[data-v-67f77862]:not(.is-light-mode .date-picker__week-picker){background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent;box-shadow:0 2px 4px #0000001a}}[style*=\\\"color-scheme: dark\\\"] .date-picker__week-picker[data-v-67f77862]{background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent;box-shadow:0 2px 4px #0000001a}.date-picker__week-picker.is-in-qalendar[data-v-67f77862]{top:calc(100% - 1px);position:absolute;right:0}.date-picker__week-picker.is-in-qalendar .mode-is-month[data-v-67f77862],.mode-is-week .date-picker__week-picker.is-in-qalendar[data-v-67f77862]{left:50%;transform:translate(-50%)}.qalendar-is-small .date-picker__week-picker.is-in-qalendar .mode-is-month[data-v-67f77862],.qalendar-is-small .mode-is-week .date-picker__week-picker.is-in-qalendar[data-v-67f77862]{left:initial;transform:initial}.date-picker__week-picker-navigation[data-v-67f77862]{font-weight:900;display:flex;align-items:center;justify-content:space-between;gap:var(--qalendar-spacing-half);margin-bottom:.25em;user-select:none}.date-picker__week-picker-navigation .is-icon[data-v-67f77862]{transition:var(--qalendar-text-transition);color:#131313}@media (prefers-color-scheme: dark){.date-picker__week-picker-navigation .is-icon[data-v-67f77862]:not(.is-light-mode .date-picker__week-picker-navigation .is-icon){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .date-picker__week-picker-navigation .is-icon[data-v-67f77862]{color:var(--qalendar-dark-mode-text-hint)}@media (hover: hover){.date-picker__week-picker-navigation .is-icon[data-v-67f77862]:hover{color:var(--qalendar-blue);cursor:pointer}}.date-picker__toggle-mode[data-v-67f77862]{transition:var(--qalendar-text-transition)}@media (hover: hover){.date-picker__toggle-mode[data-v-67f77862]:hover{color:var(--qalendar-blue);cursor:pointer}}.date-picker .months[data-v-67f77862]{display:flex;flex-wrap:wrap;gap:var(--qalendar-spacing-half);max-width:20rem}.date-picker .months span[data-v-67f77862]{padding:4px;border:var(--qalendar-border-gray-thin);border-radius:2px;flex:1 0 33%;text-align:center;cursor:pointer;font-size:var(--qalendar-font-xs);transition:all .2s ease}@media (hover: hover){.date-picker .months span[data-v-67f77862]:hover{background-color:var(--qalendar-theme-color);color:#fff;border:var(--qalendar-border-blue-thin)}}.date-picker .week[data-v-67f77862]{width:100%;display:flex;justify-content:space-evenly;align-items:center;margin:4px 0}.date-picker .week.is-active[data-v-67f77862]{border:1px dashed var(--qalendar-theme-color);border-radius:4px}.date-picker .week span[data-v-67f77862]{display:flex;min-height:32px;min-width:32px;justify-content:center;align-items:center;flex:1 1 100%;cursor:pointer;border-radius:50%;font-size:var(--qalendar-font-xs)}.date-picker .week span.is-weekend[data-v-67f77862]{color:gray}@media (hover: hover){.date-picker .week span.has-day[data-v-67f77862]:hover{background-color:var(--qalendar-option-hover)}}.date-picker .week span.is-today[data-v-67f77862]{background-color:var(--qalendar-blue);color:#fff}.date-picker .week span.is-not-in-month[data-v-67f77862]{color:#a9a9a9}.date-picker .week span.is-disabled[data-v-67f77862]{color:#a9a9a9;cursor:not-allowed}[data-lang=ar] .date-picker .week span[data-v-67f77862]{font-size:.65rem}.date-picker__day-names[data-v-67f77862]{text-transform:uppercase;font-weight:700;font-size:var(--qalendar-font-s)}.calendar-header[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding:var(--qalendar-spacing-half);border-radius:var(--qalendar-border-radius)}@media (min-width: 37.5rem){.calendar-header[data-v-37f1c389]{justify-content:space-between;grid-gap:var(--qalendar-spacing)}}@media (prefers-color-scheme: dark){.calendar-header[data-v-37f1c389]:not(.is-light-mode .calendar-header){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header[data-v-37f1c389]{color:var(--qalendar-dark-mode-text-hint)}.calendar-header__period[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;gap:var(--qalendar-spacing)}.calendar-header__period-name[data-v-37f1c389]{font-size:var(--qalendar-font-l);text-align:center}@media (min-width: 37.5rem){.calendar-header__period-name[data-v-37f1c389]{margin-bottom:0;text-align:left}}.calendar-header__multiselects[data-v-37f1c389]{display:flex;flex-wrap:wrap;align-items:center;gap:var(--qalendar-spacing)}.calendar-header__chevron-arrows[data-v-37f1c389]{display:flex;align-items:center;grid-gap:20px}.calendar-header__chevron-arrows .calendar-header__chevron-arrow[data-v-37f1c389]{cursor:pointer;transition:color .2s ease;font-size:var(--qalendar-font-m)}@media (hover: hover){.calendar-header__chevron-arrows .calendar-header__chevron-arrow[data-v-37f1c389]:hover{color:var(--qalendar-gray-quite-dark)}}.calendar-header__mode-picker[data-v-37f1c389]{position:relative;display:flex;align-items:center;justify-content:center;width:fit-content;height:36px;border-radius:4px;font-size:var(--qalendar-font-m);cursor:pointer;border:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.calendar-header__mode-picker[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker){border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker[data-v-37f1c389]{border-color:transparent}.calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]{padding:0 var(--qalendar-spacing);width:100%;height:100%;display:flex;align-items:center;user-select:none;border-radius:4px}@media (prefers-color-scheme: dark){.calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker .calendar-header__mode-value){background-color:var(--qalendar-dark-mode-lightly-elevated-surface)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker .calendar-header__mode-value[data-v-37f1c389]{background-color:var(--qalendar-dark-mode-lightly-elevated-surface)}.calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]{position:absolute;z-index:51;top:100%;left:50%;transform:translate(-50%);border:var(--qalendar-border-gray-thin);background-color:#fff}@media (prefers-color-scheme: dark){.calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]:not(.is-light-mode .calendar-header__mode-picker .calendar-header__mode-options){border-color:transparent;background-color:var(--qalendar-dark-mode-elevated-surface)}}[style*=\\\"color-scheme: dark\\\"] .calendar-header__mode-picker .calendar-header__mode-options[data-v-37f1c389]{border-color:transparent;background-color:var(--qalendar-dark-mode-elevated-surface)}.calendar-header__mode-picker .calendar-header__mode-options .calendar-header__mode-option[data-v-37f1c389]{padding:var(--qalendar-spacing-half) var(--qalendar-spacing)}@media (hover: hover){.calendar-header__mode-picker .calendar-header__mode-options .calendar-header__mode-option[data-v-37f1c389]:hover{background-color:var(--qalendar-option-hover)}}.day-timeline[data-v-014bf4e0]{position:absolute;top:0;left:0;width:calc(100% + 10px);height:var(--11371d19);transform:translate(-10px);display:flex;flex-flow:column;justify-content:space-evenly}.day-timeline__hour[data-v-014bf4e0]{padding-left:4px;display:flex;flex-flow:column;justify-content:flex-start;height:100%;font-size:clamp(10px,.625rem,14px);color:var(--qalendar-gray-quite-dark)}.day-timeline__hour-text[data-v-014bf4e0]{line-height:0;transform:translate(-40px)}.day-timeline__hour:first-child .day-timeline__hour-text[data-v-014bf4e0]{display:none}.day-timeline__hour[data-v-014bf4e0]:not(:last-child){border-bottom:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.day-timeline__hour[data-v-014bf4e0]:not(:last-child):not(.is-light-mode .day-timeline__hour:not(:last-child)){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .day-timeline__hour[data-v-014bf4e0]:not(:last-child){border-color:var(--qalendar-dark-mode-line-color)}.week-timeline__event[data-v-778d59fc]{position:relative;--event-padding: 3px;display:flex;align-items:center;height:.9rem;width:calc(100% - var(--event-padding));font-size:var(--qalendar-font-2xs);border-radius:4px;padding:var(--event-padding);margin-bottom:.25em;text-align:left;cursor:pointer;user-select:none;overflow:hidden}.week-timeline__event[data-v-778d59fc]:active{cursor:not-allowed}.week-timeline[data-v-a43746b6]{height:fit-content;display:flex;justify-content:space-evenly;padding-bottom:var(--qalendar-spacing-half);padding-left:var(--qalendar-week-padding-left);border-bottom:var(--qalendar-border-gray-thin)}.mode-is-day .week-timeline[data-v-a43746b6]{width:100%;padding-left:0}.week-timeline__day[data-v-a43746b6]{width:100%;display:flex;flex-flow:column;align-items:center;justify-content:flex-start}.week-timeline__day-name[data-v-a43746b6]{font-size:var(--qalendar-font-3xs);font-weight:400;margin-bottom:4px;color:var(--qalendar-gray-quite-dark)}.week-timeline__date[data-v-a43746b6]{font-size:1.2rem;margin-bottom:4px;height:2rem;width:2rem;border-radius:50%;display:flex;align-items:center;justify-content:center}.is-today .week-timeline__date[data-v-a43746b6]{background-color:var(--qalendar-blue);color:#fff}.week-timeline__events[data-v-a43746b6]{width:100%;flex:1;border-right:1px dashed rgb(224,224,224)}.week-timeline__day:first-child .week-timeline__events[data-v-a43746b6]{border-left:1px dashed rgb(224,224,224)}.calendar-week__event[data-v-5564d436]{position:absolute;width:100%;border-radius:4px;cursor:pointer;box-sizing:content-box;user-select:none;overflow:hidden}.calendar-week__event.is-editable[data-v-5564d436]{cursor:grab}.calendar-week__event.has-disabled-dnd[data-v-5564d436]{cursor:initial}.calendar-week__event .calendar-week__event-row[data-v-5564d436]{display:flex;align-items:flex-start;margin-bottom:.25em}.calendar-week__event .calendar-week__event-row p[data-v-5564d436]{margin:0;padding:0}.calendar-week__event .calendar-week__event-info-wrapper[data-v-5564d436]{position:relative;padding:var(--qalendar-spacing-half);font-size:var(--qalendar-font-xs);height:100%;box-sizing:border-box;user-select:none}.calendar-week__event .calendar-week__event-blend-out[data-v-5564d436]{position:absolute;bottom:0;height:20px;width:100%;transform:translate(calc(var(--qalendar-spacing-half) * -1))}.calendar-week__event .calendar-week__event-icon[data-v-5564d436]{margin:2px 4px 0 0;font-size:var(--qalendar-font-xs)}.calendar-week__event .calendar-week__event-resize[data-v-5564d436]{position:absolute;width:100%;cursor:ns-resize;height:5px}.calendar-week__event .calendar-week__event-resize-up[data-v-5564d436]{top:0}.calendar-week__event .calendar-week__event-resize-down[data-v-5564d436]{bottom:0}.calendar-week__day[data-v-b268be7e]{position:relative;width:100%;height:100%;display:flex;flex-direction:column}.calendar-week__day .calendar-week__day-interval[data-v-b268be7e]{flex:1;font-size:var(--qalendar-font-xs);color:var(--qalendar-gray);padding:2px}.calendar-week__day .calendar-week__day-interval.has-border[data-v-b268be7e]{border-bottom:var(--qalendar-border-dashed-gray-thin)}.calendar-week__day[data-v-b268be7e]:first-child{border-left:1px dashed rgb(224,224,224)}@media (prefers-color-scheme: dark){.calendar-week__day[data-v-b268be7e]:first-child:not(.is-light-mode .calendar-week__day:first-child){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-week__day[data-v-b268be7e]:first-child{border-color:var(--qalendar-dark-mode-line-color)}.calendar-week__day[data-v-b268be7e]:not(:last-child){border-right:1px dashed rgb(224,224,224)}@media (prefers-color-scheme: dark){.calendar-week__day[data-v-b268be7e]:not(:last-child):not(.is-light-mode .calendar-week__day:not(:last-child)){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-week__day[data-v-b268be7e]:not(:last-child){border-color:var(--qalendar-dark-mode-line-color)}.event-flyout[data-v-d6a61e37]{position:fixed;z-index:50;background-color:#fff;max-height:100%;width:var(--7c0b2114);max-width:98%;border:var(--qalendar-border-gray-thin);border-radius:8px;box-shadow:0 12px 24px #00000017,0 6px 12px #0000002e;overflow:hidden;transition:all .2s ease;transition-property:opacity,transform;transform:translateY(-40px);opacity:0;pointer-events:none}@media (prefers-color-scheme: dark){.event-flyout[data-v-d6a61e37]:not(.is-light-mode .event-flyout){background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .event-flyout[data-v-d6a61e37]{background-color:var(--qalendar-dark-mode-elevated-surface);border-color:transparent}.event-flyout.is-visible[data-v-d6a61e37]{opacity:1;transform:translateY(0);pointer-events:initial}.event-flyout__relative-wrapper[data-v-d6a61e37]{position:relative}.event-flyout__menu[data-v-d6a61e37]{display:flex;justify-content:space-between;align-items:center}.event-flyout__menu .event-flyout__menu-editable[data-v-d6a61e37],.event-flyout__menu .event-flyout__menu-close[data-v-d6a61e37]{padding:var(--qalendar-spacing) var(--qalendar-spacing) 0 var(--qalendar-spacing);display:flex;grid-gap:20px}.is-not-editable .event-flyout__menu .event-flyout__menu-close[data-v-d6a61e37]{position:absolute;top:0;right:0}.event-flyout__menu-item[data-v-d6a61e37]{font-size:var(--qalendar-font-l);color:gray}@media (prefers-color-scheme: dark){.event-flyout__menu-item[data-v-d6a61e37]:not(.is-light-mode .event-flyout__menu-item){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .event-flyout__menu-item[data-v-d6a61e37]{color:var(--qalendar-dark-mode-text-hint)}.event-flyout__menu-item[data-v-d6a61e37]:hover{color:var(--qalendar-theme-color);cursor:pointer}.event-flyout .is-trash-icon[data-v-d6a61e37]:hover{color:red}.event-flyout__info-wrapper[data-v-d6a61e37]{padding:var(--qalendar-spacing)}.event-flyout__row[data-v-d6a61e37]{display:flex;grid-gap:var(--qalendar-spacing);margin-bottom:.25em;font-weight:400}.event-flyout__row p[data-v-d6a61e37]{margin:0;padding:0}.event-flyout__row svg[data-v-d6a61e37]{margin-top:.1rem;color:#5f6368;width:14px}@media (prefers-color-scheme: dark){.event-flyout__row svg[data-v-d6a61e37]:not(.is-light-mode .event-flyout__row svg){color:var(--qalendar-dark-mode-text-hint)}}[style*=\\\"color-scheme: dark\\\"] .event-flyout__row svg[data-v-d6a61e37]{color:var(--qalendar-dark-mode-text-hint)}.event-flyout__color-icon[data-v-d6a61e37]{--icon-height: 16px;border-radius:50%;height:var(--icon-height);width:var(--icon-height)}.event-flyout .is-title[data-v-d6a61e37]{font-size:var(--qalendar-font-l);align-items:center}.is-not-editable .event-flyout .is-title[data-v-d6a61e37]{max-width:90%}.event-flyout .is-time[data-v-d6a61e37]{font-size:var(--qalendar-font-s);margin-bottom:.75em}.calendar-week__wrapper[data-v-8bb6ad05]{position:relative;padding-left:var(--qalendar-week-padding-left);overflow-y:auto}.calendar-week[data-v-8bb6ad05]{position:relative;width:100%;flex:1 1 auto}.calendar-week__events[data-v-8bb6ad05]{display:flex;width:100%;height:var(--5cb5d057);overflow:hidden}.calendar-week .current-time-line[data-v-8bb6ad05]{position:absolute;left:0;width:100%;height:2px;z-index:1;background-color:red}.calendar-week .current-time-line__circle[data-v-8bb6ad05]{position:relative}.calendar-week .current-time-line__circle[data-v-8bb6ad05]:before{content:\\\"\\\";position:absolute;transform:translate(-45%,-45%);width:10px;height:10px;border-radius:50%;background-color:red}.calendar-week .custom-current-time[data-v-8bb6ad05]{position:absolute;left:0;width:100%;z-index:1}.calendar-month__event[data-v-4766dfc7]{--event-inline-padding: 4px;display:flex;align-items:center;overflow:hidden;border-radius:4px;font-size:var(--qalendar-font-2xs);width:calc(100% - calc(var(--event-inline-padding) * 2));margin-bottom:4px;padding:.25rem var(--event-inline-padding);cursor:pointer;user-select:none}.calendar-month__event .calendar-month__event-time[data-v-4766dfc7]{margin-right:6px}.calendar-month__event .calendar-month__event-time[data-v-4766dfc7],.calendar-month__event .calendar-month__event-title[data-v-4766dfc7],.calendar-month__event .calendar-month__event-color[data-v-4766dfc7]{flex-shrink:0}.qalendar-is-small .calendar-month__event .calendar-month__event-time[data-v-4766dfc7],.qalendar-is-small .calendar-month__event .calendar-month__event-title[data-v-4766dfc7]{display:none}.qalendar-is-small .calendar-month__event[data-v-4766dfc7]{background-color:var(--63a9bc8a);width:4px;height:4px;border-radius:50%;padding:1px;margin-right:1px}.calendar-month__event.is-draggable[data-v-4766dfc7]{cursor:grab}.calendar-month__event[data-v-4766dfc7]:active{z-index:100}.calendar-month__event[data-v-4766dfc7]:not(.is-draggable):active{cursor:not-allowed}@media (hover: hover){.calendar-month__event[data-v-4766dfc7]:hover{background-color:var(--qalendar-light-gray)}}@media (hover: hover) and (hover: hover){.calendar-month__event[data-v-4766dfc7]:hover:hover{background-color:var(--qalendar-option-hover)}}.calendar-month__event .calendar-month__event-color[data-v-4766dfc7]{background-color:var(--63a9bc8a);width:6px;height:6px;border-radius:50%;margin-right:4px}.calendar-month__weekday[data-v-e7ff2963]{height:100%;flex:1;display:flex;flex-flow:column;align-items:center;border-right:var(--qalendar-border-gray-thin);border-bottom:var(--qalendar-border-gray-thin);overflow:hidden;transition:background-color .2s ease-in-out}@media (prefers-color-scheme: dark){.calendar-month__weekday[data-v-e7ff2963]:not(.is-light-mode .calendar-month__weekday){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-month__weekday[data-v-e7ff2963]{border-color:var(--qalendar-dark-mode-line-color)}.calendar-month__weekday.is-droppable[data-v-e7ff2963]{background-color:var(--qalendar-light-gray)}.calendar-month__weekday[data-v-e7ff2963]:last-child{border-right:0}.qalendar-is-small .calendar-month__weekday.is-selected[data-v-e7ff2963]{-webkit-box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);-moz-box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);box-shadow:inset 0 0 0 3px var(--qalendar-theme-color);border-radius:5px}.qalendar-is-small .calendar-month__weekday[data-v-e7ff2963]{height:45px;width:45px;display:flex;flex-flow:column;justify-content:space-around}.calendar-month__weekday .calendar-month__day-date[data-v-e7ff2963]{font-size:var(--qalendar-font-xs);color:var(--qalendar-gray-quite-dark)}.calendar-month__weekday .calendar-month__day-date[data-v-e7ff2963]:first-child{margin-top:6px}.calendar-month__weekday .calendar-month__weekday-more[data-v-e7ff2963]{font-size:var(--qalendar-font-2xs);width:100%;padding-left:4px;color:var(--qalendar-gray-quite-dark);cursor:pointer}.calendar-month__weekday .calendar-month_events[data-v-e7ff2963]{width:100%}.qalendar-is-small .calendar-month__weekday .calendar-month_events[data-v-e7ff2963]{display:flex;flex-flow:row;justify-content:center}.qalendar-is-small .calendar-month__weekday .calendar-month_events .calendar-month__weekday-more[data-v-e7ff2963]{display:none}.calendar-month__weekday.is-today .calendar-month__day-date[data-v-e7ff2963]{background-color:var(--qalendar-theme-color);color:#fff;border-radius:50%;padding:4px 6px}.qalendar-is-small .calendar-month__weekday.is-today .calendar-month__day-date[data-v-e7ff2963]{padding:2px 4px}.space-reserver[data-v-e7ff2963]{height:100%;flex:1;display:flex;flex-flow:column;align-items:center;border-right:var(--qalendar-border-gray-thin);border-bottom:var(--qalendar-border-gray-thin);border-right-color:transparent}@media (prefers-color-scheme: dark){.space-reserver[data-v-e7ff2963]:not(.is-light-mode .space-reserver){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .space-reserver[data-v-e7ff2963]{border-color:var(--qalendar-dark-mode-line-color)}.space-reserver+.calendar-month__weekday[data-v-e7ff2963]:not(.trailing-or-leading){border-left:var(--qalendar-border-gray-thin)}.calendar-month__day-name[data-v-09c7c5db]{display:block;font-size:12px;font-weight:500;color:var(--qalendar-gray-quite-dark);margin-bottom:var(--qalendar-spacing-half)}.agenda__event[data-v-698b431e]{background-color:var(--691f2791);color:var(--fa1649c2);display:flex;flex-flow:column;justify-content:flex-start;border-radius:4px;font-size:var(--qalendar-font-2xs);margin-bottom:4px;padding:var(--qalendar-spacing);cursor:pointer;user-select:none}.agenda__wrapper[data-v-b60cbce5]{display:flex;flex-flow:row;padding:10px 5px 0}.agenda__wrapper .agenda__header[data-v-b60cbce5]{padding-right:10px}.agenda__wrapper .agenda__header .agenda__header-day-name[data-v-b60cbce5]{text-align:center;color:var(--qalendar-theme-color);font-size:var(--qalendar-font-xs);font-weight:700}.agenda__wrapper .agenda__header .agenda__header-date[data-v-b60cbce5]{height:fit-content;display:flex;justify-content:center;align-items:center;padding:5px;border-radius:4px;background-color:var(--qalendar-theme-color);color:#fff;font-weight:600;font-size:var(--qalendar-font-m)}.agenda__wrapper .agenda__content[data-v-b60cbce5]{display:flex;flex-flow:column;width:100%;height:auto}.agenda__wrapper .agenda__content .is-empty[data-v-b60cbce5]{min-height:70px;display:flex;justify-content:center;align-items:center}.calendar-month[data-v-206c177e]{position:relative;display:flex;flex-flow:column;width:100%;height:100%;overflow-y:auto}.qalendar-is-small .calendar-month[data-v-206c177e]{height:initial}.calendar-month .calendar-month__week-day-names[data-v-206c177e]{display:flex;justify-content:space-between}.calendar-month .calendar-month__week-day-names .calendar-month__week-day-name[data-v-206c177e]{flex:1;text-align:center}.calendar-month .calendar-month__weeks[data-v-206c177e]{height:100%;flex-grow:1;display:flex;flex-flow:column;justify-content:space-between}.calendar-month .calendar-month__week[data-v-206c177e]{display:flex;flex:1}.calendar-month .calendar-month__week[data-v-206c177e]:first-child{border-top:var(--qalendar-border-gray-thin)}@media (prefers-color-scheme: dark){.calendar-month .calendar-month__week[data-v-206c177e]:first-child:not(.is-light-mode .calendar-month .calendar-month__week:first-child){border-color:var(--qalendar-dark-mode-line-color)}}[style*=\\\"color-scheme: dark\\\"] .calendar-month .calendar-month__week[data-v-206c177e]:first-child{border-color:var(--qalendar-dark-mode-line-color)}.calendar-month .calendar-month__day_events[data-v-206c177e]{height:100%;display:none}.qalendar-is-small .calendar-month .calendar-month__day_events[data-v-206c177e]{display:block}.ps{overflow:hidden!important;overflow-anchor:none;-ms-overflow-style:none;touch-action:auto;-ms-touch-action:auto}.ps__rail-x{display:none;opacity:0;transition:background-color .2s linear,opacity .2s linear;-webkit-transition:background-color .2s linear,opacity .2s linear;height:15px;bottom:0px;position:absolute}.ps__rail-y{display:none;opacity:0;transition:background-color .2s linear,opacity .2s linear;-webkit-transition:background-color .2s linear,opacity .2s linear;width:15px;right:0;position:absolute}.ps--active-x>.ps__rail-x,.ps--active-y>.ps__rail-y{display:block;background-color:transparent}.ps:hover>.ps__rail-x,.ps:hover>.ps__rail-y,.ps--focus>.ps__rail-x,.ps--focus>.ps__rail-y,.ps--scrolling-x>.ps__rail-x,.ps--scrolling-y>.ps__rail-y{opacity:.6}.ps .ps__rail-x:hover,.ps .ps__rail-y:hover,.ps .ps__rail-x:focus,.ps .ps__rail-y:focus,.ps .ps__rail-x.ps--clicking,.ps .ps__rail-y.ps--clicking{background-color:#eee;opacity:.9}.ps__thumb-x{background-color:#aaa;border-radius:6px;transition:background-color .2s linear,height .2s ease-in-out;-webkit-transition:background-color .2s linear,height .2s ease-in-out;height:6px;bottom:2px;position:absolute}.ps__thumb-y{background-color:#aaa;border-radius:6px;transition:background-color .2s linear,width .2s ease-in-out;-webkit-transition:background-color .2s linear,width .2s ease-in-out;width:6px;right:2px;position:absolute}.ps__rail-x:hover>.ps__thumb-x,.ps__rail-x:focus>.ps__thumb-x,.ps__rail-x.ps--clicking .ps__thumb-x{background-color:#999;height:11px}.ps__rail-y:hover>.ps__thumb-y,.ps__rail-y:focus>.ps__thumb-y,.ps__rail-y.ps--clicking .ps__thumb-y{background-color:#999;width:11px}@supports (-ms-overflow-style: none){.ps{overflow:auto!important}}@media screen and (-ms-high-contrast: active),(-ms-high-contrast: none){.ps{overflow:auto!important}}.calendar-root,.date-picker-root{--qalendar-blue: rgb(38 132 255);--qalendar-blue-transparent: rgba(38 132 255 / 90%);--qalendar-gray-quite-dark: rgb(110 110 110);--qalendar-gray: rgb(180 180 180);--qalendar-green: rgb(51 182 121);--qalendar-theme-color: var(--qalendar-blue);--qalendar-light-gray: rgba(240 236 236 / 76%);--qalendar-option-hover: var(--qalendar-light-gray);--qalendar-dark-mode-elevated-surface: #383838;--qalendar-dark-mode-lightly-elevated-surface: #2e2e2e;--qalendar-dark-mode-text-primary: rgba(255 255 255 1);--qalendar-dark-mode-text-secondary: rgba(255 255 255 .7);--qalendar-dark-mode-text-hint: rgba(255 255 255 .5);--qalendar-dark-mode-line-color: var(--qalendar-gray);--qalendar-border-gray-thin: 1px solid rgb(224 224 224);--qalendar-border-dashed-gray-thin: 1px dashed rgb(224 224 224);--qalendar-border-blue-thin: 1px solid var(--qalendar-theme-color);--qalendar-border-radius: 8px;--qalendar-spacing: 10px;--qalendar-spacing-half: 5px;--qalendar-spacing-double: 20px;--qalendar-box-shadow: 0 4px 4px rgba(0 0 0 / 6%), 0 1px 4px rgba(0 0 0 / 18%);--qalendar-text-transition: color .2s ease;--qalendar-week-padding-left: 56px;--qalendar-font-3xs: .625rem;--qalendar-font-2xs: .688rem;--qalendar-font-xs: .75rem;--qalendar-font-s: .875rem;--qalendar-font-m: 1rem;--qalendar-font-l: 1.25rem;--qalendar-font-xl: 1.5rem}@media (prefers-color-scheme: dark){.calendar-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}}[style*=\\\"color-scheme: dark\\\"] .calendar-root,[style*=\\\"color-scheme: dark\\\"] .date-picker-root{--qalendar-gray-quite-dark: rgb(221, 221, 221);--qalendar-option-hover: #575757}@media (prefers-color-scheme: dark){.calendar-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root),.date-picker-root:not(.is-light-mode .calendar-root,.is-light-mode .date-picker-root){--qalendar-gray-quite-dark: rgb(221, 221, 221)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root,[style*=\\\"color-scheme: dark\\\"] .date-picker-root{--qalendar-gray-quite-dark: rgb(221, 221, 221)}@media (min-width: 62rem){.calendar-root{--qalendar-spacing: 20px;--qalendar-spacing-half: 10px;--qalendar-spacing-double: 40px}}.calendar-root-wrapper{width:100%;max-width:100vw;height:100%;display:flex}.calendar-root-wrapper .calendar-root{flex:1;border:var(--qalendar-border-gray-thin);border-radius:var(--qalendar-border-radius);font-family:var(--51d82805);position:relative;width:100%;margin:0 auto;display:flex;flex-flow:column}@media (prefers-color-scheme: dark){.calendar-root-wrapper .calendar-root:not(.is-light-mode .calendar-root-wrapper .calendar-root){background:#121212;color:#fff;border-color:transparent}}[style*=\\\"color-scheme: dark\\\"] .calendar-root-wrapper .calendar-root{background:#121212;color:#fff;border-color:transparent}.calendar-root-wrapper .calendar-root .top-bar-loader{position:absolute;top:1px;left:2px;width:calc(100% - 4px);height:3px;background:rgba(241,241,241,.2);border-radius:16px;overflow:hidden}.calendar-root-wrapper .calendar-root .top-bar-loader:before{content:\\\"\\\";height:4px;width:calc(100% - 4px);position:absolute;top:1px;left:2px;background:rgb(38,132,255);background:linear-gradient(90deg,rgb(38,132,255) 0%,rgba(38,132,255,.5088410364) 48%,rgb(38,132,255) 100%);animation:load 1.8s infinite;border-radius:16px}@media (prefers-color-scheme: dark){.calendar-root-wrapper .calendar-root .top-bar-loader:before:not(.is-light-mode .calendar-root-wrapper .calendar-root .top-bar-loader:before){background:rgb(229,224,245)}}[style*=\\\"color-scheme: dark\\\"] .calendar-root-wrapper .calendar-root .top-bar-loader:before{background:rgb(229,224,245)}@keyframes load{0%{width:0;left:-100%}50%{left:0;width:100%}to{width:0;left:100%}}.calendar-root-wrapper .calendar-root .loading-enter-active,.calendar-root-wrapper .calendar-root .loading-leave-active{transition:background .5s ease}.calendar-root-wrapper .calendar-root .loading-leave-to,.calendar-root-wrapper .calendar-root .loading-enter-from{background-color:#fff0}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/qalendar/dist/style.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ \"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_qalendar_dist_style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! -!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../../../node_modules/qalendar/dist/style.css */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/qalendar/dist/style.css\");\n// Imports\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_qalendar_dist_style_css__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.container.files[data-v-05f52410] {\\n    max-height: 500px;\\n    overflow: scroll;\\n}\\n.carousel__item[data-v-05f52410] {\\n    width: 40%;\\n}\\n.carousel__item img[data-v-05f52410] {\\n    width: 100%;\\n    height: auto;\\n    transition: transform 0.3s;\\n    border-radius: 8px;\\n}\\n.carousel__viewport[data-v-05f52410] {\\n    perspective: 1000px;\\n}\\n.carousel__slide[data-v-05f52410] {\\n    opacity: 1;\\n    transform: rotateY(0) scale(1);\\n    transition: transform 0.5s, opacity 0.5s;\\n}\\n.carousel__slide--prev[data-v-05f52410],\\n.carousel__slide--next[data-v-05f52410] {\\n    opacity: 0.9;\\n}\\n.carousel__slide--active[data-v-05f52410] {\\n    opacity: 1;\\n    transform: scale(1.1);\\n}\\n\\n/* Optional: Add a hover effect */\\n.carousel__item:hover img[data-v-05f52410] {\\n    transform: scale(1.05);\\n    transition: transform 0.3s;\\n}\\n.modal.fade.show[data-v-05f52410] {\\n    -webkit-backdrop-filter: blur(5px);\\n            backdrop-filter: blur(5px);\\n}\\n.full-screen-modal[data-v-05f52410] {\\n    z-index: 9999;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-color: rgba(0, 0, 0, 0.9);\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n.full-screen-image[data-v-05f52410] {\\n    max-width: 100%;\\n    max-height: 100%;\\n}\\n.close-button[data-v-05f52410] {\\n    position: absolute;\\n    top: 20px;\\n    right: 20px;\\n    font-size: 24px;\\n    color: white;\\n    cursor: pointer;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/app/pages/Purchaser-View.vue\"],\"names\":[],\"mappings\":\";AAuwBA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;AAEA;IACI,UAAU;AACd;AACA;IACI,WAAW;IACX,YAAY;IACZ,0BAA0B;IAC1B,kBAAkB;AACtB;AAEA;IACI,mBAAmB;AACvB;AAEA;IACI,UAAU;IACV,8BAA8B;IAC9B,wCAAwC;AAC5C;AAEA;;IAEI,YAAY;AAChB;AAEA;IACI,UAAU;IACV,qBAAqB;AACzB;;AAEA,iCAAiC;AACjC;IACI,sBAAsB;IACtB,0BAA0B;AAC9B;AAEA;IACI,kCAA0B;YAA1B,0BAA0B;AAC9B;AACA;IACI,aAAa;IACb,eAAe;IACf,MAAM;IACN,OAAO;IACP,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,eAAe;IACf,YAAY;IACZ,eAAe;AACnB\",\"sourcesContent\":[\"<template>\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-12\\\">\\n                <!-- Main content -->\\n\\n                <div class=\\\"invoice p-3 mb-3\\\">\\n                    <div style=\\\"\\\">\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                for=\\\"staticEmail\\\"\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                ><b>მყიდველის სახელი:</b></label\\n                            >\\n                            <label class=\\\"col-sm-3 col-form-label\\\">{{\\n                                model.name\\n                            }}</label>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput2\\\"\\n                                >დამატებითი სახელი:</label\\n                            >\\n                            <div class=\\\"col-sm-9\\\">\\n                                <label class=\\\"col-sm-3 col-form-label\\\">{{\\n                                    model.subj_name\\n                                }}</label>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >მყიდველის მისამართი:</label\\n                            >\\n                            <label class=\\\"col-sm-3 col-form-label\\\">{{\\n                                model.subj_address\\n                            }}</label>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >საიდენთიფიკაციო კოდი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <label class=\\\"col-sm-3 col-form-label\\\">{{\\n                                    model.identification_num\\n                                }}</label>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >ტექნიკური მომსახურებისთვის საჭირო დრო:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <label class=\\\"col-sm-3 col-form-label\\\"\\n                                    >{{ model.technical_time }} წთ</label\\n                                >\\n                            </div>\\n                        </div>\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >წმენდითი მომსახურებისთვის საჭირო დრო:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <label class=\\\"col-sm-3 col-form-label\\\"\\n                                    >{{ model.cleaning_time }} წთ</label\\n                                >\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >აღწერა:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.description\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >პირველადი აღწერის თარიღი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.first_review_date\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >კომენტარი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.first_review_description\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >ტექნიკური აღწერის თარიღი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.technical_review_date\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >კომენტარი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p\\n                                    v-html=\\\"model.technical_review_description\\\"\\n                                ></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >საინფორმაციო ბაზის შექმნის თარიღი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.base_creation_date\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-3 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >კომენტარი:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-9\\\">\\n                                <p v-html=\\\"model.base_description\\\"></p>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"form-group row\\\">\\n                            <label\\n                                class=\\\"col-sm-2 col-form-label\\\"\\n                                for=\\\"formGroupExampleInput\\\"\\n                                >გალერეა:</label\\n                            >\\n\\n                            <div class=\\\"col-sm-4\\\">\\n                                <file-pond\\n                                    @activatefile=\\\"onActivateFile\\\"\\n                                    @processfile=\\\"fileProcessed\\\"\\n                                    label-idle=\\\"გალერეა\\\"\\n                                    name=\\\"purchaserGallery\\\"\\n                                    :server=\\\"`/uploadPurchaserGallery/${model.id}`\\\"\\n                                    ref=\\\"pond\\\"\\n                                    :allow-multiple=\\\"true\\\"\\n                                    :files=\\\"galleryImages\\\"\\n                                    :allowRemove=\\\"false\\\"\\n                                    :allowRevert=\\\"false\\\"\\n                                    @init=\\\"handleFilePondInitGallery\\\"\\n                                />\\n                            </div>\\n                            <div class=\\\"col-sm-6\\\">\\n                                <div v-if=\\\"galleryImages.length > 0\\\">\\n                                    <div\\n                                        v-for=\\\"(file, index) in galleryImages\\\"\\n                                        class=\\\"galleryImage\\\"\\n                                        style=\\\"\\n                                            display: inline-block;\\n                                            padding: 3px;\\n                                        \\\"\\n                                        :key=\\\"index\\\"\\n                                    >\\n                                        <img\\n                                            @click=\\\"onSlideClick(file.source)\\\"\\n                                            :src=\\\"file.source\\\"\\n                                            alt=\\\"uploaded preview\\\"\\n                                            style=\\\"\\n                                                max-width: 200px;\\n                                                max-height: 200px;\\n                                                margin-right: 10px;\\n                                            \\\"\\n                                        />\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div v-if=\\\"isFullScreenOpen\\\" class=\\\"full-screen-modal\\\">\\n                            <span class=\\\"close-button\\\" @click=\\\"closeFullScreen\\\"\\n                                >&times;</span\\n                            >\\n                            <img\\n                                class=\\\"full-screen-image\\\"\\n                                :src=\\\"fullScreenImageSrc\\\"\\n                            />\\n                        </div>\\n\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col\\\">\\n                                <!-- Scrollable object with items from events -->\\n                                <div\\n                                    class=\\\"col-sm\\\"\\n                                    style=\\\"overflow-y: auto; max-height: 300px\\\"\\n                                >\\n                                    <ul class=\\\"list-group\\\">\\n                                        <li\\n                                            v-for=\\\"event in events\\\"\\n                                            :key=\\\"event.id\\\"\\n                                            class=\\\"list-group-item\\\"\\n                                            @click=\\\"handleEventClick(event)\\\"\\n                                        >\\n                                            {{\\n                                                event.title +\\n                                                \\\" \\\" +\\n                                                event.time.start\\n                                            }}\\n                                        </li>\\n                                    </ul>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"col-md-9 mt-1\\\">\\n                                <!-- Qalendar and calendar-event-modal components -->\\n                                <Qalendar\\n                                    :events=\\\"events\\\"\\n                                    :selected-date=\\\"\\n                                        selectedQalendarDate || new Date()\\n                                    \\\"\\n                                    :config=\\\"config\\\"\\n                                    :day-min-height=\\\"250\\\"\\n                                    @date-was-clicked=\\\"handleDateClicked\\\"\\n                                    @edit-event=\\\"handleEditEvent\\\"\\n                                    @delete-event=\\\"handleDeleteEvent\\\"\\n                                    ref=\\\"calendar\\\"\\n                                />\\n                                <calendar-event-modal\\n                                    @eventStored=\\\"fetchEvents\\\"\\n                                    :is-visible=\\\"this.isModalVisible\\\"\\n                                    :selected-date=\\\"this.selectedDate\\\"\\n                                    :purchaser-id=\\\"this.model.id\\\"\\n                                    :on-edit=\\\"this.isModalOnEdit\\\"\\n                                    :event-id=\\\"this.eventId\\\"\\n                                    @close-modal=\\\"closeModal\\\"\\n                                    @add-event=\\\"addEvent\\\"\\n                                />\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"mt-5 row\\\">\\n                            <div\\n                                class=\\\"col-md-3\\\"\\n                                style=\\\"\\n                                    background-color: #f1f0ef;\\n                                    text-align: center;\\n                                    padding: 1rem;\\n                                    border-radius: 10px;\\n                                \\\"\\n                            >\\n                                <!-- Section Title -->\\n                                <h6 class=\\\"mb-3\\\">დეფექტური აქტები</h6>\\n\\n                                <!-- Scrollable List -->\\n                                <div\\n                                    style=\\\"overflow-y: auto; max-height: 300px\\\"\\n                                >\\n                                    <ul class=\\\"list-group\\\">\\n                                        <li\\n                                            v-for=\\\"report in additional.reports\\\"\\n                                            :key=\\\"report.id\\\"\\n                                            class=\\\"list-group-item list-group-item-action\\\"\\n                                        >\\n                                            <a\\n                                                :href=\\\"`/reports/${report.id}?open=1`\\\"\\n                                                class=\\\"text-decoration-none text-dark d-block\\\"\\n                                            >\\n                                                {{\\n                                                    report.title +\\n                                                    \\\" \\\" +\\n                                                    report.uuid\\n                                                }}\\n                                            </a>\\n                                        </li>\\n                                    </ul>\\n                                </div>\\n                            </div>\\n\\n                            <div\\n                                v-for=\\\"subject in subjects\\\"\\n                                :key=\\\"subject.id\\\"\\n                                class=\\\"col-md-3\\\"\\n                            >\\n                                <file-pond\\n                                    @activatefile=\\\"onActivateFile\\\"\\n                                    @processfile=\\\"fileProcessed\\\"\\n                                    :name=\\\"subject.name + 'Files'\\\"\\n                                    :ref=\\\"subject.ref\\\"\\n                                    :label-idle=\\\"subject.geo_name\\\"\\n                                    :server=\\\"`/purchaser/${this.model.id}/files`\\\"\\n                                    :allow-multiple=\\\"true\\\"\\n                                    :allowRemove=\\\"false\\\"\\n                                    :allowRevert=\\\"false\\\"\\n                                    :files=\\\"subject.files\\\"\\n                                    @init=\\\"handleFilePondInit(subject.ref)\\\"\\n                                />\\n                            </div>\\n                            <file-actions-modal\\n                                :is-visible=\\\"isFileActionsModalVisible\\\"\\n                                :file=\\\"activatedFile\\\"\\n                                @fileDeleted=\\\"fetchAfterDelete\\\"\\n                                @close=\\\"closeModal\\\"\\n                            ></file-actions-modal>\\n                        </div>\\n\\n                        <!-- Folder Structure -->\\n                        <div\\n                            style=\\\"width: 35%\\\"\\n                            class=\\\"container files mt-5 mx-auto\\\"\\n                        >\\n                            <h4>დამატებითი ფაილები:</h4>\\n                            <hr />\\n                            <div\\n                                v-for=\\\"(locations, date) in folderStructure\\\"\\n                                :key=\\\"date\\\"\\n                                class=\\\"mb-4\\\"\\n                            >\\n                                <!-- Date toggle -->\\n                                <h3\\n                                    @click=\\\"toggleLocations(date)\\\"\\n                                    class=\\\"btn btn-primary w-100 text-left p-3 rounded-pill d-flex align-items-center justify-content-between\\\"\\n                                    :aria-expanded=\\\"\\n                                        isDateSelected(date).toString()\\n                                    \\\"\\n                                    :aria-controls=\\\"'locations-' + date\\\"\\n                                >\\n                                    <i class=\\\"fas fa-calendar-day mr-2\\\"></i\\n                                    >{{ date }}\\n                                    <i\\n                                        v-if=\\\"isDateSelected(date)\\\"\\n                                        class=\\\"fas fa-chevron-up\\\"\\n                                    ></i>\\n                                    <i v-else class=\\\"fas fa-chevron-down\\\"></i>\\n                                </h3>\\n\\n                                <div\\n                                    v-show=\\\"isDateSelected(date)\\\"\\n                                    :id=\\\"'locations-' + date\\\"\\n                                    class=\\\"ml-4 mt-2\\\"\\n                                >\\n                                    <!-- Loop through locations -->\\n                                    <div\\n                                        v-for=\\\"(folders, location) in locations\\\"\\n                                        :key=\\\"location\\\"\\n                                        class=\\\"mb-3\\\"\\n                                    >\\n                                        <button\\n                                            @click=\\\"toggleFiles(date, location)\\\"\\n                                            class=\\\"btn btn-outline-primary w-100 text-left d-flex align-items-center p-3 rounded-pill\\\"\\n                                        >\\n                                            <i class=\\\"fas fa-folder mr-2\\\"></i\\n                                            >{{ location }}\\n                                            <i\\n                                                v-if=\\\"\\n                                                    isLocationSelected(\\n                                                        date,\\n                                                        location\\n                                                    )\\n                                                \\\"\\n                                                class=\\\"fas fa-chevron-up ml-auto\\\"\\n                                            ></i>\\n                                            <i\\n                                                v-else\\n                                                class=\\\"fas fa-chevron-down ml-auto\\\"\\n                                            ></i>\\n                                        </button>\\n\\n                                        <div\\n                                            v-show=\\\"\\n                                                isLocationSelected(\\n                                                    date,\\n                                                    location\\n                                                )\\n                                            \\\"\\n                                            class=\\\"ml-4 mt-2\\\"\\n                                        >\\n                                            <!-- Loop through folders under location -->\\n                                            <div\\n                                                v-for=\\\"(\\n                                                    files, folder\\n                                                ) in folders\\\"\\n                                                :key=\\\"folder\\\"\\n                                                class=\\\"mb-2\\\"\\n                                            >\\n                                                <h5 class=\\\"mt-3 mb-2\\\">\\n                                                    <i\\n                                                        class=\\\"fas fa-folder-open mr-1\\\"\\n                                                    ></i>\\n                                                    {{ folder }}\\n                                                </h5>\\n\\n                                                <!-- Loop through files -->\\n                                                <div\\n                                                    v-for=\\\"file in files\\\"\\n                                                    :key=\\\"file.file_name\\\"\\n                                                    class=\\\"mb-2 d-flex align-items-center\\\"\\n                                                >\\n                                                    <button\\n                                                        @click=\\\"openImage(file)\\\"\\n                                                        class=\\\"btn btn-link text-left flex-grow-1 d-flex align-items-center\\\"\\n                                                    >\\n                                                        <i\\n                                                            class=\\\"fas fa-image mr-2\\\"\\n                                                        ></i>\\n                                                        {{ file.file_name }}\\n                                                    </button>\\n                                                    <button\\n                                                        @click=\\\"\\n                                                            deleteFile(file)\\n                                                        \\\"\\n                                                        class=\\\"btn btn-danger ml-2\\\"\\n                                                    >\\n                                                        წაშლა\\n                                                    </button>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <!-- End Folder Structure -->\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</template>\\n\\n<script>\\nimport draggable from \\\"../vendors/vuedraggable/src/vuedraggable\\\";\\nimport useVuelidate from \\\"@vuelidate/core\\\";\\nimport FileUpload from \\\"vue-upload-component\\\";\\nimport \\\"vue3-carousel/dist/carousel.css\\\";\\nimport { Carousel, Slide, Pagination, Navigation } from \\\"vue3-carousel\\\";\\nimport vueFilePond, { setOptions } from \\\"vue-filepond\\\";\\nimport { Qalendar } from \\\"qalendar\\\";\\nimport CalendarEventModal from \\\"../components/CalendarEventModal.vue\\\";\\nimport FileActionsModal from \\\"../components/FileActionsModal.vue\\\";\\n// Import FilePond styles\\nimport \\\"filepond/dist/filepond.min.css\\\";\\nimport \\\"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\\\";\\nimport FilePondPluginImagePreview from \\\"filepond-plugin-image-preview\\\";\\nimport { event } from \\\"jquery\\\";\\n\\nconst FilePond = vueFilePond(FilePondPluginImagePreview);\\n\\nexport default {\\n    props: [\\\"user\\\", \\\"model\\\", \\\"setting\\\", \\\"additional\\\"],\\n\\n    components: {\\n        FileUpload,\\n        draggable,\\n        FilePond,\\n        Carousel,\\n        Slide,\\n        Pagination,\\n        Navigation,\\n        Qalendar,\\n        CalendarEventModal,\\n        FileActionsModal,\\n    },\\n    setup(props, context) {\\n        return {\\n            v$: useVuelidate(),\\n        };\\n    },\\n    created() {\\n        this.fetchPurchaserFiles();\\n        this.fetchGalleryImages();\\n        this.m = this.attributeInit;\\n    },\\n    mounted() {\\n        this.fetchEvents();\\n        this.fetchFolderStructure();\\n        console.log(this.additional.evaluations);\\n        this.v$.model.$touch();\\n    },\\n    data() {\\n        return {\\n            selectedQalendarDate: null,\\n            isModalVisible: false,\\n            activatedFile: null,\\n            isFileActionsModalVisible: false,\\n            isModalOnEdit: false,\\n            eventId: 0,\\n            selectedDate: \\\"\\\",\\n            events: [],\\n            purchaserFiles: [],\\n            galleryImages: [],\\n            config: {\\n                defaultMode: \\\"month\\\",\\n                disableModes: [\\\"week\\\", \\\"day\\\"],\\n            },\\n            subjects: [],\\n            selector: \\\"\\\",\\n            step: false,\\n            keys: [],\\n            isFullScreenOpen: false,\\n            fullScreenImageSrc: \\\"\\\",\\n            selectBuilder: [],\\n            // Folder Structure\\n            folderStructure: {},\\n            selectedDate: null,\\n            selectedLocation: null,\\n            selectedImage: null,\\n        };\\n    },\\n    watch: {},\\n    validations() {\\n        return {\\n            model: {},\\n        };\\n    },\\n    computed: {\\n        attributeInit() {\\n            return this.model;\\n        },\\n    },\\n    methods: {\\n        handleEventClick(event) {\\n            console.log(new Date(2024, 0, 8));\\n            console.log(\\n                \\\"Event: \\\" + event.title + \\\"\\\\nTime: \\\" + event.time.start\\n            );\\n\\n            // Convert event start time to a Date object\\n            const eventDate = new Date(event.time.start);\\n            this.selectedQalendarDate = new Date(2024, 0, 8); // Set selected date\\n            console.log(this.selectedQalendarDate);\\n        },\\n\\n        handleFilePondInit(pond) {},\\n        handleFilePondInitGallery(pond) {},\\n\\n        async fetchFolderStructure() {\\n            try {\\n                const response = await fetch(\\\"/api/folders/\\\" + this.m.id);\\n                const data = await response.json();\\n                this.folderStructure = data;\\n            } catch (error) {\\n                console.error(\\\"Error fetching folder structure:\\\", error);\\n            }\\n        },\\n\\n        toggleLocations(date) {\\n            this.selectedDate = this.selectedDate === date ? null : date;\\n            this.selectedLocation = null;\\n        },\\n\\n        isDateSelected(date) {\\n            return this.selectedDate === date;\\n        },\\n\\n        toggleFiles(location) {\\n            this.selectedLocation =\\n                this.selectedLocation === location ? null : location;\\n        },\\n\\n        isLocationSelected(location) {\\n            return this.selectedLocation === location;\\n        },\\n\\n        openImage(file) {\\n            window.open(file.file_url, \\\"_blank\\\");\\n        },\\n\\n        initializeSubjects() {\\n            this.subjects = [\\n                {\\n                    id: 1,\\n                    name: \\\"Accounting\\\",\\n                    geo_name: \\\"აღრიცხვის ფაილები\\\",\\n                    ref: \\\"accountingPond\\\",\\n                    files: this.purchaserFiles\\n                        ? this.purchaserFiles.AccountingFiles\\n                        : [],\\n                },\\n                {\\n                    id: 2,\\n                    name: \\\"Performance Acts\\\",\\n                    geo_name: \\\"შესრულების აქტები\\\",\\n                    ref: \\\"performanceActsPond\\\",\\n                    files: this.purchaserFiles\\n                        ? this.purchaserFiles.performanceActsFiles\\n                        : [],\\n                },\\n                {\\n                    id: 3,\\n                    name: \\\"Technical Documentation\\\",\\n                    geo_name: \\\"ტექნიკური დოკუმენტაცია\\\",\\n                    ref: \\\"technicalDocumentationPond\\\",\\n                    files: this.purchaserFiles\\n                        ? this.purchaserFiles.technicalDocumentationFiles\\n                        : [],\\n                },\\n                // {\\n                //     id: 4,\\n                //     name: \\\"Additional Information\\\",\\n                //     geo_name: \\\"დამატებითი ინფორმაცია/ფაილები\\\",\\n                //     ref: \\\"additionalInformationPond\\\",\\n                //     files: this.purchaserFiles\\n                //         ? this.purchaserFiles.additionalInformationFiles\\n                //         : [],\\n                // },\\n            ];\\n        },\\n        fetchAfterDelete() {\\n            this.fetchGalleryImages();\\n            this.fetchPurchaserFiles();\\n        },\\n        fetchPurchaserFiles() {\\n            axios\\n                .get(`/purchaser/${this.model.id}/files`)\\n                .then((response) => {\\n                    this.purchaserFiles = response.data;\\n                    this.initializeSubjects();\\n                })\\n                .catch((error) => {\\n                    console.error(\\\"Error fetching purchaser files\\\", error);\\n                });\\n        },\\n\\n        fetchGalleryImages() {\\n            axios\\n                .get(`/purchaserGallery/${this.model.id}`)\\n                .then((response) => {\\n                    this.galleryImages = response.data;\\n                })\\n                .catch((error) => {\\n                    console.error(\\\"Error fetching purchaser files\\\", error);\\n                });\\n        },\\n\\n        onActivateFile(file) {\\n            this.activatedFile = file;\\n            this.isFileActionsModalVisible = true;\\n            this.fetchPurchaserFiles();\\n        },\\n\\n        closeFullScreen() {\\n            this.isFullScreenOpen = false;\\n            this.fullScreenImageSrc = \\\"\\\";\\n        },\\n        onSlideClick(imageSrc) {\\n            this.isFullScreenOpen = true;\\n            this.fullScreenImageSrc = imageSrc;\\n        },\\n        fileProcessed(item, file) {\\n            // this.fetchPurchaserFiles();\\n            // this.fetchGalleryImages();\\n        },\\n        handleDateClicked(date) {\\n            this.isModalOnEdit = false;\\n            this.isModalVisible = true;\\n            this.eventId = 0;\\n            this.selectedDate = date;\\n        },\\n        closeModal() {\\n            this.isModalVisible = false;\\n            this.isFileActionsModalVisible = false;\\n        },\\n        handleEditEvent(event_id) {\\n            this.eventId = event_id;\\n            this.isModalVisible = true;\\n            this.isModalOnEdit = true;\\n        },\\n        async deleteFile(file) {\\n            try {\\n                const userConfirmed = confirm(\\n                    `დარწმუნებული ხართ რომ გინდათ ფაილის წაშლა: ${file.file_name}?`\\n                );\\n                if (!userConfirmed) {\\n                    return;\\n                }\\n\\n                const response = await fetch(`/api/delete-file`, {\\n                    method: \\\"POST\\\",\\n                    headers: {\\n                        \\\"Content-Type\\\": \\\"application/json\\\",\\n                    },\\n                    body: JSON.stringify({ fileName: file.file_name }),\\n                });\\n                if (response.ok) {\\n                    this.fetchFolderStructure();\\n                    alert(`ფაილი ${file.file_name} წარმატებით წაიშალა.`);\\n                } else {\\n                    console.error(\\\"Failed to delete file.\\\");\\n                }\\n            } catch (error) {\\n                console.error(\\\"Error deleting file:\\\", error);\\n            }\\n        },\\n\\n        handleDeleteEvent(event_id) {\\n            const isConfirmed = window.confirm(\\n                \\\"Are you sure you want to delete this event?\\\"\\n            );\\n\\n            if (isConfirmed) {\\n                axios\\n                    .delete(`/calendar/events/${event_id}`)\\n                    .then((response) => {\\n                        console.log(\\n                            \\\"Event deleted successfully:\\\",\\n                            response.data\\n                        );\\n\\n                        this.fetchEvents();\\n                    })\\n                    .catch((error) => {\\n                        console.error(\\\"Error deleting event:\\\", error);\\n                    });\\n            } else {\\n                console.log(\\\"Deletion canceled\\\");\\n            }\\n        },\\n        addEvent(event) {\\n            this.fetchEvents();\\n            this.isModalVisible = false;\\n        },\\n        fetchEvents() {\\n            axios\\n                .get(`/calendar/events/purchaser/${this.model.id}`)\\n                .then((response) => {\\n                    this.events = response.data;\\n                })\\n                .catch((error) => {\\n                    console.error(\\\"Error fetching events:\\\", error);\\n                });\\n        },\\n    },\\n};\\n</script>\\n<style scoped>\\n@import \\\"../../../../node_modules/qalendar/dist/style.css\\\";\\n\\n.container.files {\\n    max-height: 500px;\\n    overflow: scroll;\\n}\\n\\n.carousel__item {\\n    width: 40%;\\n}\\n.carousel__item img {\\n    width: 100%;\\n    height: auto;\\n    transition: transform 0.3s;\\n    border-radius: 8px;\\n}\\n\\n.carousel__viewport {\\n    perspective: 1000px;\\n}\\n\\n.carousel__slide {\\n    opacity: 1;\\n    transform: rotateY(0) scale(1);\\n    transition: transform 0.5s, opacity 0.5s;\\n}\\n\\n.carousel__slide--prev,\\n.carousel__slide--next {\\n    opacity: 0.9;\\n}\\n\\n.carousel__slide--active {\\n    opacity: 1;\\n    transform: scale(1.1);\\n}\\n\\n/* Optional: Add a hover effect */\\n.carousel__item:hover img {\\n    transform: scale(1.05);\\n    transition: transform 0.3s;\\n}\\n\\n.modal.fade.show {\\n    backdrop-filter: blur(5px);\\n}\\n.full-screen-modal {\\n    z-index: 9999;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background-color: rgba(0, 0, 0, 0.9);\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.full-screen-image {\\n    max-width: 100%;\\n    max-height: 100%;\\n}\\n\\n.close-button {\\n    position: absolute;\\n    top: 20px;\\n    right: 20px;\\n    font-size: 24px;\\n    color: white;\\n    cursor: pointer;\\n}\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css\n");

/***/ }),

/***/ "./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js ***!
  \******************************************************************************************/
/***/ (function(module) {

eval("/*!\n * FilePondPluginImagePreview 4.6.12\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n   true\n    ? (module.exports = factory())\n    : 0;\n})(this, function() {\n  'use strict';\n\n  // test if file is of type image and can be viewed in canvas\n  var isPreviewableImage = function isPreviewableImage(file) {\n    return /^image/.test(file.type);\n  };\n\n  function _typeof(obj) {\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function(obj) {\n        return obj &&\n          typeof Symbol === 'function' &&\n          obj.constructor === Symbol &&\n          obj !== Symbol.prototype\n          ? 'symbol'\n          : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  var REACT_ELEMENT_TYPE;\n\n  function _jsx(type, props, key, children) {\n    if (!REACT_ELEMENT_TYPE) {\n      REACT_ELEMENT_TYPE =\n        (typeof Symbol === 'function' &&\n          Symbol.for &&\n          Symbol.for('react.element')) ||\n        0xeac7;\n    }\n\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {\n        children: void 0\n      };\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = new Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  }\n\n  function _asyncIterator(iterable) {\n    var method;\n\n    if (typeof Symbol === 'function') {\n      if (Symbol.asyncIterator) {\n        method = iterable[Symbol.asyncIterator];\n        if (method != null) return method.call(iterable);\n      }\n\n      if (Symbol.iterator) {\n        method = iterable[Symbol.iterator];\n        if (method != null) return method.call(iterable);\n      }\n    }\n\n    throw new TypeError('Object is not async iterable');\n  }\n\n  function _AwaitValue(value) {\n    this.wrapped = value;\n  }\n\n  function _AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function(resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n        var wrappedAwait = value instanceof _AwaitValue;\n        Promise.resolve(wrappedAwait ? value.wrapped : value).then(\n          function(arg) {\n            if (wrappedAwait) {\n              resume('next', arg);\n              return;\n            }\n\n            settle(result.done ? 'return' : 'normal', arg);\n          },\n          function(err) {\n            resume('throw', err);\n          }\n        );\n      } catch (err) {\n        settle('throw', err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case 'return':\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case 'throw':\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== 'function') {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === 'function' && Symbol.asyncIterator) {\n    _AsyncGenerator.prototype[Symbol.asyncIterator] = function() {\n      return this;\n    };\n  }\n\n  _AsyncGenerator.prototype.next = function(arg) {\n    return this._invoke('next', arg);\n  };\n\n  _AsyncGenerator.prototype.throw = function(arg) {\n    return this._invoke('throw', arg);\n  };\n\n  _AsyncGenerator.prototype.return = function(arg) {\n    return this._invoke('return', arg);\n  };\n\n  function _wrapAsyncGenerator(fn) {\n    return function() {\n      return new _AsyncGenerator(fn.apply(this, arguments));\n    };\n  }\n\n  function _awaitAsyncGenerator(value) {\n    return new _AwaitValue(value);\n  }\n\n  function _asyncGeneratorDelegate(inner, awaitWrap) {\n    var iter = {},\n      waiting = false;\n\n    function pump(key, value) {\n      waiting = true;\n      value = new Promise(function(resolve) {\n        resolve(inner[key](value));\n      });\n      return {\n        done: false,\n        value: awaitWrap(value)\n      };\n    }\n\n    if (typeof Symbol === 'function' && Symbol.iterator) {\n      iter[Symbol.iterator] = function() {\n        return this;\n      };\n    }\n\n    iter.next = function(value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump('next', value);\n    };\n\n    if (typeof inner.throw === 'function') {\n      iter.throw = function(value) {\n        if (waiting) {\n          waiting = false;\n          throw value;\n        }\n\n        return pump('throw', value);\n      };\n    }\n\n    if (typeof inner.return === 'function') {\n      iter.return = function(value) {\n        return pump('return', value);\n      };\n    }\n\n    return iter;\n  }\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function() {\n      var self = this,\n        args = arguments;\n      return new Promise(function(resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(\n            gen,\n            resolve,\n            reject,\n            _next,\n            _throw,\n            'next',\n            value\n          );\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineEnumerableProperties(obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if ('value' in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var objectSymbols = Object.getOwnPropertySymbols(descs);\n\n      for (var i = 0; i < objectSymbols.length; i++) {\n        var sym = objectSymbols[i];\n        var desc = descs[sym];\n        desc.configurable = desc.enumerable = true;\n        if ('value' in desc) desc.writable = true;\n        Object.defineProperty(obj, sym, desc);\n      }\n    }\n\n    return obj;\n  }\n\n  function _defaults(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n\n    return obj;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _extends() {\n    _extends =\n      Object.assign ||\n      function(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(\n          Object.getOwnPropertySymbols(source).filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n          })\n        );\n      }\n\n      ownKeys.forEach(function(key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf\n      ? Object.getPrototypeOf\n      : function _getPrototypeOf(o) {\n          return o.__proto__ || Object.getPrototypeOf(o);\n        };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf =\n      Object.setPrototypeOf ||\n      function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n      };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === 'function') return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf('[native code]') !== -1;\n  }\n\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === 'function' ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !_isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== 'function') {\n        throw new TypeError(\n          'Super expression must either be null or a function'\n        );\n      }\n\n      if (typeof _cache !== 'undefined') {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return _setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  function _instanceof(left, right) {\n    if (\n      right != null &&\n      typeof Symbol !== 'undefined' &&\n      right[Symbol.hasInstance]\n    ) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule\n      ? obj\n      : {\n          default: obj\n        };\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc =\n              Object.defineProperty && Object.getOwnPropertyDescriptor\n                ? Object.getOwnPropertyDescriptor(obj, key)\n                : {};\n\n            if (desc.get || desc.set) {\n              Object.defineProperty(newObj, key, desc);\n            } else {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n      }\n\n      newObj.default = obj;\n      return newObj;\n    }\n  }\n\n  function _newArrowCheck(innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError('Cannot instantiate an arrow function');\n    }\n  }\n\n  function _objectDestructuringEmpty(obj) {\n    if (obj == null) throw new TypeError('Cannot destructure undefined');\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\n        \"this hasn't been initialised - super() hasn't been called\"\n      );\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === 'object' || typeof call === 'function')) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== 'undefined' && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== 'undefined' && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = _superPropBase(target, property);\n\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            return false;\n          }\n        }\n\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n        if (desc) {\n          if (!desc.writable) {\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          _defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  function _set(target, property, value, receiver, isStrict) {\n    var s = set(target, property, value, receiver || target);\n\n    if (!s && isStrict) {\n      throw new Error('failed to set property');\n    }\n\n    return value;\n  }\n\n  function _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n      raw = strings.slice(0);\n    }\n\n    return Object.freeze(\n      Object.defineProperties(strings, {\n        raw: {\n          value: Object.freeze(raw)\n        }\n      })\n    );\n  }\n\n  function _taggedTemplateLiteralLoose(strings, raw) {\n    if (!raw) {\n      raw = strings.slice(0);\n    }\n\n    strings.raw = raw;\n    return strings;\n  }\n\n  function _temporalRef(val, name) {\n    if (val === _temporalUndefined) {\n      throw new ReferenceError(name + ' is not defined - temporal dead zone');\n    } else {\n      return val;\n    }\n  }\n\n  function _readOnlyError(name) {\n    throw new Error('\"' + name + '\" is read-only');\n  }\n\n  function _classNameTDZError(name) {\n    throw new Error(\n      'Class \"' + name + '\" cannot be referenced in computed property keys.'\n    );\n  }\n\n  var _temporalUndefined = {};\n\n  function _slicedToArray(arr, i) {\n    return (\n      _arrayWithHoles(arr) ||\n      _iterableToArrayLimit(arr, i) ||\n      _nonIterableRest()\n    );\n  }\n\n  function _slicedToArrayLoose(arr, i) {\n    return (\n      _arrayWithHoles(arr) ||\n      _iterableToArrayLimitLoose(arr, i) ||\n      _nonIterableRest()\n    );\n  }\n\n  function _toArray(arr) {\n    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return (\n      _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()\n    );\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)\n        arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (\n      Symbol.iterator in Object(iter) ||\n      Object.prototype.toString.call(iter) === '[object Arguments]'\n    )\n      return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (\n        var _i = arr[Symbol.iterator](), _s;\n        !(_n = (_s = _i.next()).done);\n        _n = true\n      ) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return'] != null) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _iterableToArrayLimitLoose(arr, i) {\n    var _arr = [];\n\n    for (\n      var _iterator = arr[Symbol.iterator](), _step;\n      !(_step = _iterator.next()).done;\n\n    ) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError('Invalid attempt to spread non-iterable instance');\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  }\n\n  function _skipFirstGeneratorNext(fn) {\n    return function() {\n      var it = fn.apply(this, arguments);\n      it.next();\n      return it;\n    };\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== 'object' || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || 'default');\n      if (typeof res !== 'object') return res;\n      throw new TypeError('@@toPrimitive must return a primitive value.');\n    }\n\n    return (hint === 'string' ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, 'string');\n\n    return typeof key === 'symbol' ? key : String(key);\n  }\n\n  function _initializerWarningHelper(descriptor, context) {\n    throw new Error(\n      'Decorating class property failed. Please ensure that ' +\n        'proposal-class-properties is enabled and set to use loose mode. ' +\n        'To use proposal-class-properties in spec mode with decorators, wait for ' +\n        'the next major version of decorators in stage 2.'\n    );\n  }\n\n  function _initializerDefineProperty(target, property, descriptor, context) {\n    if (!descriptor) return;\n    Object.defineProperty(target, property, {\n      enumerable: descriptor.enumerable,\n      configurable: descriptor.configurable,\n      writable: descriptor.writable,\n      value: descriptor.initializer\n        ? descriptor.initializer.call(context)\n        : void 0\n    });\n  }\n\n  function _applyDecoratedDescriptor(\n    target,\n    property,\n    decorators,\n    descriptor,\n    context\n  ) {\n    var desc = {};\n    Object.keys(descriptor).forEach(function(key) {\n      desc[key] = descriptor[key];\n    });\n    desc.enumerable = !!desc.enumerable;\n    desc.configurable = !!desc.configurable;\n\n    if ('value' in desc || desc.initializer) {\n      desc.writable = true;\n    }\n\n    desc = decorators\n      .slice()\n      .reverse()\n      .reduce(function(desc, decorator) {\n        return decorator(target, property, desc) || desc;\n      }, desc);\n\n    if (context && desc.initializer !== void 0) {\n      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n      desc.initializer = undefined;\n    }\n\n    if (desc.initializer === void 0) {\n      Object.defineProperty(target, property, desc);\n      desc = null;\n    }\n\n    return desc;\n  }\n\n  var id = 0;\n\n  function _classPrivateFieldLooseKey(name) {\n    return '__private_' + id++ + '_' + name;\n  }\n\n  function _classPrivateFieldLooseBase(receiver, privateKey) {\n    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n      throw new TypeError('attempted to use private field on non-instance');\n    }\n\n    return receiver;\n  }\n\n  function _classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n      throw new TypeError('attempted to get private field on non-instance');\n    }\n\n    var descriptor = privateMap.get(receiver);\n\n    if (descriptor.get) {\n      return descriptor.get.call(receiver);\n    }\n\n    return descriptor.value;\n  }\n\n  function _classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n      throw new TypeError('attempted to set private field on non-instance');\n    }\n\n    var descriptor = privateMap.get(receiver);\n\n    if (descriptor.set) {\n      descriptor.set.call(receiver, value);\n    } else {\n      if (!descriptor.writable) {\n        throw new TypeError('attempted to set read only private field');\n      }\n\n      descriptor.value = value;\n    }\n\n    return value;\n  }\n\n  function _classStaticPrivateFieldSpecGet(\n    receiver,\n    classConstructor,\n    descriptor\n  ) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    return descriptor.value;\n  }\n\n  function _classStaticPrivateFieldSpecSet(\n    receiver,\n    classConstructor,\n    descriptor,\n    value\n  ) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    if (!descriptor.writable) {\n      throw new TypeError('attempted to set read only private field');\n    }\n\n    descriptor.value = value;\n    return value;\n  }\n\n  function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    return method;\n  }\n\n  function _classStaticPrivateMethodSet() {\n    throw new TypeError('attempted to set read only static private field');\n  }\n\n  function _decorate(decorators, factory, superClass, mixins) {\n    var api = _getDecoratorsApi();\n\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        api = mixins[i](api);\n      }\n    }\n\n    var r = factory(function initialize(O) {\n      api.initializeInstanceElements(O, decorated.elements);\n    }, superClass);\n    var decorated = api.decorateClass(\n      _coalesceClassElements(r.d.map(_createElementDescriptor)),\n      decorators\n    );\n    api.initializeClassElements(r.F, decorated.elements);\n    return api.runClassFinishers(r.F, decorated.finishers);\n  }\n\n  function _getDecoratorsApi() {\n    _getDecoratorsApi = function() {\n      return api;\n    };\n\n    var api = {\n      elementsDefinitionOrder: [['method'], ['field']],\n      initializeInstanceElements: function(O, elements) {\n        ['method', 'field'].forEach(function(kind) {\n          elements.forEach(function(element) {\n            if (element.kind === kind && element.placement === 'own') {\n              this.defineClassElement(O, element);\n            }\n          }, this);\n        }, this);\n      },\n      initializeClassElements: function(F, elements) {\n        var proto = F.prototype;\n        ['method', 'field'].forEach(function(kind) {\n          elements.forEach(function(element) {\n            var placement = element.placement;\n\n            if (\n              element.kind === kind &&\n              (placement === 'static' || placement === 'prototype')\n            ) {\n              var receiver = placement === 'static' ? F : proto;\n              this.defineClassElement(receiver, element);\n            }\n          }, this);\n        }, this);\n      },\n      defineClassElement: function(receiver, element) {\n        var descriptor = element.descriptor;\n\n        if (element.kind === 'field') {\n          var initializer = element.initializer;\n          descriptor = {\n            enumerable: descriptor.enumerable,\n            writable: descriptor.writable,\n            configurable: descriptor.configurable,\n            value: initializer === void 0 ? void 0 : initializer.call(receiver)\n          };\n        }\n\n        Object.defineProperty(receiver, element.key, descriptor);\n      },\n      decorateClass: function(elements, decorators) {\n        var newElements = [];\n        var finishers = [];\n        var placements = {\n          static: [],\n          prototype: [],\n          own: []\n        };\n        elements.forEach(function(element) {\n          this.addElementPlacement(element, placements);\n        }, this);\n        elements.forEach(function(element) {\n          if (!_hasDecorators(element)) return newElements.push(element);\n          var elementFinishersExtras = this.decorateElement(\n            element,\n            placements\n          );\n          newElements.push(elementFinishersExtras.element);\n          newElements.push.apply(newElements, elementFinishersExtras.extras);\n          finishers.push.apply(finishers, elementFinishersExtras.finishers);\n        }, this);\n\n        if (!decorators) {\n          return {\n            elements: newElements,\n            finishers: finishers\n          };\n        }\n\n        var result = this.decorateConstructor(newElements, decorators);\n        finishers.push.apply(finishers, result.finishers);\n        result.finishers = finishers;\n        return result;\n      },\n      addElementPlacement: function(element, placements, silent) {\n        var keys = placements[element.placement];\n\n        if (!silent && keys.indexOf(element.key) !== -1) {\n          throw new TypeError('Duplicated element (' + element.key + ')');\n        }\n\n        keys.push(element.key);\n      },\n      decorateElement: function(element, placements) {\n        var extras = [];\n        var finishers = [];\n\n        for (\n          var decorators = element.decorators, i = decorators.length - 1;\n          i >= 0;\n          i--\n        ) {\n          var keys = placements[element.placement];\n          keys.splice(keys.indexOf(element.key), 1);\n          var elementObject = this.fromElementDescriptor(element);\n          var elementFinisherExtras = this.toElementFinisherExtras(\n            (0, decorators[i])(elementObject) || elementObject\n          );\n          element = elementFinisherExtras.element;\n          this.addElementPlacement(element, placements);\n\n          if (elementFinisherExtras.finisher) {\n            finishers.push(elementFinisherExtras.finisher);\n          }\n\n          var newExtras = elementFinisherExtras.extras;\n\n          if (newExtras) {\n            for (var j = 0; j < newExtras.length; j++) {\n              this.addElementPlacement(newExtras[j], placements);\n            }\n\n            extras.push.apply(extras, newExtras);\n          }\n        }\n\n        return {\n          element: element,\n          finishers: finishers,\n          extras: extras\n        };\n      },\n      decorateConstructor: function(elements, decorators) {\n        var finishers = [];\n\n        for (var i = decorators.length - 1; i >= 0; i--) {\n          var obj = this.fromClassDescriptor(elements);\n          var elementsAndFinisher = this.toClassDescriptor(\n            (0, decorators[i])(obj) || obj\n          );\n\n          if (elementsAndFinisher.finisher !== undefined) {\n            finishers.push(elementsAndFinisher.finisher);\n          }\n\n          if (elementsAndFinisher.elements !== undefined) {\n            elements = elementsAndFinisher.elements;\n\n            for (var j = 0; j < elements.length - 1; j++) {\n              for (var k = j + 1; k < elements.length; k++) {\n                if (\n                  elements[j].key === elements[k].key &&\n                  elements[j].placement === elements[k].placement\n                ) {\n                  throw new TypeError(\n                    'Duplicated element (' + elements[j].key + ')'\n                  );\n                }\n              }\n            }\n          }\n        }\n\n        return {\n          elements: elements,\n          finishers: finishers\n        };\n      },\n      fromElementDescriptor: function(element) {\n        var obj = {\n          kind: element.kind,\n          key: element.key,\n          placement: element.placement,\n          descriptor: element.descriptor\n        };\n        var desc = {\n          value: 'Descriptor',\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        if (element.kind === 'field') obj.initializer = element.initializer;\n        return obj;\n      },\n      toElementDescriptors: function(elementObjects) {\n        if (elementObjects === undefined) return;\n        return _toArray(elementObjects).map(function(elementObject) {\n          var element = this.toElementDescriptor(elementObject);\n          this.disallowProperty(\n            elementObject,\n            'finisher',\n            'An element descriptor'\n          );\n          this.disallowProperty(\n            elementObject,\n            'extras',\n            'An element descriptor'\n          );\n          return element;\n        }, this);\n      },\n      toElementDescriptor: function(elementObject) {\n        var kind = String(elementObject.kind);\n\n        if (kind !== 'method' && kind !== 'field') {\n          throw new TypeError(\n            'An element descriptor\\'s .kind property must be either \"method\" or' +\n              ' \"field\", but a decorator created an element descriptor with' +\n              ' .kind \"' +\n              kind +\n              '\"'\n          );\n        }\n\n        var key = _toPropertyKey(elementObject.key);\n\n        var placement = String(elementObject.placement);\n\n        if (\n          placement !== 'static' &&\n          placement !== 'prototype' &&\n          placement !== 'own'\n        ) {\n          throw new TypeError(\n            'An element descriptor\\'s .placement property must be one of \"static\",' +\n              ' \"prototype\" or \"own\", but a decorator created an element descriptor' +\n              ' with .placement \"' +\n              placement +\n              '\"'\n          );\n        }\n\n        var descriptor = elementObject.descriptor;\n        this.disallowProperty(\n          elementObject,\n          'elements',\n          'An element descriptor'\n        );\n        var element = {\n          kind: kind,\n          key: key,\n          placement: placement,\n          descriptor: Object.assign({}, descriptor)\n        };\n\n        if (kind !== 'field') {\n          this.disallowProperty(\n            elementObject,\n            'initializer',\n            'A method descriptor'\n          );\n        } else {\n          this.disallowProperty(\n            descriptor,\n            'get',\n            'The property descriptor of a field descriptor'\n          );\n          this.disallowProperty(\n            descriptor,\n            'set',\n            'The property descriptor of a field descriptor'\n          );\n          this.disallowProperty(\n            descriptor,\n            'value',\n            'The property descriptor of a field descriptor'\n          );\n          element.initializer = elementObject.initializer;\n        }\n\n        return element;\n      },\n      toElementFinisherExtras: function(elementObject) {\n        var element = this.toElementDescriptor(elementObject);\n\n        var finisher = _optionalCallableProperty(elementObject, 'finisher');\n\n        var extras = this.toElementDescriptors(elementObject.extras);\n        return {\n          element: element,\n          finisher: finisher,\n          extras: extras\n        };\n      },\n      fromClassDescriptor: function(elements) {\n        var obj = {\n          kind: 'class',\n          elements: elements.map(this.fromElementDescriptor, this)\n        };\n        var desc = {\n          value: 'Descriptor',\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        return obj;\n      },\n      toClassDescriptor: function(obj) {\n        var kind = String(obj.kind);\n\n        if (kind !== 'class') {\n          throw new TypeError(\n            'A class descriptor\\'s .kind property must be \"class\", but a decorator' +\n              ' created a class descriptor with .kind \"' +\n              kind +\n              '\"'\n          );\n        }\n\n        this.disallowProperty(obj, 'key', 'A class descriptor');\n        this.disallowProperty(obj, 'placement', 'A class descriptor');\n        this.disallowProperty(obj, 'descriptor', 'A class descriptor');\n        this.disallowProperty(obj, 'initializer', 'A class descriptor');\n        this.disallowProperty(obj, 'extras', 'A class descriptor');\n\n        var finisher = _optionalCallableProperty(obj, 'finisher');\n\n        var elements = this.toElementDescriptors(obj.elements);\n        return {\n          elements: elements,\n          finisher: finisher\n        };\n      },\n      runClassFinishers: function(constructor, finishers) {\n        for (var i = 0; i < finishers.length; i++) {\n          var newConstructor = (0, finishers[i])(constructor);\n\n          if (newConstructor !== undefined) {\n            if (typeof newConstructor !== 'function') {\n              throw new TypeError('Finishers must return a constructor.');\n            }\n\n            constructor = newConstructor;\n          }\n        }\n\n        return constructor;\n      },\n      disallowProperty: function(obj, name, objectType) {\n        if (obj[name] !== undefined) {\n          throw new TypeError(\n            objectType + \" can't have a .\" + name + ' property.'\n          );\n        }\n      }\n    };\n    return api;\n  }\n\n  function _createElementDescriptor(def) {\n    var key = _toPropertyKey(def.key);\n\n    var descriptor;\n\n    if (def.kind === 'method') {\n      descriptor = {\n        value: def.value,\n        writable: true,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'get') {\n      descriptor = {\n        get: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'set') {\n      descriptor = {\n        set: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'field') {\n      descriptor = {\n        configurable: true,\n        writable: true,\n        enumerable: true\n      };\n    }\n\n    var element = {\n      kind: def.kind === 'field' ? 'field' : 'method',\n      key: key,\n      placement: def.static\n        ? 'static'\n        : def.kind === 'field'\n        ? 'own'\n        : 'prototype',\n      descriptor: descriptor\n    };\n    if (def.decorators) element.decorators = def.decorators;\n    if (def.kind === 'field') element.initializer = def.value;\n    return element;\n  }\n\n  function _coalesceGetterSetter(element, other) {\n    if (element.descriptor.get !== undefined) {\n      other.descriptor.get = element.descriptor.get;\n    } else {\n      other.descriptor.set = element.descriptor.set;\n    }\n  }\n\n  function _coalesceClassElements(elements) {\n    var newElements = [];\n\n    var isSameElement = function(other) {\n      return (\n        other.kind === 'method' &&\n        other.key === element.key &&\n        other.placement === element.placement\n      );\n    };\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n      var other;\n\n      if (\n        element.kind === 'method' &&\n        (other = newElements.find(isSameElement))\n      ) {\n        if (\n          _isDataDescriptor(element.descriptor) ||\n          _isDataDescriptor(other.descriptor)\n        ) {\n          if (_hasDecorators(element) || _hasDecorators(other)) {\n            throw new ReferenceError(\n              'Duplicated methods (' + element.key + \") can't be decorated.\"\n            );\n          }\n\n          other.descriptor = element.descriptor;\n        } else {\n          if (_hasDecorators(element)) {\n            if (_hasDecorators(other)) {\n              throw new ReferenceError(\n                \"Decorators can't be placed on different accessors with for \" +\n                  'the same property (' +\n                  element.key +\n                  ').'\n              );\n            }\n\n            other.decorators = element.decorators;\n          }\n\n          _coalesceGetterSetter(element, other);\n        }\n      } else {\n        newElements.push(element);\n      }\n    }\n\n    return newElements;\n  }\n\n  function _hasDecorators(element) {\n    return element.decorators && element.decorators.length;\n  }\n\n  function _isDataDescriptor(desc) {\n    return (\n      desc !== undefined &&\n      !(desc.value === undefined && desc.writable === undefined)\n    );\n  }\n\n  function _optionalCallableProperty(obj, name) {\n    var value = obj[name];\n\n    if (value !== undefined && typeof value !== 'function') {\n      throw new TypeError(\"Expected '\" + name + \"' to be a function\");\n    }\n\n    return value;\n  }\n\n  function _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n      throw new TypeError('attempted to get private field on non-instance');\n    }\n\n    return fn;\n  }\n\n  function _classPrivateMethodSet() {\n    throw new TypeError('attempted to reassign private method');\n  }\n\n  function _wrapRegExp(re, groups) {\n    _wrapRegExp = function(re, groups) {\n      return new BabelRegExp(re, groups);\n    };\n\n    var _RegExp = _wrapNativeSuper(RegExp);\n\n    var _super = RegExp.prototype;\n\n    var _groups = new WeakMap();\n\n    function BabelRegExp(re, groups) {\n      var _this = _RegExp.call(this, re);\n\n      _groups.set(_this, groups);\n\n      return _this;\n    }\n\n    _inherits(BabelRegExp, _RegExp);\n\n    BabelRegExp.prototype.exec = function(str) {\n      var result = _super.exec.call(this, str);\n\n      if (result) result.groups = buildGroups(result, this);\n      return result;\n    };\n\n    BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n      if (typeof substitution === 'string') {\n        var groups = _groups.get(this);\n\n        return _super[Symbol.replace].call(\n          this,\n          str,\n          substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n            return '$' + groups[name];\n          })\n        );\n      } else if (typeof substitution === 'function') {\n        var _this = this;\n\n        return _super[Symbol.replace].call(this, str, function() {\n          var args = [];\n          args.push.apply(args, arguments);\n\n          if (typeof args[args.length - 1] !== 'object') {\n            args.push(buildGroups(args, _this));\n          }\n\n          return substitution.apply(this, args);\n        });\n      } else {\n        return _super[Symbol.replace].call(this, str, substitution);\n      }\n    };\n\n    function buildGroups(result, re) {\n      var g = _groups.get(re);\n\n      return Object.keys(g).reduce(function(groups, name) {\n        groups[name] = result[g[name]];\n        return groups;\n      }, Object.create(null));\n    }\n\n    return _wrapRegExp.apply(this, arguments);\n  }\n\n  var vectorMultiply = function vectorMultiply(v, amount) {\n    return createVector(v.x * amount, v.y * amount);\n  };\n\n  var vectorAdd = function vectorAdd(a, b) {\n    return createVector(a.x + b.x, a.y + b.y);\n  };\n\n  var vectorNormalize = function vectorNormalize(v) {\n    var l = Math.sqrt(v.x * v.x + v.y * v.y);\n    if (l === 0) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    return createVector(v.x / l, v.y / l);\n  };\n\n  var vectorRotate = function vectorRotate(v, radians, origin) {\n    var cos = Math.cos(radians);\n    var sin = Math.sin(radians);\n    var t = createVector(v.x - origin.x, v.y - origin.y);\n    return createVector(\n      origin.x + cos * t.x - sin * t.y,\n      origin.y + sin * t.x + cos * t.y\n    );\n  };\n\n  var createVector = function createVector() {\n    var x =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return { x: x, y: y };\n  };\n\n  var getMarkupValue = function getMarkupValue(value, size) {\n    var scalar =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var axis = arguments.length > 3 ? arguments[3] : undefined;\n    if (typeof value === 'string') {\n      return parseFloat(value) * scalar;\n    }\n    if (typeof value === 'number') {\n      return value * (axis ? size[axis] : Math.min(size.width, size.height));\n    }\n    return;\n  };\n\n  var getMarkupStyles = function getMarkupStyles(markup, size, scale) {\n    var lineStyle = markup.borderStyle || markup.lineStyle || 'solid';\n    var fill = markup.backgroundColor || markup.fontColor || 'transparent';\n    var stroke = markup.borderColor || markup.lineColor || 'transparent';\n    var strokeWidth = getMarkupValue(\n      markup.borderWidth || markup.lineWidth,\n      size,\n      scale\n    );\n    var lineCap = markup.lineCap || 'round';\n    var lineJoin = markup.lineJoin || 'round';\n    var dashes =\n      typeof lineStyle === 'string'\n        ? ''\n        : lineStyle\n            .map(function(v) {\n              return getMarkupValue(v, size, scale);\n            })\n            .join(',');\n    var opacity = markup.opacity || 1;\n    return {\n      'stroke-linecap': lineCap,\n      'stroke-linejoin': lineJoin,\n      'stroke-width': strokeWidth || 0,\n      'stroke-dasharray': dashes,\n      stroke: stroke,\n      fill: fill,\n      opacity: opacity\n    };\n  };\n\n  var isDefined = function isDefined(value) {\n    return value != null;\n  };\n\n  var getMarkupRect = function getMarkupRect(rect, size) {\n    var scalar =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    var left =\n      getMarkupValue(rect.x, size, scalar, 'width') ||\n      getMarkupValue(rect.left, size, scalar, 'width');\n    var top =\n      getMarkupValue(rect.y, size, scalar, 'height') ||\n      getMarkupValue(rect.top, size, scalar, 'height');\n    var width = getMarkupValue(rect.width, size, scalar, 'width');\n    var height = getMarkupValue(rect.height, size, scalar, 'height');\n    var right = getMarkupValue(rect.right, size, scalar, 'width');\n    var bottom = getMarkupValue(rect.bottom, size, scalar, 'height');\n\n    if (!isDefined(top)) {\n      if (isDefined(height) && isDefined(bottom)) {\n        top = size.height - height - bottom;\n      } else {\n        top = bottom;\n      }\n    }\n\n    if (!isDefined(left)) {\n      if (isDefined(width) && isDefined(right)) {\n        left = size.width - width - right;\n      } else {\n        left = right;\n      }\n    }\n\n    if (!isDefined(width)) {\n      if (isDefined(left) && isDefined(right)) {\n        width = size.width - left - right;\n      } else {\n        width = 0;\n      }\n    }\n\n    if (!isDefined(height)) {\n      if (isDefined(top) && isDefined(bottom)) {\n        height = size.height - top - bottom;\n      } else {\n        height = 0;\n      }\n    }\n\n    return {\n      x: left || 0,\n      y: top || 0,\n      width: width || 0,\n      height: height || 0\n    };\n  };\n\n  var pointsToPathShape = function pointsToPathShape(points) {\n    return points\n      .map(function(point, index) {\n        return ''\n          .concat(index === 0 ? 'M' : 'L', ' ')\n          .concat(point.x, ' ')\n          .concat(point.y);\n      })\n      .join(' ');\n  };\n\n  var setAttributes = function setAttributes(element, attr) {\n    return Object.keys(attr).forEach(function(key) {\n      return element.setAttribute(key, attr[key]);\n    });\n  };\n\n  var ns = 'http://www.w3.org/2000/svg';\n  var svg = function svg(tag, attr) {\n    var element = document.createElementNS(ns, tag);\n    if (attr) {\n      setAttributes(element, attr);\n    }\n    return element;\n  };\n\n  var updateRect = function updateRect(element) {\n    return setAttributes(\n      element,\n      Object.assign({}, element.rect, element.styles)\n    );\n  };\n\n  var updateEllipse = function updateEllipse(element) {\n    var cx = element.rect.x + element.rect.width * 0.5;\n    var cy = element.rect.y + element.rect.height * 0.5;\n    var rx = element.rect.width * 0.5;\n    var ry = element.rect.height * 0.5;\n    return setAttributes(\n      element,\n      Object.assign(\n        {\n          cx: cx,\n          cy: cy,\n          rx: rx,\n          ry: ry\n        },\n        element.styles\n      )\n    );\n  };\n\n  var IMAGE_FIT_STYLE = {\n    contain: 'xMidYMid meet',\n    cover: 'xMidYMid slice'\n  };\n\n  var updateImage = function updateImage(element, markup) {\n    setAttributes(\n      element,\n      Object.assign({}, element.rect, element.styles, {\n        preserveAspectRatio: IMAGE_FIT_STYLE[markup.fit] || 'none'\n      })\n    );\n  };\n\n  var TEXT_ANCHOR = {\n    left: 'start',\n    center: 'middle',\n    right: 'end'\n  };\n\n  var updateText = function updateText(element, markup, size, scale) {\n    var fontSize = getMarkupValue(markup.fontSize, size, scale);\n    var fontFamily = markup.fontFamily || 'sans-serif';\n    var fontWeight = markup.fontWeight || 'normal';\n    var textAlign = TEXT_ANCHOR[markup.textAlign] || 'start';\n\n    setAttributes(\n      element,\n      Object.assign({}, element.rect, element.styles, {\n        'stroke-width': 0,\n        'font-weight': fontWeight,\n        'font-size': fontSize,\n        'font-family': fontFamily,\n        'text-anchor': textAlign\n      })\n    );\n\n    // update text\n    if (element.text !== markup.text) {\n      element.text = markup.text;\n      element.textContent = markup.text.length ? markup.text : ' ';\n    }\n  };\n\n  var updateLine = function updateLine(element, markup, size, scale) {\n    setAttributes(\n      element,\n      Object.assign({}, element.rect, element.styles, {\n        fill: 'none'\n      })\n    );\n\n    var line = element.childNodes[0];\n    var begin = element.childNodes[1];\n    var end = element.childNodes[2];\n\n    var origin = element.rect;\n\n    var target = {\n      x: element.rect.x + element.rect.width,\n      y: element.rect.y + element.rect.height\n    };\n\n    setAttributes(line, {\n      x1: origin.x,\n      y1: origin.y,\n      x2: target.x,\n      y2: target.y\n    });\n\n    if (!markup.lineDecoration) return;\n\n    begin.style.display = 'none';\n    end.style.display = 'none';\n\n    var v = vectorNormalize({\n      x: target.x - origin.x,\n      y: target.y - origin.y\n    });\n\n    var l = getMarkupValue(0.05, size, scale);\n\n    if (markup.lineDecoration.indexOf('arrow-begin') !== -1) {\n      var arrowBeginRotationPoint = vectorMultiply(v, l);\n      var arrowBeginCenter = vectorAdd(origin, arrowBeginRotationPoint);\n      var arrowBeginA = vectorRotate(origin, 2, arrowBeginCenter);\n      var arrowBeginB = vectorRotate(origin, -2, arrowBeginCenter);\n\n      setAttributes(begin, {\n        style: 'display:block;',\n        d: 'M'\n          .concat(arrowBeginA.x, ',')\n          .concat(arrowBeginA.y, ' L')\n          .concat(origin.x, ',')\n          .concat(origin.y, ' L')\n          .concat(arrowBeginB.x, ',')\n          .concat(arrowBeginB.y)\n      });\n    }\n\n    if (markup.lineDecoration.indexOf('arrow-end') !== -1) {\n      var arrowEndRotationPoint = vectorMultiply(v, -l);\n      var arrowEndCenter = vectorAdd(target, arrowEndRotationPoint);\n      var arrowEndA = vectorRotate(target, 2, arrowEndCenter);\n      var arrowEndB = vectorRotate(target, -2, arrowEndCenter);\n\n      setAttributes(end, {\n        style: 'display:block;',\n        d: 'M'\n          .concat(arrowEndA.x, ',')\n          .concat(arrowEndA.y, ' L')\n          .concat(target.x, ',')\n          .concat(target.y, ' L')\n          .concat(arrowEndB.x, ',')\n          .concat(arrowEndB.y)\n      });\n    }\n  };\n\n  var updatePath = function updatePath(element, markup, size, scale) {\n    setAttributes(\n      element,\n      Object.assign({}, element.styles, {\n        fill: 'none',\n        d: pointsToPathShape(\n          markup.points.map(function(point) {\n            return {\n              x: getMarkupValue(point.x, size, scale, 'width'),\n              y: getMarkupValue(point.y, size, scale, 'height')\n            };\n          })\n        )\n      })\n    );\n  };\n\n  var createShape = function createShape(node) {\n    return function(markup) {\n      return svg(node, { id: markup.id });\n    };\n  };\n\n  var createImage = function createImage(markup) {\n    var shape = svg('image', {\n      id: markup.id,\n      'stroke-linecap': 'round',\n      'stroke-linejoin': 'round',\n      opacity: '0'\n    });\n\n    shape.onload = function() {\n      shape.setAttribute('opacity', markup.opacity || 1);\n    };\n    shape.setAttributeNS(\n      'http://www.w3.org/1999/xlink',\n      'xlink:href',\n      markup.src\n    );\n    return shape;\n  };\n\n  var createLine = function createLine(markup) {\n    var shape = svg('g', {\n      id: markup.id,\n      'stroke-linecap': 'round',\n      'stroke-linejoin': 'round'\n    });\n\n    var line = svg('line');\n    shape.appendChild(line);\n\n    var begin = svg('path');\n    shape.appendChild(begin);\n\n    var end = svg('path');\n    shape.appendChild(end);\n\n    return shape;\n  };\n\n  var CREATE_TYPE_ROUTES = {\n    image: createImage,\n    rect: createShape('rect'),\n    ellipse: createShape('ellipse'),\n    text: createShape('text'),\n    path: createShape('path'),\n    line: createLine\n  };\n\n  var UPDATE_TYPE_ROUTES = {\n    rect: updateRect,\n    ellipse: updateEllipse,\n    image: updateImage,\n    text: updateText,\n    path: updatePath,\n    line: updateLine\n  };\n\n  var createMarkupByType = function createMarkupByType(type, markup) {\n    return CREATE_TYPE_ROUTES[type](markup);\n  };\n\n  var updateMarkupByType = function updateMarkupByType(\n    element,\n    type,\n    markup,\n    size,\n    scale\n  ) {\n    if (type !== 'path') {\n      element.rect = getMarkupRect(markup, size, scale);\n    }\n    element.styles = getMarkupStyles(markup, size, scale);\n    UPDATE_TYPE_ROUTES[type](element, markup, size, scale);\n  };\n\n  var MARKUP_RECT = [\n    'x',\n    'y',\n    'left',\n    'top',\n    'right',\n    'bottom',\n    'width',\n    'height'\n  ];\n\n  var toOptionalFraction = function toOptionalFraction(value) {\n    return typeof value === 'string' && /%/.test(value)\n      ? parseFloat(value) / 100\n      : value;\n  };\n\n  // adds default markup properties, clones markup\n  var prepareMarkup = function prepareMarkup(markup) {\n    var _markup = _slicedToArray(markup, 2),\n      type = _markup[0],\n      props = _markup[1];\n\n    var rect = props.points\n      ? {}\n      : MARKUP_RECT.reduce(function(prev, curr) {\n          prev[curr] = toOptionalFraction(props[curr]);\n          return prev;\n        }, {});\n\n    return [\n      type,\n      Object.assign(\n        {\n          zIndex: 0\n        },\n        props,\n        rect\n      )\n    ];\n  };\n\n  var sortMarkupByZIndex = function sortMarkupByZIndex(a, b) {\n    if (a[1].zIndex > b[1].zIndex) {\n      return 1;\n    }\n    if (a[1].zIndex < b[1].zIndex) {\n      return -1;\n    }\n    return 0;\n  };\n\n  var createMarkupView = function createMarkupView(_) {\n    return _.utils.createView({\n      name: 'image-preview-markup',\n      tag: 'svg',\n      ignoreRect: true,\n      mixins: {\n        apis: ['width', 'height', 'crop', 'markup', 'resize', 'dirty']\n      },\n\n      write: function write(_ref) {\n        var root = _ref.root,\n          props = _ref.props;\n\n        if (!props.dirty) return;\n        var crop = props.crop,\n          resize = props.resize,\n          markup = props.markup;\n\n        var viewWidth = props.width;\n        var viewHeight = props.height;\n\n        var cropWidth = crop.width;\n        var cropHeight = crop.height;\n\n        if (resize) {\n          var _size = resize.size;\n\n          var outputWidth = _size && _size.width;\n          var outputHeight = _size && _size.height;\n          var outputFit = resize.mode;\n          var outputUpscale = resize.upscale;\n\n          if (outputWidth && !outputHeight) outputHeight = outputWidth;\n          if (outputHeight && !outputWidth) outputWidth = outputHeight;\n\n          var shouldUpscale =\n            cropWidth < outputWidth && cropHeight < outputHeight;\n\n          if (!shouldUpscale || (shouldUpscale && outputUpscale)) {\n            var scalarWidth = outputWidth / cropWidth;\n            var scalarHeight = outputHeight / cropHeight;\n\n            if (outputFit === 'force') {\n              cropWidth = outputWidth;\n              cropHeight = outputHeight;\n            } else {\n              var scalar;\n              if (outputFit === 'cover') {\n                scalar = Math.max(scalarWidth, scalarHeight);\n              } else if (outputFit === 'contain') {\n                scalar = Math.min(scalarWidth, scalarHeight);\n              }\n              cropWidth = cropWidth * scalar;\n              cropHeight = cropHeight * scalar;\n            }\n          }\n        }\n\n        var size = {\n          width: viewWidth,\n          height: viewHeight\n        };\n\n        root.element.setAttribute('width', size.width);\n        root.element.setAttribute('height', size.height);\n\n        var scale = Math.min(viewWidth / cropWidth, viewHeight / cropHeight);\n\n        // clear\n        root.element.innerHTML = '';\n\n        // get filter\n        var markupFilter = root.query('GET_IMAGE_PREVIEW_MARKUP_FILTER');\n\n        // draw new\n        markup\n          .filter(markupFilter)\n          .map(prepareMarkup)\n          .sort(sortMarkupByZIndex)\n          .forEach(function(markup) {\n            var _markup = _slicedToArray(markup, 2),\n              type = _markup[0],\n              settings = _markup[1];\n\n            // create\n            var element = createMarkupByType(type, settings);\n\n            // update\n            updateMarkupByType(element, type, settings, size, scale);\n\n            // add\n            root.element.appendChild(element);\n          });\n      }\n    });\n  };\n\n  var createVector$1 = function createVector(x, y) {\n    return { x: x, y: y };\n  };\n\n  var vectorDot = function vectorDot(a, b) {\n    return a.x * b.x + a.y * b.y;\n  };\n\n  var vectorSubtract = function vectorSubtract(a, b) {\n    return createVector$1(a.x - b.x, a.y - b.y);\n  };\n\n  var vectorDistanceSquared = function vectorDistanceSquared(a, b) {\n    return vectorDot(vectorSubtract(a, b), vectorSubtract(a, b));\n  };\n\n  var vectorDistance = function vectorDistance(a, b) {\n    return Math.sqrt(vectorDistanceSquared(a, b));\n  };\n\n  var getOffsetPointOnEdge = function getOffsetPointOnEdge(length, rotation) {\n    var a = length;\n\n    var A = 1.5707963267948966;\n    var B = rotation;\n    var C = 1.5707963267948966 - rotation;\n\n    var sinA = Math.sin(A);\n    var sinB = Math.sin(B);\n    var sinC = Math.sin(C);\n    var cosC = Math.cos(C);\n    var ratio = a / sinA;\n    var b = ratio * sinB;\n    var c = ratio * sinC;\n\n    return createVector$1(cosC * b, cosC * c);\n  };\n\n  var getRotatedRectSize = function getRotatedRectSize(rect, rotation) {\n    var w = rect.width;\n    var h = rect.height;\n\n    var hor = getOffsetPointOnEdge(w, rotation);\n    var ver = getOffsetPointOnEdge(h, rotation);\n\n    var tl = createVector$1(rect.x + Math.abs(hor.x), rect.y - Math.abs(hor.y));\n\n    var tr = createVector$1(\n      rect.x + rect.width + Math.abs(ver.y),\n      rect.y + Math.abs(ver.x)\n    );\n\n    var bl = createVector$1(\n      rect.x - Math.abs(ver.y),\n      rect.y + rect.height - Math.abs(ver.x)\n    );\n\n    return {\n      width: vectorDistance(tl, tr),\n      height: vectorDistance(tl, bl)\n    };\n  };\n\n  var calculateCanvasSize = function calculateCanvasSize(\n    image,\n    canvasAspectRatio\n  ) {\n    var zoom =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    var imageAspectRatio = image.height / image.width;\n\n    // determine actual pixels on x and y axis\n    var canvasWidth = 1;\n    var canvasHeight = canvasAspectRatio;\n    var imgWidth = 1;\n    var imgHeight = imageAspectRatio;\n    if (imgHeight > canvasHeight) {\n      imgHeight = canvasHeight;\n      imgWidth = imgHeight / imageAspectRatio;\n    }\n\n    var scalar = Math.max(canvasWidth / imgWidth, canvasHeight / imgHeight);\n    var width = image.width / (zoom * scalar * imgWidth);\n    var height = width * canvasAspectRatio;\n\n    return {\n      width: width,\n      height: height\n    };\n  };\n\n  var getImageRectZoomFactor = function getImageRectZoomFactor(\n    imageRect,\n    cropRect,\n    rotation,\n    center\n  ) {\n    // calculate available space round image center position\n    var cx = center.x > 0.5 ? 1 - center.x : center.x;\n    var cy = center.y > 0.5 ? 1 - center.y : center.y;\n    var imageWidth = cx * 2 * imageRect.width;\n    var imageHeight = cy * 2 * imageRect.height;\n\n    // calculate rotated crop rectangle size\n    var rotatedCropSize = getRotatedRectSize(cropRect, rotation);\n\n    // calculate scalar required to fit image\n    return Math.max(\n      rotatedCropSize.width / imageWidth,\n      rotatedCropSize.height / imageHeight\n    );\n  };\n\n  var getCenteredCropRect = function getCenteredCropRect(\n    container,\n    aspectRatio\n  ) {\n    var width = container.width;\n    var height = width * aspectRatio;\n    if (height > container.height) {\n      height = container.height;\n      width = height / aspectRatio;\n    }\n    var x = (container.width - width) * 0.5;\n    var y = (container.height - height) * 0.5;\n\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  };\n\n  var getCurrentCropSize = function getCurrentCropSize(imageSize) {\n    var crop =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var zoom = crop.zoom,\n      rotation = crop.rotation,\n      center = crop.center,\n      aspectRatio = crop.aspectRatio;\n\n    if (!aspectRatio) aspectRatio = imageSize.height / imageSize.width;\n\n    var canvasSize = calculateCanvasSize(imageSize, aspectRatio, zoom);\n\n    var canvasCenter = {\n      x: canvasSize.width * 0.5,\n      y: canvasSize.height * 0.5\n    };\n\n    var stage = {\n      x: 0,\n      y: 0,\n      width: canvasSize.width,\n      height: canvasSize.height,\n      center: canvasCenter\n    };\n\n    var shouldLimit = typeof crop.scaleToFit === 'undefined' || crop.scaleToFit;\n\n    var stageZoomFactor = getImageRectZoomFactor(\n      imageSize,\n      getCenteredCropRect(stage, aspectRatio),\n      rotation,\n      shouldLimit ? center : { x: 0.5, y: 0.5 }\n    );\n\n    var scale = zoom * stageZoomFactor;\n\n    // start drawing\n    return {\n      widthFloat: canvasSize.width / scale,\n      heightFloat: canvasSize.height / scale,\n      width: Math.round(canvasSize.width / scale),\n      height: Math.round(canvasSize.height / scale)\n    };\n  };\n\n  var IMAGE_SCALE_SPRING_PROPS = {\n    type: 'spring',\n    stiffness: 0.5,\n    damping: 0.45,\n    mass: 10\n  };\n\n  // does horizontal and vertical flipping\n  var createBitmapView = function createBitmapView(_) {\n    return _.utils.createView({\n      name: 'image-bitmap',\n      ignoreRect: true,\n      mixins: { styles: ['scaleX', 'scaleY'] },\n      create: function create(_ref) {\n        var root = _ref.root,\n          props = _ref.props;\n        root.appendChild(props.image);\n      }\n    });\n  };\n\n  // shifts and rotates image\n  var createImageCanvasWrapper = function createImageCanvasWrapper(_) {\n    return _.utils.createView({\n      name: 'image-canvas-wrapper',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: ['crop', 'width', 'height'],\n\n        styles: [\n          'originX',\n          'originY',\n          'translateX',\n          'translateY',\n          'scaleX',\n          'scaleY',\n          'rotateZ'\n        ],\n\n        animations: {\n          originX: IMAGE_SCALE_SPRING_PROPS,\n          originY: IMAGE_SCALE_SPRING_PROPS,\n          scaleX: IMAGE_SCALE_SPRING_PROPS,\n          scaleY: IMAGE_SCALE_SPRING_PROPS,\n          translateX: IMAGE_SCALE_SPRING_PROPS,\n          translateY: IMAGE_SCALE_SPRING_PROPS,\n          rotateZ: IMAGE_SCALE_SPRING_PROPS\n        }\n      },\n\n      create: function create(_ref2) {\n        var root = _ref2.root,\n          props = _ref2.props;\n        props.width = props.image.width;\n        props.height = props.image.height;\n        root.ref.bitmap = root.appendChildView(\n          root.createChildView(createBitmapView(_), { image: props.image })\n        );\n      },\n      write: function write(_ref3) {\n        var root = _ref3.root,\n          props = _ref3.props;\n        var flip = props.crop.flip;\n        var bitmap = root.ref.bitmap;\n        bitmap.scaleX = flip.horizontal ? -1 : 1;\n        bitmap.scaleY = flip.vertical ? -1 : 1;\n      }\n    });\n  };\n\n  // clips canvas to correct aspect ratio\n  var createClipView = function createClipView(_) {\n    return _.utils.createView({\n      name: 'image-clip',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: [\n          'crop',\n          'markup',\n          'resize',\n          'width',\n          'height',\n          'dirty',\n          'background'\n        ],\n\n        styles: ['width', 'height', 'opacity'],\n        animations: {\n          opacity: { type: 'tween', duration: 250 }\n        }\n      },\n\n      didWriteView: function didWriteView(_ref4) {\n        var root = _ref4.root,\n          props = _ref4.props;\n        if (!props.background) return;\n        root.element.style.backgroundColor = props.background;\n      },\n      create: function create(_ref5) {\n        var root = _ref5.root,\n          props = _ref5.props;\n\n        root.ref.image = root.appendChildView(\n          root.createChildView(\n            createImageCanvasWrapper(_),\n            Object.assign({}, props)\n          )\n        );\n\n        root.ref.createMarkup = function() {\n          if (root.ref.markup) return;\n          root.ref.markup = root.appendChildView(\n            root.createChildView(createMarkupView(_), Object.assign({}, props))\n          );\n        };\n\n        root.ref.destroyMarkup = function() {\n          if (!root.ref.markup) return;\n          root.removeChildView(root.ref.markup);\n          root.ref.markup = null;\n        };\n\n        // set up transparency grid\n        var transparencyIndicator = root.query(\n          'GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR'\n        );\n        if (transparencyIndicator === null) return;\n\n        // grid pattern\n        if (transparencyIndicator === 'grid') {\n          root.element.dataset.transparencyIndicator = transparencyIndicator;\n        }\n        // basic color\n        else {\n          root.element.dataset.transparencyIndicator = 'color';\n        }\n      },\n      write: function write(_ref6) {\n        var root = _ref6.root,\n          props = _ref6.props,\n          shouldOptimize = _ref6.shouldOptimize;\n        var crop = props.crop,\n          markup = props.markup,\n          resize = props.resize,\n          dirty = props.dirty,\n          width = props.width,\n          height = props.height;\n\n        root.ref.image.crop = crop;\n\n        var stage = {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          center: {\n            x: width * 0.5,\n            y: height * 0.5\n          }\n        };\n\n        var image = {\n          width: root.ref.image.width,\n          height: root.ref.image.height\n        };\n\n        var origin = {\n          x: crop.center.x * image.width,\n          y: crop.center.y * image.height\n        };\n\n        var translation = {\n          x: stage.center.x - image.width * crop.center.x,\n          y: stage.center.y - image.height * crop.center.y\n        };\n\n        var rotation = Math.PI * 2 + (crop.rotation % (Math.PI * 2));\n\n        var cropAspectRatio = crop.aspectRatio || image.height / image.width;\n\n        var shouldLimit =\n          typeof crop.scaleToFit === 'undefined' || crop.scaleToFit;\n\n        var stageZoomFactor = getImageRectZoomFactor(\n          image,\n          getCenteredCropRect(stage, cropAspectRatio),\n\n          rotation,\n          shouldLimit ? crop.center : { x: 0.5, y: 0.5 }\n        );\n\n        var scale = crop.zoom * stageZoomFactor;\n\n        // update markup view\n        if (markup && markup.length) {\n          root.ref.createMarkup();\n          root.ref.markup.width = width;\n          root.ref.markup.height = height;\n          root.ref.markup.resize = resize;\n          root.ref.markup.dirty = dirty;\n          root.ref.markup.markup = markup;\n          root.ref.markup.crop = getCurrentCropSize(image, crop);\n        } else if (root.ref.markup) {\n          root.ref.destroyMarkup();\n        }\n\n        // update image view\n        var imageView = root.ref.image;\n\n        // don't update clip layout\n        if (shouldOptimize) {\n          imageView.originX = null;\n          imageView.originY = null;\n          imageView.translateX = null;\n          imageView.translateY = null;\n          imageView.rotateZ = null;\n          imageView.scaleX = null;\n          imageView.scaleY = null;\n          return;\n        }\n\n        imageView.originX = origin.x;\n        imageView.originY = origin.y;\n        imageView.translateX = translation.x;\n        imageView.translateY = translation.y;\n        imageView.rotateZ = rotation;\n        imageView.scaleX = scale;\n        imageView.scaleY = scale;\n      }\n    });\n  };\n\n  var createImageView = function createImageView(_) {\n    return _.utils.createView({\n      name: 'image-preview',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: ['image', 'crop', 'markup', 'resize', 'dirty', 'background'],\n\n        styles: ['translateY', 'scaleX', 'scaleY', 'opacity'],\n\n        animations: {\n          scaleX: IMAGE_SCALE_SPRING_PROPS,\n          scaleY: IMAGE_SCALE_SPRING_PROPS,\n          translateY: IMAGE_SCALE_SPRING_PROPS,\n          opacity: { type: 'tween', duration: 400 }\n        }\n      },\n\n      create: function create(_ref7) {\n        var root = _ref7.root,\n          props = _ref7.props;\n        root.ref.clip = root.appendChildView(\n          root.createChildView(createClipView(_), {\n            id: props.id,\n            image: props.image,\n            crop: props.crop,\n            markup: props.markup,\n            resize: props.resize,\n            dirty: props.dirty,\n            background: props.background\n          })\n        );\n      },\n      write: function write(_ref8) {\n        var root = _ref8.root,\n          props = _ref8.props,\n          shouldOptimize = _ref8.shouldOptimize;\n        var clip = root.ref.clip;\n        var image = props.image,\n          crop = props.crop,\n          markup = props.markup,\n          resize = props.resize,\n          dirty = props.dirty;\n\n        clip.crop = crop;\n        clip.markup = markup;\n        clip.resize = resize;\n        clip.dirty = dirty;\n\n        // don't update clip layout\n        clip.opacity = shouldOptimize ? 0 : 1;\n\n        // don't re-render if optimizing or hidden (width will be zero resulting in weird animations)\n        if (shouldOptimize || root.rect.element.hidden) return;\n\n        // calculate scaled preview image size\n        var imageAspectRatio = image.height / image.width;\n        var aspectRatio = crop.aspectRatio || imageAspectRatio;\n\n        // calculate container size\n        var containerWidth = root.rect.inner.width;\n        var containerHeight = root.rect.inner.height;\n\n        var fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n        var minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\n        var maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT');\n\n        var panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n        var allowMultiple = root.query('GET_ALLOW_MULTIPLE');\n\n        if (panelAspectRatio && !allowMultiple) {\n          fixedPreviewHeight = containerWidth * panelAspectRatio;\n          aspectRatio = panelAspectRatio;\n        }\n\n        // determine clip width and height\n        var clipHeight =\n          fixedPreviewHeight !== null\n            ? fixedPreviewHeight\n            : Math.max(\n                minPreviewHeight,\n                Math.min(containerWidth * aspectRatio, maxPreviewHeight)\n              );\n\n        var clipWidth = clipHeight / aspectRatio;\n        if (clipWidth > containerWidth) {\n          clipWidth = containerWidth;\n          clipHeight = clipWidth * aspectRatio;\n        }\n\n        if (clipHeight > containerHeight) {\n          clipHeight = containerHeight;\n          clipWidth = containerHeight / aspectRatio;\n        }\n\n        clip.width = clipWidth;\n        clip.height = clipHeight;\n      }\n    });\n  };\n\n  var SVG_MASK =\n    '<svg width=\"500\" height=\"200\" viewBox=\"0 0 500 200\" preserveAspectRatio=\"none\">\\n    <defs>\\n        <radialGradient id=\"gradient-__UID__\" cx=\".5\" cy=\"1.25\" r=\"1.15\">\\n            <stop offset=\\'50%\\' stop-color=\\'#000000\\'/>\\n            <stop offset=\\'56%\\' stop-color=\\'#0a0a0a\\'/>\\n            <stop offset=\\'63%\\' stop-color=\\'#262626\\'/>\\n            <stop offset=\\'69%\\' stop-color=\\'#4f4f4f\\'/>\\n            <stop offset=\\'75%\\' stop-color=\\'#808080\\'/>\\n            <stop offset=\\'81%\\' stop-color=\\'#b1b1b1\\'/>\\n            <stop offset=\\'88%\\' stop-color=\\'#dadada\\'/>\\n            <stop offset=\\'94%\\' stop-color=\\'#f6f6f6\\'/>\\n            <stop offset=\\'100%\\' stop-color=\\'#ffffff\\'/>\\n        </radialGradient>\\n        <mask id=\"mask-__UID__\">\\n            <rect x=\"0\" y=\"0\" width=\"500\" height=\"200\" fill=\"url(#gradient-__UID__)\"></rect>\\n        </mask>\\n    </defs>\\n    <rect x=\"0\" width=\"500\" height=\"200\" fill=\"currentColor\" mask=\"url(#mask-__UID__)\"></rect>\\n</svg>';\n\n  var SVGMaskUniqueId = 0;\n\n  var createImageOverlayView = function createImageOverlayView(fpAPI) {\n    return fpAPI.utils.createView({\n      name: 'image-preview-overlay',\n      tag: 'div',\n      ignoreRect: true,\n      create: function create(_ref) {\n        var root = _ref.root,\n          props = _ref.props;\n        var mask = SVG_MASK;\n        if (document.querySelector('base')) {\n          var url = new URL(\n            window.location.href.replace(window.location.hash, '')\n          ).href;\n          mask = mask.replace(/url\\(\\#/g, 'url(' + url + '#');\n        }\n\n        SVGMaskUniqueId++;\n        root.element.classList.add(\n          'filepond--image-preview-overlay-'.concat(props.status)\n        );\n\n        root.element.innerHTML = mask.replace(/__UID__/g, SVGMaskUniqueId);\n      },\n      mixins: {\n        styles: ['opacity'],\n        animations: {\n          opacity: { type: 'spring', mass: 25 }\n        }\n      }\n    });\n  };\n\n  /**\n   * Bitmap Worker\n   */\n  var BitmapWorker = function BitmapWorker() {\n    self.onmessage = function(e) {\n      createImageBitmap(e.data.message.file).then(function(bitmap) {\n        self.postMessage({ id: e.data.id, message: bitmap }, [bitmap]);\n      });\n    };\n  };\n\n  /**\n   * ColorMatrix Worker\n   */\n  var ColorMatrixWorker = function ColorMatrixWorker() {\n    self.onmessage = function(e) {\n      var imageData = e.data.message.imageData;\n      var matrix = e.data.message.colorMatrix;\n\n      var data = imageData.data;\n      var l = data.length;\n\n      var m11 = matrix[0];\n      var m12 = matrix[1];\n      var m13 = matrix[2];\n      var m14 = matrix[3];\n      var m15 = matrix[4];\n\n      var m21 = matrix[5];\n      var m22 = matrix[6];\n      var m23 = matrix[7];\n      var m24 = matrix[8];\n      var m25 = matrix[9];\n\n      var m31 = matrix[10];\n      var m32 = matrix[11];\n      var m33 = matrix[12];\n      var m34 = matrix[13];\n      var m35 = matrix[14];\n\n      var m41 = matrix[15];\n      var m42 = matrix[16];\n      var m43 = matrix[17];\n      var m44 = matrix[18];\n      var m45 = matrix[19];\n\n      var index = 0,\n        r = 0.0,\n        g = 0.0,\n        b = 0.0,\n        a = 0.0;\n\n      for (; index < l; index += 4) {\n        r = data[index] / 255;\n        g = data[index + 1] / 255;\n        b = data[index + 2] / 255;\n        a = data[index + 3] / 255;\n        data[index] = Math.max(\n          0,\n          Math.min((r * m11 + g * m12 + b * m13 + a * m14 + m15) * 255, 255)\n        );\n        data[index + 1] = Math.max(\n          0,\n          Math.min((r * m21 + g * m22 + b * m23 + a * m24 + m25) * 255, 255)\n        );\n        data[index + 2] = Math.max(\n          0,\n          Math.min((r * m31 + g * m32 + b * m33 + a * m34 + m35) * 255, 255)\n        );\n        data[index + 3] = Math.max(\n          0,\n          Math.min((r * m41 + g * m42 + b * m43 + a * m44 + m45) * 255, 255)\n        );\n      }\n\n      self.postMessage({ id: e.data.id, message: imageData }, [\n        imageData.data.buffer\n      ]);\n    };\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n    image.onload = function() {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb(width, height);\n    };\n    image.src = url;\n  };\n\n  var transforms = {\n    1: function _() {\n      return [1, 0, 0, 1, 0, 0];\n    },\n    2: function _(width) {\n      return [-1, 0, 0, 1, width, 0];\n    },\n    3: function _(width, height) {\n      return [-1, 0, 0, -1, width, height];\n    },\n    4: function _(width, height) {\n      return [1, 0, 0, -1, 0, height];\n    },\n    5: function _() {\n      return [0, 1, 1, 0, 0, 0];\n    },\n    6: function _(width, height) {\n      return [0, 1, -1, 0, height, 0];\n    },\n    7: function _(width, height) {\n      return [0, -1, -1, 0, height, width];\n    },\n    8: function _(width) {\n      return [0, -1, 1, 0, 0, width];\n    }\n  };\n\n  var fixImageOrientation = function fixImageOrientation(\n    ctx,\n    width,\n    height,\n    orientation\n  ) {\n    // no orientation supplied\n    if (orientation === -1) {\n      return;\n    }\n\n    ctx.transform.apply(ctx, transforms[orientation](width, height));\n  };\n\n  // draws the preview image to canvas\n  var createPreviewImage = function createPreviewImage(\n    data,\n    width,\n    height,\n    orientation\n  ) {\n    // can't draw on half pixels\n    width = Math.round(width);\n    height = Math.round(height);\n\n    // draw image\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n\n    // if is rotated incorrectly swap width and height\n    if (orientation >= 5 && orientation <= 8) {\n      var _ref = [height, width];\n      width = _ref[0];\n      height = _ref[1];\n    }\n\n    // correct image orientation\n    fixImageOrientation(ctx, width, height, orientation);\n\n    // draw the image\n    ctx.drawImage(data, 0, 0, width, height);\n\n    return canvas;\n  };\n\n  var isBitmap = function isBitmap(file) {\n    return /^image/.test(file.type) && !/svg/.test(file.type);\n  };\n\n  var MAX_WIDTH = 10;\n  var MAX_HEIGHT = 10;\n\n  var calculateAverageColor = function calculateAverageColor(image) {\n    var scalar = Math.min(MAX_WIDTH / image.width, MAX_HEIGHT / image.height);\n\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var width = (canvas.width = Math.ceil(image.width * scalar));\n    var height = (canvas.height = Math.ceil(image.height * scalar));\n    ctx.drawImage(image, 0, 0, width, height);\n    var data = null;\n    try {\n      data = ctx.getImageData(0, 0, width, height).data;\n    } catch (e) {\n      return null;\n    }\n    var l = data.length;\n\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    var i = 0;\n\n    for (; i < l; i += 4) {\n      r += data[i] * data[i];\n      g += data[i + 1] * data[i + 1];\n      b += data[i + 2] * data[i + 2];\n    }\n\n    r = averageColor(r, l);\n    g = averageColor(g, l);\n    b = averageColor(b, l);\n\n    return { r: r, g: g, b: b };\n  };\n\n  var averageColor = function averageColor(c, l) {\n    return Math.floor(Math.sqrt(c / (l / 4)));\n  };\n\n  var cloneCanvas = function cloneCanvas(origin, target) {\n    target = target || document.createElement('canvas');\n    target.width = origin.width;\n    target.height = origin.height;\n    var ctx = target.getContext('2d');\n    ctx.drawImage(origin, 0, 0);\n    return target;\n  };\n\n  var cloneImageData = function cloneImageData(imageData) {\n    var id;\n    try {\n      id = new ImageData(imageData.width, imageData.height);\n    } catch (e) {\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d');\n      id = ctx.createImageData(imageData.width, imageData.height);\n    }\n    id.data.set(new Uint8ClampedArray(imageData.data));\n    return id;\n  };\n\n  var loadImage = function loadImage(url) {\n    return new Promise(function(resolve, reject) {\n      var img = new Image();\n      img.crossOrigin = 'Anonymous';\n      img.onload = function() {\n        resolve(img);\n      };\n      img.onerror = function(e) {\n        reject(e);\n      };\n      img.src = url;\n    });\n  };\n\n  var createImageWrapperView = function createImageWrapperView(_) {\n    // create overlay view\n    var OverlayView = createImageOverlayView(_);\n\n    var ImageView = createImageView(_);\n    var createWorker = _.utils.createWorker;\n\n    var applyFilter = function applyFilter(root, filter, target) {\n      return new Promise(function(resolve) {\n        // will store image data for future filter updates\n        if (!root.ref.imageData) {\n          root.ref.imageData = target\n            .getContext('2d')\n            .getImageData(0, 0, target.width, target.height);\n        }\n\n        // get image data reference\n        var imageData = cloneImageData(root.ref.imageData);\n\n        if (!filter || filter.length !== 20) {\n          target.getContext('2d').putImageData(imageData, 0, 0);\n          return resolve();\n        }\n\n        var worker = createWorker(ColorMatrixWorker);\n        worker.post(\n          {\n            imageData: imageData,\n            colorMatrix: filter\n          },\n\n          function(response) {\n            // apply filtered colors\n            target.getContext('2d').putImageData(response, 0, 0);\n\n            // stop worker\n            worker.terminate();\n\n            // done!\n            resolve();\n          },\n          [imageData.data.buffer]\n        );\n      });\n    };\n\n    var removeImageView = function removeImageView(root, imageView) {\n      root.removeChildView(imageView);\n      imageView.image.width = 1;\n      imageView.image.height = 1;\n      imageView._destroy();\n    };\n\n    // remove an image\n    var shiftImage = function shiftImage(_ref) {\n      var root = _ref.root;\n      var imageView = root.ref.images.shift();\n      imageView.opacity = 0;\n      imageView.translateY = -15;\n      root.ref.imageViewBin.push(imageView);\n      return imageView;\n    };\n\n    // add new image\n    var pushImage = function pushImage(_ref2) {\n      var root = _ref2.root,\n        props = _ref2.props,\n        image = _ref2.image;\n      var id = props.id;\n      var item = root.query('GET_ITEM', { id: id });\n      if (!item) return;\n\n      var crop = item.getMetadata('crop') || {\n        center: {\n          x: 0.5,\n          y: 0.5\n        },\n\n        flip: {\n          horizontal: false,\n          vertical: false\n        },\n\n        zoom: 1,\n        rotation: 0,\n        aspectRatio: null\n      };\n\n      var background = root.query(\n        'GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR'\n      );\n\n      var markup;\n      var resize;\n      var dirty = false;\n      if (root.query('GET_IMAGE_PREVIEW_MARKUP_SHOW')) {\n        markup = item.getMetadata('markup') || [];\n        resize = item.getMetadata('resize');\n        dirty = true;\n      }\n\n      // append image presenter\n      var imageView = root.appendChildView(\n        root.createChildView(ImageView, {\n          id: id,\n          image: image,\n          crop: crop,\n          resize: resize,\n          markup: markup,\n          dirty: dirty,\n          background: background,\n          opacity: 0,\n          scaleX: 1.15,\n          scaleY: 1.15,\n          translateY: 15\n        }),\n\n        root.childViews.length\n      );\n\n      root.ref.images.push(imageView);\n\n      // reveal the preview image\n      imageView.opacity = 1;\n      imageView.scaleX = 1;\n      imageView.scaleY = 1;\n      imageView.translateY = 0;\n\n      // the preview is now ready to be drawn\n      setTimeout(function() {\n        root.dispatch('DID_IMAGE_PREVIEW_SHOW', { id: id });\n      }, 250);\n    };\n\n    var updateImage = function updateImage(_ref3) {\n      var root = _ref3.root,\n        props = _ref3.props;\n      var item = root.query('GET_ITEM', { id: props.id });\n      if (!item) return;\n      var imageView = root.ref.images[root.ref.images.length - 1];\n      imageView.crop = item.getMetadata('crop');\n      imageView.background = root.query(\n        'GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR'\n      );\n\n      if (root.query('GET_IMAGE_PREVIEW_MARKUP_SHOW')) {\n        imageView.dirty = true;\n        imageView.resize = item.getMetadata('resize');\n        imageView.markup = item.getMetadata('markup');\n      }\n    };\n\n    // replace image preview\n    var didUpdateItemMetadata = function didUpdateItemMetadata(_ref4) {\n      var root = _ref4.root,\n        props = _ref4.props,\n        action = _ref4.action;\n      // only filter and crop trigger redraw\n      if (!/crop|filter|markup|resize/.test(action.change.key)) return;\n\n      // no images to update, exit\n      if (!root.ref.images.length) return;\n\n      // no item found, exit\n      var item = root.query('GET_ITEM', { id: props.id });\n      if (!item) return;\n\n      // for now, update existing image when filtering\n      if (/filter/.test(action.change.key)) {\n        var imageView = root.ref.images[root.ref.images.length - 1];\n        applyFilter(root, action.change.value, imageView.image);\n        return;\n      }\n\n      if (/crop|markup|resize/.test(action.change.key)) {\n        var crop = item.getMetadata('crop');\n        var image = root.ref.images[root.ref.images.length - 1];\n\n        // if aspect ratio has changed, we need to create a new image\n        if (\n          crop &&\n          crop.aspectRatio &&\n          image.crop &&\n          image.crop.aspectRatio &&\n          Math.abs(crop.aspectRatio - image.crop.aspectRatio) > 0.00001\n        ) {\n          var _imageView = shiftImage({ root: root });\n          pushImage({\n            root: root,\n            props: props,\n            image: cloneCanvas(_imageView.image)\n          });\n        }\n        // if not, we can update the current image\n        else {\n          updateImage({ root: root, props: props });\n        }\n      }\n    };\n\n    var canCreateImageBitmap = function canCreateImageBitmap(file) {\n      // Firefox versions before 58 will freeze when running createImageBitmap\n      // in a Web Worker so we detect those versions and return false for support\n      var userAgent = window.navigator.userAgent;\n      var isFirefox = userAgent.match(/Firefox\\/([0-9]+)\\./);\n      var firefoxVersion = isFirefox ? parseInt(isFirefox[1]) : null;\n      if (firefoxVersion !== null && firefoxVersion <= 58) return false;\n\n      return 'createImageBitmap' in window && isBitmap(file);\n    };\n\n    /**\n     * Write handler for when preview container has been created\n     */\n    var didCreatePreviewContainer = function didCreatePreviewContainer(_ref5) {\n      var root = _ref5.root,\n        props = _ref5.props;\n      var id = props.id;\n\n      // we need to get the file data to determine the eventual image size\n      var item = root.query('GET_ITEM', id);\n      if (!item) return;\n\n      // get url to file (we'll revoke it later on when done)\n      var fileURL = URL.createObjectURL(item.file);\n\n      // determine image size of this item\n      getImageSize(fileURL, function(width, height) {\n        // we can now scale the panel to the final size\n        root.dispatch('DID_IMAGE_PREVIEW_CALCULATE_SIZE', {\n          id: id,\n          width: width,\n          height: height\n        });\n      });\n    };\n\n    var drawPreview = function drawPreview(_ref6) {\n      var root = _ref6.root,\n        props = _ref6.props;\n      var id = props.id;\n\n      // we need to get the file data to determine the eventual image size\n      var item = root.query('GET_ITEM', id);\n      if (!item) return;\n\n      // get url to file (we'll revoke it later on when done)\n      var fileURL = URL.createObjectURL(item.file);\n\n      // fallback\n      var loadPreviewFallback = function loadPreviewFallback() {\n        // let's scale the image in the main thread :(\n        loadImage(fileURL).then(previewImageLoaded);\n      };\n\n      // image is now ready\n      var previewImageLoaded = function previewImageLoaded(imageData) {\n        // the file url is no longer needed\n        URL.revokeObjectURL(fileURL);\n\n        // draw the scaled down version here and use that as source so bitmapdata can be closed\n        // orientation info\n        var exif = item.getMetadata('exif') || {};\n        var orientation = exif.orientation || -1;\n\n        // get width and height from action, and swap if orientation is incorrect\n        var width = imageData.width,\n          height = imageData.height;\n\n        // if no width or height, just return early.\n        if (!width || !height) return;\n\n        if (orientation >= 5 && orientation <= 8) {\n          var _ref7 = [height, width];\n          width = _ref7[0];\n          height = _ref7[1];\n        }\n\n        // scale canvas based on pixel density\n        // we multiply by .75 as that creates smaller but still clear images on screens with high res displays\n        var pixelDensityFactor = Math.max(1, window.devicePixelRatio * 0.75);\n\n        // we want as much pixels to work with as possible,\n        // this multiplies the minimum image resolution,\n        // so when zooming in it doesn't get too blurry\n        var zoomFactor = root.query('GET_IMAGE_PREVIEW_ZOOM_FACTOR');\n\n        // imaeg scale factor\n        var scaleFactor = zoomFactor * pixelDensityFactor;\n\n        // calculate scaled preview image size\n        var previewImageRatio = height / width;\n\n        // calculate image preview height and width\n        var previewContainerWidth = root.rect.element.width;\n        var previewContainerHeight = root.rect.element.height;\n\n        var imageWidth = previewContainerWidth;\n        var imageHeight = imageWidth * previewImageRatio;\n\n        if (previewImageRatio > 1) {\n          imageWidth = Math.min(width, previewContainerWidth * scaleFactor);\n          imageHeight = imageWidth * previewImageRatio;\n        } else {\n          imageHeight = Math.min(height, previewContainerHeight * scaleFactor);\n          imageWidth = imageHeight / previewImageRatio;\n        }\n\n        // transfer to image tag so no canvas memory wasted on iOS\n        var previewImage = createPreviewImage(\n          imageData,\n          imageWidth,\n          imageHeight,\n          orientation\n        );\n\n        // done\n        var done = function done() {\n          // calculate average image color, disabled for now\n          var averageColor = root.query(\n            'GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR'\n          )\n            ? calculateAverageColor(data)\n            : null;\n          item.setMetadata('color', averageColor, true);\n\n          // data has been transferred to canvas ( if was ImageBitmap )\n          if ('close' in imageData) {\n            imageData.close();\n          }\n\n          // show the overlay\n          root.ref.overlayShadow.opacity = 1;\n\n          // create the first image\n          pushImage({ root: root, props: props, image: previewImage });\n        };\n\n        // apply filter\n        var filter = item.getMetadata('filter');\n        if (filter) {\n          applyFilter(root, filter, previewImage).then(done);\n        } else {\n          done();\n        }\n      };\n\n      // if we support scaling using createImageBitmap we use a worker\n      if (canCreateImageBitmap(item.file)) {\n        // let's scale the image in a worker\n        var worker = createWorker(BitmapWorker);\n\n        worker.post(\n          {\n            file: item.file\n          },\n\n          function(imageBitmap) {\n            // destroy worker\n            worker.terminate();\n\n            // no bitmap returned, must be something wrong,\n            // try the oldschool way\n            if (!imageBitmap) {\n              loadPreviewFallback();\n              return;\n            }\n\n            // yay we got our bitmap, let's continue showing the preview\n            previewImageLoaded(imageBitmap);\n          }\n        );\n      } else {\n        // create fallback preview\n        loadPreviewFallback();\n      }\n    };\n\n    /**\n     * Write handler for when the preview image is ready to be animated\n     */\n    var didDrawPreview = function didDrawPreview(_ref8) {\n      var root = _ref8.root;\n      // get last added image\n      var image = root.ref.images[root.ref.images.length - 1];\n      image.translateY = 0;\n      image.scaleX = 1.0;\n      image.scaleY = 1.0;\n      image.opacity = 1;\n    };\n\n    /**\n     * Write handler for when the preview has been loaded\n     */\n    var restoreOverlay = function restoreOverlay(_ref9) {\n      var root = _ref9.root;\n      root.ref.overlayShadow.opacity = 1;\n      root.ref.overlayError.opacity = 0;\n      root.ref.overlaySuccess.opacity = 0;\n    };\n\n    var didThrowError = function didThrowError(_ref10) {\n      var root = _ref10.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlayError.opacity = 1;\n    };\n\n    var didCompleteProcessing = function didCompleteProcessing(_ref11) {\n      var root = _ref11.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlaySuccess.opacity = 1;\n    };\n\n    /**\n     * Constructor\n     */\n    var create = function create(_ref12) {\n      var root = _ref12.root;\n      // image view\n      root.ref.images = [];\n\n      // the preview image data (we need this to filter the image)\n      root.ref.imageData = null;\n\n      // image bin\n      root.ref.imageViewBin = [];\n\n      // image overlays\n      root.ref.overlayShadow = root.appendChildView(\n        root.createChildView(OverlayView, {\n          opacity: 0,\n          status: 'idle'\n        })\n      );\n\n      root.ref.overlaySuccess = root.appendChildView(\n        root.createChildView(OverlayView, {\n          opacity: 0,\n          status: 'success'\n        })\n      );\n\n      root.ref.overlayError = root.appendChildView(\n        root.createChildView(OverlayView, {\n          opacity: 0,\n          status: 'failure'\n        })\n      );\n    };\n\n    return _.utils.createView({\n      name: 'image-preview-wrapper',\n      create: create,\n      styles: ['height'],\n      apis: ['height'],\n      destroy: function destroy(_ref13) {\n        var root = _ref13.root;\n        // we resize the image so memory on iOS 12 is released more quickly (it seems)\n        root.ref.images.forEach(function(imageView) {\n          imageView.image.width = 1;\n          imageView.image.height = 1;\n        });\n      },\n      didWriteView: function didWriteView(_ref14) {\n        var root = _ref14.root;\n        root.ref.images.forEach(function(imageView) {\n          imageView.dirty = false;\n        });\n      },\n      write: _.utils.createRoute(\n        {\n          // image preview stated\n          DID_IMAGE_PREVIEW_DRAW: didDrawPreview,\n          DID_IMAGE_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer,\n          DID_FINISH_CALCULATE_PREVIEWSIZE: drawPreview,\n          DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata,\n\n          // file states\n          DID_THROW_ITEM_LOAD_ERROR: didThrowError,\n          DID_THROW_ITEM_PROCESSING_ERROR: didThrowError,\n          DID_THROW_ITEM_INVALID: didThrowError,\n          DID_COMPLETE_ITEM_PROCESSING: didCompleteProcessing,\n          DID_START_ITEM_PROCESSING: restoreOverlay,\n          DID_REVERT_ITEM_PROCESSING: restoreOverlay\n        },\n\n        function(_ref15) {\n          var root = _ref15.root;\n          // views on death row\n          var viewsToRemove = root.ref.imageViewBin.filter(function(imageView) {\n            return imageView.opacity === 0;\n          });\n\n          // views to retain\n          root.ref.imageViewBin = root.ref.imageViewBin.filter(function(\n            imageView\n          ) {\n            return imageView.opacity > 0;\n          });\n\n          // remove these views\n          viewsToRemove.forEach(function(imageView) {\n            return removeImageView(root, imageView);\n          });\n          viewsToRemove.length = 0;\n        }\n      )\n    });\n  };\n\n  /**\n   * Image Preview Plugin\n   */\n  var plugin = function plugin(fpAPI) {\n    var addFilter = fpAPI.addFilter,\n      utils = fpAPI.utils;\n    var Type = utils.Type,\n      createRoute = utils.createRoute,\n      isFile = utils.isFile;\n\n    // imagePreviewView\n    var imagePreviewView = createImageWrapperView(fpAPI);\n\n    // called for each view that is created right after the 'create' method\n    addFilter('CREATE_VIEW', function(viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n        view = viewAPI.view,\n        query = viewAPI.query;\n\n      // only hook up to item view and only if is enabled for this cropper\n      if (!is('file') || !query('GET_ALLOW_IMAGE_PREVIEW')) return;\n\n      // create the image preview plugin, but only do so if the item is an image\n      var didLoadItem = function didLoadItem(_ref) {\n        var root = _ref.root,\n          props = _ref.props;\n        var id = props.id;\n        var item = query('GET_ITEM', id);\n\n        // item could theoretically have been removed in the mean time\n        if (!item || !isFile(item.file) || item.archived) return;\n\n        // get the file object\n        var file = item.file;\n\n        // exit if this is not an image\n        if (!isPreviewableImage(file)) return;\n\n        // test if is filtered\n        if (!query('GET_IMAGE_PREVIEW_FILTER_ITEM')(item)) return;\n\n        // exit if image size is too high and no createImageBitmap support\n        // this would simply bring the browser to its knees and that is not what we want\n        var supportsCreateImageBitmap = 'createImageBitmap' in (window || {});\n        var maxPreviewFileSize = query('GET_IMAGE_PREVIEW_MAX_FILE_SIZE');\n        if (\n          !supportsCreateImageBitmap &&\n          maxPreviewFileSize &&\n          file.size > maxPreviewFileSize\n        )\n          return;\n\n        // set preview view\n        root.ref.imagePreview = view.appendChildView(\n          view.createChildView(imagePreviewView, { id: id })\n        );\n\n        // update height if is fixed\n        var fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n        if (fixedPreviewHeight) {\n          root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n            id: item.id,\n            height: fixedPreviewHeight\n          });\n        }\n\n        // now ready\n        var queue =\n          !supportsCreateImageBitmap &&\n          file.size > query('GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE');\n        root.dispatch('DID_IMAGE_PREVIEW_CONTAINER_CREATE', { id: id }, queue);\n      };\n\n      var rescaleItem = function rescaleItem(root, props) {\n        if (!root.ref.imagePreview) return;\n        var id = props.id;\n\n        // get item\n        var item = root.query('GET_ITEM', { id: id });\n        if (!item) return;\n\n        // if is fixed height or panel has aspect ratio, exit here, height has already been defined\n        var panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n        var itemPanelAspectRatio = root.query('GET_ITEM_PANEL_ASPECT_RATIO');\n        var fixedHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n        if (panelAspectRatio || itemPanelAspectRatio || fixedHeight) return;\n\n        // no data!\n        var _root$ref = root.ref,\n          imageWidth = _root$ref.imageWidth,\n          imageHeight = _root$ref.imageHeight;\n        if (!imageWidth || !imageHeight) return;\n\n        // get height min and max\n        var minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\n        var maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT');\n\n        // orientation info\n        var exif = item.getMetadata('exif') || {};\n        var orientation = exif.orientation || -1;\n\n        // get width and height from action, and swap of orientation is incorrect\n        if (orientation >= 5 && orientation <= 8) {\n          var _ref2 = [imageHeight, imageWidth];\n          imageWidth = _ref2[0];\n          imageHeight = _ref2[1];\n        }\n\n        // scale up width and height when we're dealing with an SVG\n        if (!isBitmap(item.file) || root.query('GET_IMAGE_PREVIEW_UPSCALE')) {\n          var scalar = 2048 / imageWidth;\n          imageWidth *= scalar;\n          imageHeight *= scalar;\n        }\n\n        // image aspect ratio\n        var imageAspectRatio = imageHeight / imageWidth;\n\n        // we need the item to get to the crop size\n        var previewAspectRatio =\n          (item.getMetadata('crop') || {}).aspectRatio || imageAspectRatio;\n\n        // preview height range\n        var previewHeightMax = Math.max(\n          minPreviewHeight,\n          Math.min(imageHeight, maxPreviewHeight)\n        );\n\n        var itemWidth = root.rect.element.width;\n        var previewHeight = Math.min(\n          itemWidth * previewAspectRatio,\n          previewHeightMax\n        );\n\n        // request update to panel height\n        root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n          id: item.id,\n          height: previewHeight\n        });\n      };\n\n      var didResizeView = function didResizeView(_ref3) {\n        var root = _ref3.root;\n        // actions in next write operation\n        root.ref.shouldRescale = true;\n      };\n\n      var didUpdateItemMetadata = function didUpdateItemMetadata(_ref4) {\n        var root = _ref4.root,\n          action = _ref4.action;\n        if (action.change.key !== 'crop') return;\n\n        // actions in next write operation\n        root.ref.shouldRescale = true;\n      };\n\n      var didCalculatePreviewSize = function didCalculatePreviewSize(_ref5) {\n        var root = _ref5.root,\n          action = _ref5.action;\n        // remember dimensions\n        root.ref.imageWidth = action.width;\n        root.ref.imageHeight = action.height;\n\n        // actions in next write operation\n        root.ref.shouldRescale = true;\n        root.ref.shouldDrawPreview = true;\n\n        // as image load could take a while and fire when draw loop is resting we need to give it a kick\n        root.dispatch('KICK');\n      };\n\n      // start writing\n      view.registerWriter(\n        createRoute(\n          {\n            DID_RESIZE_ROOT: didResizeView,\n            DID_STOP_RESIZE: didResizeView,\n            DID_LOAD_ITEM: didLoadItem,\n            DID_IMAGE_PREVIEW_CALCULATE_SIZE: didCalculatePreviewSize,\n            DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata\n          },\n\n          function(_ref6) {\n            var root = _ref6.root,\n              props = _ref6.props;\n            // no preview view attached\n            if (!root.ref.imagePreview) return;\n\n            // don't do anything while hidden\n            if (root.rect.element.hidden) return;\n\n            // resize the item panel\n            if (root.ref.shouldRescale) {\n              rescaleItem(root, props);\n              root.ref.shouldRescale = false;\n            }\n\n            if (root.ref.shouldDrawPreview) {\n              // queue till next frame so we're sure the height has been applied this forces the draw image call inside the wrapper view to use the correct height\n              requestAnimationFrame(function() {\n                // this requestAnimationFrame nesting is horrible but it fixes an issue with 100hz displays on Chrome\n                // https://github.com/pqina/filepond-plugin-image-preview/issues/57\n                requestAnimationFrame(function() {\n                  root.dispatch('DID_FINISH_CALCULATE_PREVIEWSIZE', {\n                    id: props.id\n                  });\n                });\n              });\n\n              root.ref.shouldDrawPreview = false;\n            }\n          }\n        )\n      );\n    });\n\n    // expose plugin\n    return {\n      options: {\n        // Enable or disable image preview\n        allowImagePreview: [true, Type.BOOLEAN],\n\n        // filters file items to determine which are shown as preview\n        imagePreviewFilterItem: [\n          function() {\n            return true;\n          },\n          Type.FUNCTION\n        ],\n\n        // Fixed preview height\n        imagePreviewHeight: [null, Type.INT],\n\n        // Min image height\n        imagePreviewMinHeight: [44, Type.INT],\n\n        // Max image height\n        imagePreviewMaxHeight: [256, Type.INT],\n\n        // Max size of preview file for when createImageBitmap is not supported\n        imagePreviewMaxFileSize: [null, Type.INT],\n\n        // The amount of extra pixels added to the image preview to allow comfortable zooming\n        imagePreviewZoomFactor: [2, Type.INT],\n\n        // Should we upscale small images to fit the max bounding box of the preview area\n        imagePreviewUpscale: [false, Type.BOOLEAN],\n\n        // Max size of preview file that we allow to try to instant preview if createImageBitmap is not supported, else image is queued for loading\n        imagePreviewMaxInstantPreviewFileSize: [1000000, Type.INT],\n\n        // Style of the transparancy indicator used behind images\n        imagePreviewTransparencyIndicator: [null, Type.STRING],\n\n        // Enables or disables reading average image color\n        imagePreviewCalculateAverageImageColor: [false, Type.BOOLEAN],\n\n        // Enables or disables the previewing of markup\n        imagePreviewMarkupShow: [true, Type.BOOLEAN],\n\n        // Allows filtering of markup to only show certain shapes\n        imagePreviewMarkupFilter: [\n          function() {\n            return true;\n          },\n          Type.FUNCTION\n        ]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js\n");

/***/ }),

/***/ "./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css":
/*!***********************************************************************************************!*\
  !*** ./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_plugin_image_preview_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./filepond-plugin-image-preview.min.css */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_plugin_image_preview_min_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_plugin_image_preview_min_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQtcGx1Z2luLWltYWdlLXByZXZpZXcvZGlzdC9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0U7QUFDL0UsWUFBNEw7O0FBRTVMOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSw2RkFBRyxDQUFDLDhLQUFPOzs7O0FBSXhCLGlFQUFlLDhLQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQtcGx1Z2luLWltYWdlLXByZXZpZXcvZGlzdC9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy5taW4uY3NzP2EzZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTExLnVzZVsxXSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xMS51c2VbMl0hLi9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy5taW4uY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css\n");

/***/ }),

/***/ "./node_modules/filepond/dist/filepond.js":
/*!************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/*!\n * FilePond 4.32.7\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n     true\n        ? factory(exports)\n        : 0;\n})(this, function(exports) {\n    'use strict';\n\n    var isNode = function isNode(value) {\n        return value instanceof HTMLElement;\n    };\n\n    var createStore = function createStore(initialState) {\n        var queries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var actions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        // internal state\n        var state = Object.assign({}, initialState);\n\n        // contains all actions for next frame, is clear when actions are requested\n        var actionQueue = [];\n        var dispatchQueue = [];\n\n        // returns a duplicate of the current state\n        var getState = function getState() {\n            return Object.assign({}, state);\n        };\n\n        // returns a duplicate of the actions array and clears the actions array\n        var processActionQueue = function processActionQueue() {\n            // create copy of actions queue\n            var queue = [].concat(actionQueue);\n\n            // clear actions queue (we don't want no double actions)\n            actionQueue.length = 0;\n\n            return queue;\n        };\n\n        // processes actions that might block the main UI thread\n        var processDispatchQueue = function processDispatchQueue() {\n            // create copy of actions queue\n            var queue = [].concat(dispatchQueue);\n\n            // clear actions queue (we don't want no double actions)\n            dispatchQueue.length = 0;\n\n            // now dispatch these actions\n            queue.forEach(function(_ref) {\n                var type = _ref.type,\n                    data = _ref.data;\n                dispatch(type, data);\n            });\n        };\n\n        // adds a new action, calls its handler and\n        var dispatch = function dispatch(type, data, isBlocking) {\n            // is blocking action (should never block if document is hidden)\n            if (isBlocking && !document.hidden) {\n                dispatchQueue.push({ type: type, data: data });\n                return;\n            }\n\n            // if this action has a handler, handle the action\n            if (actionHandlers[type]) {\n                actionHandlers[type](data);\n            }\n\n            // now add action\n            actionQueue.push({\n                type: type,\n                data: data,\n            });\n        };\n\n        var query = function query(str) {\n            var _queryHandles;\n            for (\n                var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;\n                _key < _len;\n                _key++\n            ) {\n                args[_key - 1] = arguments[_key];\n            }\n            return queryHandles[str]\n                ? (_queryHandles = queryHandles)[str].apply(_queryHandles, args)\n                : null;\n        };\n\n        var api = {\n            getState: getState,\n            processActionQueue: processActionQueue,\n            processDispatchQueue: processDispatchQueue,\n            dispatch: dispatch,\n            query: query,\n        };\n\n        var queryHandles = {};\n        queries.forEach(function(query) {\n            queryHandles = Object.assign({}, query(state), {}, queryHandles);\n        });\n\n        var actionHandlers = {};\n        actions.forEach(function(action) {\n            actionHandlers = Object.assign({}, action(dispatch, query, state), {}, actionHandlers);\n        });\n\n        return api;\n    };\n\n    var defineProperty = function defineProperty(obj, property, definition) {\n        if (typeof definition === 'function') {\n            obj[property] = definition;\n            return;\n        }\n        Object.defineProperty(obj, property, Object.assign({}, definition));\n    };\n\n    var forin = function forin(obj, cb) {\n        for (var key in obj) {\n            if (!obj.hasOwnProperty(key)) {\n                continue;\n            }\n\n            cb(key, obj[key]);\n        }\n    };\n\n    var createObject = function createObject(definition) {\n        var obj = {};\n        forin(definition, function(property) {\n            defineProperty(obj, property, definition[property]);\n        });\n        return obj;\n    };\n\n    var attr = function attr(node, name) {\n        var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (value === null) {\n            return node.getAttribute(name) || node.hasAttribute(name);\n        }\n        node.setAttribute(name, value);\n    };\n\n    var ns = 'http://www.w3.org/2000/svg';\n    var svgElements = ['svg', 'path']; // only svg elements used\n\n    var isSVGElement = function isSVGElement(tag) {\n        return svgElements.includes(tag);\n    };\n\n    var createElement = function createElement(tag, className) {\n        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (typeof className === 'object') {\n            attributes = className;\n            className = null;\n        }\n        var element = isSVGElement(tag)\n            ? document.createElementNS(ns, tag)\n            : document.createElement(tag);\n        if (className) {\n            if (isSVGElement(tag)) {\n                attr(element, 'class', className);\n            } else {\n                element.className = className;\n            }\n        }\n        forin(attributes, function(name, value) {\n            attr(element, name, value);\n        });\n        return element;\n    };\n\n    var appendChild = function appendChild(parent) {\n        return function(child, index) {\n            if (typeof index !== 'undefined' && parent.children[index]) {\n                parent.insertBefore(child, parent.children[index]);\n            } else {\n                parent.appendChild(child);\n            }\n        };\n    };\n\n    var appendChildView = function appendChildView(parent, childViews) {\n        return function(view, index) {\n            if (typeof index !== 'undefined') {\n                childViews.splice(index, 0, view);\n            } else {\n                childViews.push(view);\n            }\n\n            return view;\n        };\n    };\n\n    var removeChildView = function removeChildView(parent, childViews) {\n        return function(view) {\n            // remove from child views\n            childViews.splice(childViews.indexOf(view), 1);\n\n            // remove the element\n            if (view.element.parentNode) {\n                parent.removeChild(view.element);\n            }\n\n            return view;\n        };\n    };\n\n    var IS_BROWSER = (function() {\n        return typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    })();\n    var isBrowser = function isBrowser() {\n        return IS_BROWSER;\n    };\n\n    var testElement = isBrowser() ? createElement('svg') : {};\n    var getChildCount =\n        'children' in testElement\n            ? function(el) {\n                  return el.children.length;\n              }\n            : function(el) {\n                  return el.childNodes.length;\n              };\n\n    var getViewRect = function getViewRect(elementRect, childViews, offset, scale) {\n        var left = offset[0] || elementRect.left;\n        var top = offset[1] || elementRect.top;\n        var right = left + elementRect.width;\n        var bottom = top + elementRect.height * (scale[1] || 1);\n\n        var rect = {\n            // the rectangle of the element itself\n            element: Object.assign({}, elementRect),\n\n            // the rectangle of the element expanded to contain its children, does not include any margins\n            inner: {\n                left: elementRect.left,\n                top: elementRect.top,\n                right: elementRect.right,\n                bottom: elementRect.bottom,\n            },\n\n            // the rectangle of the element expanded to contain its children including own margin and child margins\n            // margins will be added after we've recalculated the size\n            outer: {\n                left: left,\n                top: top,\n                right: right,\n                bottom: bottom,\n            },\n        };\n\n        // expand rect to fit all child rectangles\n        childViews\n            .filter(function(childView) {\n                return !childView.isRectIgnored();\n            })\n            .map(function(childView) {\n                return childView.rect;\n            })\n            .forEach(function(childViewRect) {\n                expandRect(rect.inner, Object.assign({}, childViewRect.inner));\n                expandRect(rect.outer, Object.assign({}, childViewRect.outer));\n            });\n\n        // calculate inner width and height\n        calculateRectSize(rect.inner);\n\n        // append additional margin (top and left margins are included in top and left automatically)\n        rect.outer.bottom += rect.element.marginBottom;\n        rect.outer.right += rect.element.marginRight;\n\n        // calculate outer width and height\n        calculateRectSize(rect.outer);\n\n        return rect;\n    };\n\n    var expandRect = function expandRect(parent, child) {\n        // adjust for parent offset\n        child.top += parent.top;\n        child.right += parent.left;\n        child.bottom += parent.top;\n        child.left += parent.left;\n\n        if (child.bottom > parent.bottom) {\n            parent.bottom = child.bottom;\n        }\n\n        if (child.right > parent.right) {\n            parent.right = child.right;\n        }\n    };\n\n    var calculateRectSize = function calculateRectSize(rect) {\n        rect.width = rect.right - rect.left;\n        rect.height = rect.bottom - rect.top;\n    };\n\n    var isNumber = function isNumber(value) {\n        return typeof value === 'number';\n    };\n\n    /**\n     * Determines if position is at destination\n     * @param position\n     * @param destination\n     * @param velocity\n     * @param errorMargin\n     * @returns {boolean}\n     */\n    var thereYet = function thereYet(position, destination, velocity) {\n        var errorMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.001;\n        return Math.abs(position - destination) < errorMargin && Math.abs(velocity) < errorMargin;\n    };\n\n    /**\n     * Spring animation\n     */\n    var spring =\n        // default options\n        function spring() // method definition\n        {\n            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                _ref$stiffness = _ref.stiffness,\n                stiffness = _ref$stiffness === void 0 ? 0.5 : _ref$stiffness,\n                _ref$damping = _ref.damping,\n                damping = _ref$damping === void 0 ? 0.75 : _ref$damping,\n                _ref$mass = _ref.mass,\n                mass = _ref$mass === void 0 ? 10 : _ref$mass;\n            var target = null;\n            var position = null;\n            var velocity = 0;\n            var resting = false;\n\n            // updates spring state\n            var interpolate = function interpolate(ts, skipToEndState) {\n                // in rest, don't animate\n                if (resting) return;\n\n                // need at least a target or position to do springy things\n                if (!(isNumber(target) && isNumber(position))) {\n                    resting = true;\n                    velocity = 0;\n                    return;\n                }\n\n                // calculate spring force\n                var f = -(position - target) * stiffness;\n\n                // update velocity by adding force based on mass\n                velocity += f / mass;\n\n                // update position by adding velocity\n                position += velocity;\n\n                // slow down based on amount of damping\n                velocity *= damping;\n\n                // we've arrived if we're near target and our velocity is near zero\n                if (thereYet(position, target, velocity) || skipToEndState) {\n                    position = target;\n                    velocity = 0;\n                    resting = true;\n\n                    // we done\n                    api.onupdate(position);\n                    api.oncomplete(position);\n                } else {\n                    // progress update\n                    api.onupdate(position);\n                }\n            };\n\n            /**\n             * Set new target value\n             * @param value\n             */\n            var setTarget = function setTarget(value) {\n                // if currently has no position, set target and position to this value\n                if (isNumber(value) && !isNumber(position)) {\n                    position = value;\n                }\n\n                // next target value will not be animated to\n                if (target === null) {\n                    target = value;\n                    position = value;\n                }\n\n                // let start moving to target\n                target = value;\n\n                // already at target\n                if (position === target || typeof target === 'undefined') {\n                    // now resting as target is current position, stop moving\n                    resting = true;\n                    velocity = 0;\n\n                    // done!\n                    api.onupdate(position);\n                    api.oncomplete(position);\n\n                    return;\n                }\n\n                resting = false;\n            };\n\n            // need 'api' to call onupdate callback\n            var api = createObject({\n                interpolate: interpolate,\n                target: {\n                    set: setTarget,\n                    get: function get() {\n                        return target;\n                    },\n                },\n\n                resting: {\n                    get: function get() {\n                        return resting;\n                    },\n                },\n\n                onupdate: function onupdate(value) {},\n                oncomplete: function oncomplete(value) {},\n            });\n\n            return api;\n        };\n\n    var easeLinear = function easeLinear(t) {\n        return t;\n    };\n    var easeInOutQuad = function easeInOutQuad(t) {\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n    };\n\n    var tween =\n        // default values\n        function tween() // method definition\n        {\n            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                _ref$duration = _ref.duration,\n                duration = _ref$duration === void 0 ? 500 : _ref$duration,\n                _ref$easing = _ref.easing,\n                easing = _ref$easing === void 0 ? easeInOutQuad : _ref$easing,\n                _ref$delay = _ref.delay,\n                delay = _ref$delay === void 0 ? 0 : _ref$delay;\n            var start = null;\n            var t;\n            var p;\n            var resting = true;\n            var reverse = false;\n            var target = null;\n\n            var interpolate = function interpolate(ts, skipToEndState) {\n                if (resting || target === null) return;\n\n                if (start === null) {\n                    start = ts;\n                }\n\n                if (ts - start < delay) return;\n\n                t = ts - start - delay;\n\n                if (t >= duration || skipToEndState) {\n                    t = 1;\n                    p = reverse ? 0 : 1;\n                    api.onupdate(p * target);\n                    api.oncomplete(p * target);\n                    resting = true;\n                } else {\n                    p = t / duration;\n                    api.onupdate((t >= 0 ? easing(reverse ? 1 - p : p) : 0) * target);\n                }\n            };\n\n            // need 'api' to call onupdate callback\n            var api = createObject({\n                interpolate: interpolate,\n                target: {\n                    get: function get() {\n                        return reverse ? 0 : target;\n                    },\n                    set: function set(value) {\n                        // is initial value\n                        if (target === null) {\n                            target = value;\n                            api.onupdate(value);\n                            api.oncomplete(value);\n                            return;\n                        }\n\n                        // want to tween to a smaller value and have a current value\n                        if (value < target) {\n                            target = 1;\n                            reverse = true;\n                        } else {\n                            // not tweening to a smaller value\n                            reverse = false;\n                            target = value;\n                        }\n\n                        // let's go!\n                        resting = false;\n                        start = null;\n                    },\n                },\n\n                resting: {\n                    get: function get() {\n                        return resting;\n                    },\n                },\n\n                onupdate: function onupdate(value) {},\n                oncomplete: function oncomplete(value) {},\n            });\n\n            return api;\n        };\n\n    var animator = {\n        spring: spring,\n        tween: tween,\n    };\n\n    /*\n                       { type: 'spring', stiffness: .5, damping: .75, mass: 10 };\n                       { translation: { type: 'spring', ... }, ... }\n                       { translation: { x: { type: 'spring', ... } } }\n                      */\n    var createAnimator = function createAnimator(definition, category, property) {\n        // default is single definition\n        // we check if transform is set, if so, we check if property is set\n        var def =\n            definition[category] && typeof definition[category][property] === 'object'\n                ? definition[category][property]\n                : definition[category] || definition;\n\n        var type = typeof def === 'string' ? def : def.type;\n        var props = typeof def === 'object' ? Object.assign({}, def) : {};\n\n        return animator[type] ? animator[type](props) : null;\n    };\n\n    var addGetSet = function addGetSet(keys, obj, props) {\n        var overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        obj = Array.isArray(obj) ? obj : [obj];\n        obj.forEach(function(o) {\n            keys.forEach(function(key) {\n                var name = key;\n                var getter = function getter() {\n                    return props[key];\n                };\n                var setter = function setter(value) {\n                    return (props[key] = value);\n                };\n\n                if (typeof key === 'object') {\n                    name = key.key;\n                    getter = key.getter || getter;\n                    setter = key.setter || setter;\n                }\n\n                if (o[name] && !overwrite) {\n                    return;\n                }\n\n                o[name] = {\n                    get: getter,\n                    set: setter,\n                };\n            });\n        });\n    };\n\n    // add to state,\n    // add getters and setters to internal and external api (if not set)\n    // setup animators\n\n    var animations = function animations(_ref) {\n        var mixinConfig = _ref.mixinConfig,\n            viewProps = _ref.viewProps,\n            viewInternalAPI = _ref.viewInternalAPI,\n            viewExternalAPI = _ref.viewExternalAPI;\n        // initial properties\n        var initialProps = Object.assign({}, viewProps);\n\n        // list of all active animations\n        var animations = [];\n\n        // setup animators\n        forin(mixinConfig, function(property, animation) {\n            var animator = createAnimator(animation);\n            if (!animator) {\n                return;\n            }\n\n            // when the animator updates, update the view state value\n            animator.onupdate = function(value) {\n                viewProps[property] = value;\n            };\n\n            // set animator target\n            animator.target = initialProps[property];\n\n            // when value is set, set the animator target value\n            var prop = {\n                key: property,\n                setter: function setter(value) {\n                    // if already at target, we done!\n                    if (animator.target === value) {\n                        return;\n                    }\n\n                    animator.target = value;\n                },\n                getter: function getter() {\n                    return viewProps[property];\n                },\n            };\n\n            // add getters and setters\n            addGetSet([prop], [viewInternalAPI, viewExternalAPI], viewProps, true);\n\n            // add it to the list for easy updating from the _write method\n            animations.push(animator);\n        });\n\n        // expose internal write api\n        return {\n            write: function write(ts) {\n                var skipToEndState = document.hidden;\n                var resting = true;\n                animations.forEach(function(animation) {\n                    if (!animation.resting) resting = false;\n                    animation.interpolate(ts, skipToEndState);\n                });\n                return resting;\n            },\n            destroy: function destroy() {},\n        };\n    };\n\n    var addEvent = function addEvent(element) {\n        return function(type, fn) {\n            element.addEventListener(type, fn);\n        };\n    };\n\n    var removeEvent = function removeEvent(element) {\n        return function(type, fn) {\n            element.removeEventListener(type, fn);\n        };\n    };\n\n    // mixin\n    var listeners = function listeners(_ref) {\n        var mixinConfig = _ref.mixinConfig,\n            viewProps = _ref.viewProps,\n            viewInternalAPI = _ref.viewInternalAPI,\n            viewExternalAPI = _ref.viewExternalAPI,\n            viewState = _ref.viewState,\n            view = _ref.view;\n        var events = [];\n\n        var add = addEvent(view.element);\n        var remove = removeEvent(view.element);\n\n        viewExternalAPI.on = function(type, fn) {\n            events.push({\n                type: type,\n                fn: fn,\n            });\n\n            add(type, fn);\n        };\n\n        viewExternalAPI.off = function(type, fn) {\n            events.splice(\n                events.findIndex(function(event) {\n                    return event.type === type && event.fn === fn;\n                }),\n                1\n            );\n\n            remove(type, fn);\n        };\n\n        return {\n            write: function write() {\n                // not busy\n                return true;\n            },\n            destroy: function destroy() {\n                events.forEach(function(event) {\n                    remove(event.type, event.fn);\n                });\n            },\n        };\n    };\n\n    // add to external api and link to props\n\n    var apis = function apis(_ref) {\n        var mixinConfig = _ref.mixinConfig,\n            viewProps = _ref.viewProps,\n            viewExternalAPI = _ref.viewExternalAPI;\n        addGetSet(mixinConfig, viewExternalAPI, viewProps);\n    };\n\n    var isDefined = function isDefined(value) {\n        return value != null;\n    };\n\n    // add to state,\n    // add getters and setters to internal and external api (if not set)\n    // set initial state based on props in viewProps\n    // apply as transforms each frame\n\n    var defaults = {\n        opacity: 1,\n        scaleX: 1,\n        scaleY: 1,\n        translateX: 0,\n        translateY: 0,\n        rotateX: 0,\n        rotateY: 0,\n        rotateZ: 0,\n        originX: 0,\n        originY: 0,\n    };\n\n    var styles = function styles(_ref) {\n        var mixinConfig = _ref.mixinConfig,\n            viewProps = _ref.viewProps,\n            viewInternalAPI = _ref.viewInternalAPI,\n            viewExternalAPI = _ref.viewExternalAPI,\n            view = _ref.view;\n        // initial props\n        var initialProps = Object.assign({}, viewProps);\n\n        // current props\n        var currentProps = {};\n\n        // we will add those properties to the external API and link them to the viewState\n        addGetSet(mixinConfig, [viewInternalAPI, viewExternalAPI], viewProps);\n\n        // override rect on internal and external rect getter so it takes in account transforms\n        var getOffset = function getOffset() {\n            return [viewProps['translateX'] || 0, viewProps['translateY'] || 0];\n        };\n\n        var getScale = function getScale() {\n            return [viewProps['scaleX'] || 0, viewProps['scaleY'] || 0];\n        };\n        var getRect = function getRect() {\n            return view.rect\n                ? getViewRect(view.rect, view.childViews, getOffset(), getScale())\n                : null;\n        };\n        viewInternalAPI.rect = { get: getRect };\n        viewExternalAPI.rect = { get: getRect };\n\n        // apply view props\n        mixinConfig.forEach(function(key) {\n            viewProps[key] =\n                typeof initialProps[key] === 'undefined' ? defaults[key] : initialProps[key];\n        });\n\n        // expose api\n        return {\n            write: function write() {\n                // see if props have changed\n                if (!propsHaveChanged(currentProps, viewProps)) {\n                    return;\n                }\n\n                // moves element to correct position on screen\n                applyStyles(view.element, viewProps);\n\n                // store new transforms\n                Object.assign(currentProps, Object.assign({}, viewProps));\n\n                // no longer busy\n                return true;\n            },\n            destroy: function destroy() {},\n        };\n    };\n\n    var propsHaveChanged = function propsHaveChanged(currentProps, newProps) {\n        // different amount of keys\n        if (Object.keys(currentProps).length !== Object.keys(newProps).length) {\n            return true;\n        }\n\n        // lets analyze the individual props\n        for (var prop in newProps) {\n            if (newProps[prop] !== currentProps[prop]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    var applyStyles = function applyStyles(element, _ref2) {\n        var opacity = _ref2.opacity,\n            perspective = _ref2.perspective,\n            translateX = _ref2.translateX,\n            translateY = _ref2.translateY,\n            scaleX = _ref2.scaleX,\n            scaleY = _ref2.scaleY,\n            rotateX = _ref2.rotateX,\n            rotateY = _ref2.rotateY,\n            rotateZ = _ref2.rotateZ,\n            originX = _ref2.originX,\n            originY = _ref2.originY,\n            width = _ref2.width,\n            height = _ref2.height;\n\n        var transforms = '';\n        var styles = '';\n\n        // handle transform origin\n        if (isDefined(originX) || isDefined(originY)) {\n            styles += 'transform-origin: ' + (originX || 0) + 'px ' + (originY || 0) + 'px;';\n        }\n\n        // transform order is relevant\n        // 0. perspective\n        if (isDefined(perspective)) {\n            transforms += 'perspective(' + perspective + 'px) ';\n        }\n\n        // 1. translate\n        if (isDefined(translateX) || isDefined(translateY)) {\n            transforms +=\n                'translate3d(' + (translateX || 0) + 'px, ' + (translateY || 0) + 'px, 0) ';\n        }\n\n        // 2. scale\n        if (isDefined(scaleX) || isDefined(scaleY)) {\n            transforms +=\n                'scale3d(' +\n                (isDefined(scaleX) ? scaleX : 1) +\n                ', ' +\n                (isDefined(scaleY) ? scaleY : 1) +\n                ', 1) ';\n        }\n\n        // 3. rotate\n        if (isDefined(rotateZ)) {\n            transforms += 'rotateZ(' + rotateZ + 'rad) ';\n        }\n\n        if (isDefined(rotateX)) {\n            transforms += 'rotateX(' + rotateX + 'rad) ';\n        }\n\n        if (isDefined(rotateY)) {\n            transforms += 'rotateY(' + rotateY + 'rad) ';\n        }\n\n        // add transforms\n        if (transforms.length) {\n            styles += 'transform:' + transforms + ';';\n        }\n\n        // add opacity\n        if (isDefined(opacity)) {\n            styles += 'opacity:' + opacity + ';';\n\n            // if we reach zero, we make the element inaccessible\n            if (opacity === 0) {\n                styles += 'visibility:hidden;';\n            }\n\n            // if we're below 100% opacity this element can't be clicked\n            if (opacity < 1) {\n                styles += 'pointer-events:none;';\n            }\n        }\n\n        // add height\n        if (isDefined(height)) {\n            styles += 'height:' + height + 'px;';\n        }\n\n        // add width\n        if (isDefined(width)) {\n            styles += 'width:' + width + 'px;';\n        }\n\n        // apply styles\n        var elementCurrentStyle = element.elementCurrentStyle || '';\n\n        // if new styles does not match current styles, lets update!\n        if (styles.length !== elementCurrentStyle.length || styles !== elementCurrentStyle) {\n            element.style.cssText = styles;\n            // store current styles so we can compare them to new styles later on\n            // _not_ getting the style value is faster\n            element.elementCurrentStyle = styles;\n        }\n    };\n\n    var Mixins = {\n        styles: styles,\n        listeners: listeners,\n        animations: animations,\n        apis: apis,\n    };\n\n    var updateRect = function updateRect() {\n        var rect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (!element.layoutCalculated) {\n            rect.paddingTop = parseInt(style.paddingTop, 10) || 0;\n            rect.marginTop = parseInt(style.marginTop, 10) || 0;\n            rect.marginRight = parseInt(style.marginRight, 10) || 0;\n            rect.marginBottom = parseInt(style.marginBottom, 10) || 0;\n            rect.marginLeft = parseInt(style.marginLeft, 10) || 0;\n            element.layoutCalculated = true;\n        }\n\n        rect.left = element.offsetLeft || 0;\n        rect.top = element.offsetTop || 0;\n        rect.width = element.offsetWidth || 0;\n        rect.height = element.offsetHeight || 0;\n\n        rect.right = rect.left + rect.width;\n        rect.bottom = rect.top + rect.height;\n\n        rect.scrollTop = element.scrollTop;\n\n        rect.hidden = element.offsetParent === null;\n\n        return rect;\n    };\n\n    var createView =\n        // default view definition\n        function createView() {\n            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                _ref$tag = _ref.tag,\n                tag = _ref$tag === void 0 ? 'div' : _ref$tag,\n                _ref$name = _ref.name,\n                name = _ref$name === void 0 ? null : _ref$name,\n                _ref$attributes = _ref.attributes,\n                attributes = _ref$attributes === void 0 ? {} : _ref$attributes,\n                _ref$read = _ref.read,\n                read = _ref$read === void 0 ? function() {} : _ref$read,\n                _ref$write = _ref.write,\n                write = _ref$write === void 0 ? function() {} : _ref$write,\n                _ref$create = _ref.create,\n                create = _ref$create === void 0 ? function() {} : _ref$create,\n                _ref$destroy = _ref.destroy,\n                destroy = _ref$destroy === void 0 ? function() {} : _ref$destroy,\n                _ref$filterFrameActio = _ref.filterFrameActionsForChild,\n                filterFrameActionsForChild =\n                    _ref$filterFrameActio === void 0\n                        ? function(child, actions) {\n                              return actions;\n                          }\n                        : _ref$filterFrameActio,\n                _ref$didCreateView = _ref.didCreateView,\n                didCreateView = _ref$didCreateView === void 0 ? function() {} : _ref$didCreateView,\n                _ref$didWriteView = _ref.didWriteView,\n                didWriteView = _ref$didWriteView === void 0 ? function() {} : _ref$didWriteView,\n                _ref$ignoreRect = _ref.ignoreRect,\n                ignoreRect = _ref$ignoreRect === void 0 ? false : _ref$ignoreRect,\n                _ref$ignoreRectUpdate = _ref.ignoreRectUpdate,\n                ignoreRectUpdate = _ref$ignoreRectUpdate === void 0 ? false : _ref$ignoreRectUpdate,\n                _ref$mixins = _ref.mixins,\n                mixins = _ref$mixins === void 0 ? [] : _ref$mixins;\n            return function(\n                // each view requires reference to store\n                store\n            ) {\n                var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                // root element should not be changed\n                var element = createElement(tag, 'filepond--' + name, attributes);\n\n                // style reference should also not be changed\n                var style = window.getComputedStyle(element, null);\n\n                // element rectangle\n                var rect = updateRect();\n                var frameRect = null;\n\n                // rest state\n                var isResting = false;\n\n                // pretty self explanatory\n                var childViews = [];\n\n                // loaded mixins\n                var activeMixins = [];\n\n                // references to created children\n                var ref = {};\n\n                // state used for each instance\n                var state = {};\n\n                // list of writers that will be called to update this view\n                var writers = [\n                    write, // default writer\n                ];\n\n                var readers = [\n                    read, // default reader\n                ];\n\n                var destroyers = [\n                    destroy, // default destroy\n                ];\n\n                // core view methods\n                var getElement = function getElement() {\n                    return element;\n                };\n                var getChildViews = function getChildViews() {\n                    return childViews.concat();\n                };\n                var getReference = function getReference() {\n                    return ref;\n                };\n                var createChildView = function createChildView(store) {\n                    return function(view, props) {\n                        return view(store, props);\n                    };\n                };\n                var getRect = function getRect() {\n                    if (frameRect) {\n                        return frameRect;\n                    }\n                    frameRect = getViewRect(rect, childViews, [0, 0], [1, 1]);\n                    return frameRect;\n                };\n                var getStyle = function getStyle() {\n                    return style;\n                };\n\n                /**\n                 * Read data from DOM\n                 * @private\n                 */\n                var _read = function _read() {\n                    frameRect = null;\n\n                    // read child views\n                    childViews.forEach(function(child) {\n                        return child._read();\n                    });\n\n                    var shouldUpdate = !(ignoreRectUpdate && rect.width && rect.height);\n                    if (shouldUpdate) {\n                        updateRect(rect, element, style);\n                    }\n\n                    // readers\n                    var api = { root: internalAPI, props: props, rect: rect };\n                    readers.forEach(function(reader) {\n                        return reader(api);\n                    });\n                };\n\n                /**\n                 * Write data to DOM\n                 * @private\n                 */\n                var _write = function _write(ts, frameActions, shouldOptimize) {\n                    // if no actions, we assume that the view is resting\n                    var resting = frameActions.length === 0;\n\n                    // writers\n                    writers.forEach(function(writer) {\n                        var writerResting = writer({\n                            props: props,\n                            root: internalAPI,\n                            actions: frameActions,\n                            timestamp: ts,\n                            shouldOptimize: shouldOptimize,\n                        });\n\n                        if (writerResting === false) {\n                            resting = false;\n                        }\n                    });\n\n                    // run mixins\n                    activeMixins.forEach(function(mixin) {\n                        // if one of the mixins is still busy after write operation, we are not resting\n                        var mixinResting = mixin.write(ts);\n                        if (mixinResting === false) {\n                            resting = false;\n                        }\n                    });\n\n                    // updates child views that are currently attached to the DOM\n                    childViews\n                        .filter(function(child) {\n                            return !!child.element.parentNode;\n                        })\n                        .forEach(function(child) {\n                            // if a child view is not resting, we are not resting\n                            var childResting = child._write(\n                                ts,\n                                filterFrameActionsForChild(child, frameActions),\n                                shouldOptimize\n                            );\n\n                            if (!childResting) {\n                                resting = false;\n                            }\n                        });\n\n                    // append new elements to DOM and update those\n                    childViews\n                        //.filter(child => !child.element.parentNode)\n                        .forEach(function(child, index) {\n                            // skip\n                            if (child.element.parentNode) {\n                                return;\n                            }\n\n                            // append to DOM\n                            internalAPI.appendChild(child.element, index);\n\n                            // call read (need to know the size of these elements)\n                            child._read();\n\n                            // re-call write\n                            child._write(\n                                ts,\n                                filterFrameActionsForChild(child, frameActions),\n                                shouldOptimize\n                            );\n\n                            // we just added somthing to the dom, no rest\n                            resting = false;\n                        });\n\n                    // update resting state\n                    isResting = resting;\n\n                    didWriteView({\n                        props: props,\n                        root: internalAPI,\n                        actions: frameActions,\n                        timestamp: ts,\n                    });\n\n                    // let parent know if we are resting\n                    return resting;\n                };\n\n                var _destroy = function _destroy() {\n                    activeMixins.forEach(function(mixin) {\n                        return mixin.destroy();\n                    });\n                    destroyers.forEach(function(destroyer) {\n                        destroyer({ root: internalAPI, props: props });\n                    });\n                    childViews.forEach(function(child) {\n                        return child._destroy();\n                    });\n                };\n\n                // sharedAPI\n                var sharedAPIDefinition = {\n                    element: {\n                        get: getElement,\n                    },\n\n                    style: {\n                        get: getStyle,\n                    },\n\n                    childViews: {\n                        get: getChildViews,\n                    },\n                };\n\n                // private API definition\n                var internalAPIDefinition = Object.assign({}, sharedAPIDefinition, {\n                    rect: {\n                        get: getRect,\n                    },\n\n                    // access to custom children references\n                    ref: {\n                        get: getReference,\n                    },\n\n                    // dom modifiers\n                    is: function is(needle) {\n                        return name === needle;\n                    },\n                    appendChild: appendChild(element),\n                    createChildView: createChildView(store),\n                    linkView: function linkView(view) {\n                        childViews.push(view);\n                        return view;\n                    },\n                    unlinkView: function unlinkView(view) {\n                        childViews.splice(childViews.indexOf(view), 1);\n                    },\n                    appendChildView: appendChildView(element, childViews),\n                    removeChildView: removeChildView(element, childViews),\n                    registerWriter: function registerWriter(writer) {\n                        return writers.push(writer);\n                    },\n                    registerReader: function registerReader(reader) {\n                        return readers.push(reader);\n                    },\n                    registerDestroyer: function registerDestroyer(destroyer) {\n                        return destroyers.push(destroyer);\n                    },\n                    invalidateLayout: function invalidateLayout() {\n                        return (element.layoutCalculated = false);\n                    },\n\n                    // access to data store\n                    dispatch: store.dispatch,\n                    query: store.query,\n                });\n\n                // public view API methods\n                var externalAPIDefinition = {\n                    element: {\n                        get: getElement,\n                    },\n\n                    childViews: {\n                        get: getChildViews,\n                    },\n\n                    rect: {\n                        get: getRect,\n                    },\n\n                    resting: {\n                        get: function get() {\n                            return isResting;\n                        },\n                    },\n\n                    isRectIgnored: function isRectIgnored() {\n                        return ignoreRect;\n                    },\n                    _read: _read,\n                    _write: _write,\n                    _destroy: _destroy,\n                };\n\n                // mixin API methods\n                var mixinAPIDefinition = Object.assign({}, sharedAPIDefinition, {\n                    rect: {\n                        get: function get() {\n                            return rect;\n                        },\n                    },\n                });\n\n                // add mixin functionality\n                Object.keys(mixins)\n                    .sort(function(a, b) {\n                        // move styles to the back of the mixin list (so adjustments of other mixins are applied to the props correctly)\n                        if (a === 'styles') {\n                            return 1;\n                        } else if (b === 'styles') {\n                            return -1;\n                        }\n                        return 0;\n                    })\n                    .forEach(function(key) {\n                        var mixinAPI = Mixins[key]({\n                            mixinConfig: mixins[key],\n                            viewProps: props,\n                            viewState: state,\n                            viewInternalAPI: internalAPIDefinition,\n                            viewExternalAPI: externalAPIDefinition,\n                            view: createObject(mixinAPIDefinition),\n                        });\n\n                        if (mixinAPI) {\n                            activeMixins.push(mixinAPI);\n                        }\n                    });\n\n                // construct private api\n                var internalAPI = createObject(internalAPIDefinition);\n\n                // create the view\n                create({\n                    root: internalAPI,\n                    props: props,\n                });\n\n                // append created child views to root node\n                var childCount = getChildCount(element); // need to know the current child count so appending happens in correct order\n                childViews.forEach(function(child, index) {\n                    internalAPI.appendChild(child.element, childCount + index);\n                });\n\n                // call did create\n                didCreateView(internalAPI);\n\n                // expose public api\n                return createObject(externalAPIDefinition);\n            };\n        };\n\n    var createPainter = function createPainter(read, write) {\n        var fps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n\n        var name = '__framePainter';\n\n        // set global painter\n        if (window[name]) {\n            window[name].readers.push(read);\n            window[name].writers.push(write);\n            return;\n        }\n\n        window[name] = {\n            readers: [read],\n            writers: [write],\n        };\n\n        var painter = window[name];\n\n        var interval = 1000 / fps;\n        var last = null;\n        var id = null;\n        var requestTick = null;\n        var cancelTick = null;\n\n        var setTimerType = function setTimerType() {\n            if (document.hidden) {\n                requestTick = function requestTick() {\n                    return window.setTimeout(function() {\n                        return tick(performance.now());\n                    }, interval);\n                };\n                cancelTick = function cancelTick() {\n                    return window.clearTimeout(id);\n                };\n            } else {\n                requestTick = function requestTick() {\n                    return window.requestAnimationFrame(tick);\n                };\n                cancelTick = function cancelTick() {\n                    return window.cancelAnimationFrame(id);\n                };\n            }\n        };\n\n        document.addEventListener('visibilitychange', function() {\n            if (cancelTick) cancelTick();\n            setTimerType();\n            tick(performance.now());\n        });\n\n        var tick = function tick(ts) {\n            // queue next tick\n            id = requestTick(tick);\n\n            // limit fps\n            if (!last) {\n                last = ts;\n            }\n\n            var delta = ts - last;\n\n            if (delta <= interval) {\n                // skip frame\n                return;\n            }\n\n            // align next frame\n            last = ts - (delta % interval);\n\n            // update view\n            painter.readers.forEach(function(read) {\n                return read();\n            });\n            painter.writers.forEach(function(write) {\n                return write(ts);\n            });\n        };\n\n        setTimerType();\n        tick(performance.now());\n\n        return {\n            pause: function pause() {\n                cancelTick(id);\n            },\n        };\n    };\n\n    var createRoute = function createRoute(routes, fn) {\n        return function(_ref) {\n            var root = _ref.root,\n                props = _ref.props,\n                _ref$actions = _ref.actions,\n                actions = _ref$actions === void 0 ? [] : _ref$actions,\n                timestamp = _ref.timestamp,\n                shouldOptimize = _ref.shouldOptimize;\n            actions\n                .filter(function(action) {\n                    return routes[action.type];\n                })\n                .forEach(function(action) {\n                    return routes[action.type]({\n                        root: root,\n                        props: props,\n                        action: action.data,\n                        timestamp: timestamp,\n                        shouldOptimize: shouldOptimize,\n                    });\n                });\n\n            if (fn) {\n                fn({\n                    root: root,\n                    props: props,\n                    actions: actions,\n                    timestamp: timestamp,\n                    shouldOptimize: shouldOptimize,\n                });\n            }\n        };\n    };\n\n    var insertBefore = function insertBefore(newNode, referenceNode) {\n        return referenceNode.parentNode.insertBefore(newNode, referenceNode);\n    };\n\n    var insertAfter = function insertAfter(newNode, referenceNode) {\n        return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n    };\n\n    var isArray = function isArray(value) {\n        return Array.isArray(value);\n    };\n\n    var isEmpty = function isEmpty(value) {\n        return value == null;\n    };\n\n    var trim = function trim(str) {\n        return str.trim();\n    };\n\n    var toString = function toString(value) {\n        return '' + value;\n    };\n\n    var toArray = function toArray(value) {\n        var splitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n        if (isEmpty(value)) {\n            return [];\n        }\n        if (isArray(value)) {\n            return value;\n        }\n        return toString(value)\n            .split(splitter)\n            .map(trim)\n            .filter(function(str) {\n                return str.length;\n            });\n    };\n\n    var isBoolean = function isBoolean(value) {\n        return typeof value === 'boolean';\n    };\n\n    var toBoolean = function toBoolean(value) {\n        return isBoolean(value) ? value : value === 'true';\n    };\n\n    var isString = function isString(value) {\n        return typeof value === 'string';\n    };\n\n    var toNumber = function toNumber(value) {\n        return isNumber(value)\n            ? value\n            : isString(value)\n            ? toString(value).replace(/[a-z]+/gi, '')\n            : 0;\n    };\n\n    var toInt = function toInt(value) {\n        return parseInt(toNumber(value), 10);\n    };\n\n    var toFloat = function toFloat(value) {\n        return parseFloat(toNumber(value));\n    };\n\n    var isInt = function isInt(value) {\n        return isNumber(value) && isFinite(value) && Math.floor(value) === value;\n    };\n\n    var toBytes = function toBytes(value) {\n        var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n        // is in bytes\n        if (isInt(value)) {\n            return value;\n        }\n\n        // is natural file size\n        var naturalFileSize = toString(value).trim();\n\n        // if is value in megabytes\n        if (/MB$/i.test(naturalFileSize)) {\n            naturalFileSize = naturalFileSize.replace(/MB$i/, '').trim();\n            return toInt(naturalFileSize) * base * base;\n        }\n\n        // if is value in kilobytes\n        if (/KB/i.test(naturalFileSize)) {\n            naturalFileSize = naturalFileSize.replace(/KB$i/, '').trim();\n            return toInt(naturalFileSize) * base;\n        }\n\n        return toInt(naturalFileSize);\n    };\n\n    var isFunction = function isFunction(value) {\n        return typeof value === 'function';\n    };\n\n    var toFunctionReference = function toFunctionReference(string) {\n        var ref = self;\n        var levels = string.split('.');\n        var level = null;\n        while ((level = levels.shift())) {\n            ref = ref[level];\n            if (!ref) {\n                return null;\n            }\n        }\n        return ref;\n    };\n\n    var methods = {\n        process: 'POST',\n        patch: 'PATCH',\n        revert: 'DELETE',\n        fetch: 'GET',\n        restore: 'GET',\n        load: 'GET',\n    };\n\n    var createServerAPI = function createServerAPI(outline) {\n        var api = {};\n\n        api.url = isString(outline) ? outline : outline.url || '';\n        api.timeout = outline.timeout ? parseInt(outline.timeout, 10) : 0;\n        api.headers = outline.headers ? outline.headers : {};\n\n        forin(methods, function(key) {\n            api[key] = createAction(key, outline[key], methods[key], api.timeout, api.headers);\n        });\n\n        // remove process if no url or process on outline\n        api.process = outline.process || isString(outline) || outline.url ? api.process : null;\n\n        // special treatment for remove\n        api.remove = outline.remove || null;\n\n        // remove generic headers from api object\n        delete api.headers;\n\n        return api;\n    };\n\n    var createAction = function createAction(name, outline, method, timeout, headers) {\n        // is explicitely set to null so disable\n        if (outline === null) {\n            return null;\n        }\n\n        // if is custom function, done! Dev handles everything.\n        if (typeof outline === 'function') {\n            return outline;\n        }\n\n        // build action object\n        var action = {\n            url: method === 'GET' || method === 'PATCH' ? '?' + name + '=' : '',\n            method: method,\n            headers: headers,\n            withCredentials: false,\n            timeout: timeout,\n            onload: null,\n            ondata: null,\n            onerror: null,\n        };\n\n        // is a single url\n        if (isString(outline)) {\n            action.url = outline;\n            return action;\n        }\n\n        // overwrite\n        Object.assign(action, outline);\n\n        // see if should reformat headers;\n        if (isString(action.headers)) {\n            var parts = action.headers.split(/:(.+)/);\n            action.headers = {\n                header: parts[0],\n                value: parts[1],\n            };\n        }\n\n        // if is bool withCredentials\n        action.withCredentials = toBoolean(action.withCredentials);\n\n        return action;\n    };\n\n    var toServerAPI = function toServerAPI(value) {\n        return createServerAPI(value);\n    };\n\n    var isNull = function isNull(value) {\n        return value === null;\n    };\n\n    var isObject = function isObject(value) {\n        return typeof value === 'object' && value !== null;\n    };\n\n    var isAPI = function isAPI(value) {\n        return (\n            isObject(value) &&\n            isString(value.url) &&\n            isObject(value.process) &&\n            isObject(value.revert) &&\n            isObject(value.restore) &&\n            isObject(value.fetch)\n        );\n    };\n\n    var getType = function getType(value) {\n        if (isArray(value)) {\n            return 'array';\n        }\n\n        if (isNull(value)) {\n            return 'null';\n        }\n\n        if (isInt(value)) {\n            return 'int';\n        }\n\n        if (/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(value)) {\n            return 'bytes';\n        }\n\n        if (isAPI(value)) {\n            return 'api';\n        }\n\n        return typeof value;\n    };\n\n    var replaceSingleQuotes = function replaceSingleQuotes(str) {\n        return str\n            .replace(/{\\s*'/g, '{\"')\n            .replace(/'\\s*}/g, '\"}')\n            .replace(/'\\s*:/g, '\":')\n            .replace(/:\\s*'/g, ':\"')\n            .replace(/,\\s*'/g, ',\"')\n            .replace(/'\\s*,/g, '\",');\n    };\n\n    var conversionTable = {\n        array: toArray,\n        boolean: toBoolean,\n        int: function int(value) {\n            return getType(value) === 'bytes' ? toBytes(value) : toInt(value);\n        },\n        number: toFloat,\n        float: toFloat,\n        bytes: toBytes,\n        string: function string(value) {\n            return isFunction(value) ? value : toString(value);\n        },\n        function: function _function(value) {\n            return toFunctionReference(value);\n        },\n        serverapi: toServerAPI,\n        object: function object(value) {\n            try {\n                return JSON.parse(replaceSingleQuotes(value));\n            } catch (e) {\n                return null;\n            }\n        },\n    };\n\n    var convertTo = function convertTo(value, type) {\n        return conversionTable[type](value);\n    };\n\n    var getValueByType = function getValueByType(newValue, defaultValue, valueType) {\n        // can always assign default value\n        if (newValue === defaultValue) {\n            return newValue;\n        }\n\n        // get the type of the new value\n        var newValueType = getType(newValue);\n\n        // is valid type?\n        if (newValueType !== valueType) {\n            // is string input, let's attempt to convert\n            var convertedValue = convertTo(newValue, valueType);\n\n            // what is the type now\n            newValueType = getType(convertedValue);\n\n            // no valid conversions found\n            if (convertedValue === null) {\n                throw 'Trying to assign value with incorrect type to \"' +\n                    option +\n                    '\", allowed type: \"' +\n                    valueType +\n                    '\"';\n            } else {\n                newValue = convertedValue;\n            }\n        }\n\n        // assign new value\n        return newValue;\n    };\n\n    var createOption = function createOption(defaultValue, valueType) {\n        var currentValue = defaultValue;\n        return {\n            enumerable: true,\n            get: function get() {\n                return currentValue;\n            },\n            set: function set(newValue) {\n                currentValue = getValueByType(newValue, defaultValue, valueType);\n            },\n        };\n    };\n\n    var createOptions = function createOptions(options) {\n        var obj = {};\n        forin(options, function(prop) {\n            var optionDefinition = options[prop];\n            obj[prop] = createOption(optionDefinition[0], optionDefinition[1]);\n        });\n        return createObject(obj);\n    };\n\n    var createInitialState = function createInitialState(options) {\n        return {\n            // model\n            items: [],\n\n            // timeout used for calling update items\n            listUpdateTimeout: null,\n\n            // timeout used for stacking metadata updates\n            itemUpdateTimeout: null,\n\n            // queue of items waiting to be processed\n            processingQueue: [],\n\n            // options\n            options: createOptions(options),\n        };\n    };\n\n    var fromCamels = function fromCamels(string) {\n        var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n        return string\n            .split(/(?=[A-Z])/)\n            .map(function(part) {\n                return part.toLowerCase();\n            })\n            .join(separator);\n    };\n\n    var createOptionAPI = function createOptionAPI(store, options) {\n        var obj = {};\n        forin(options, function(key) {\n            obj[key] = {\n                get: function get() {\n                    return store.getState().options[key];\n                },\n                set: function set(value) {\n                    store.dispatch('SET_' + fromCamels(key, '_').toUpperCase(), {\n                        value: value,\n                    });\n                },\n            };\n        });\n        return obj;\n    };\n\n    var createOptionActions = function createOptionActions(options) {\n        return function(dispatch, query, state) {\n            var obj = {};\n            forin(options, function(key) {\n                var name = fromCamels(key, '_').toUpperCase();\n\n                obj['SET_' + name] = function(action) {\n                    try {\n                        state.options[key] = action.value;\n                    } catch (e) {} // nope, failed\n\n                    // we successfully set the value of this option\n                    dispatch('DID_SET_' + name, { value: state.options[key] });\n                };\n            });\n            return obj;\n        };\n    };\n\n    var createOptionQueries = function createOptionQueries(options) {\n        return function(state) {\n            var obj = {};\n            forin(options, function(key) {\n                obj['GET_' + fromCamels(key, '_').toUpperCase()] = function(action) {\n                    return state.options[key];\n                };\n            });\n            return obj;\n        };\n    };\n\n    var InteractionMethod = {\n        API: 1,\n        DROP: 2,\n        BROWSE: 3,\n        PASTE: 4,\n        NONE: 5,\n    };\n\n    var getUniqueId = function getUniqueId() {\n        return Math.random()\n            .toString(36)\n            .substring(2, 11);\n    };\n\n    function _typeof(obj) {\n        if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n            _typeof = function(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof = function(obj) {\n                return obj &&\n                    typeof Symbol === 'function' &&\n                    obj.constructor === Symbol &&\n                    obj !== Symbol.prototype\n                    ? 'symbol'\n                    : typeof obj;\n            };\n        }\n\n        return _typeof(obj);\n    }\n\n    var REACT_ELEMENT_TYPE;\n\n    function _jsx(type, props, key, children) {\n        if (!REACT_ELEMENT_TYPE) {\n            REACT_ELEMENT_TYPE =\n                (typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element')) ||\n                0xeac7;\n        }\n\n        var defaultProps = type && type.defaultProps;\n        var childrenLength = arguments.length - 3;\n\n        if (!props && childrenLength !== 0) {\n            props = {\n                children: void 0,\n            };\n        }\n\n        if (props && defaultProps) {\n            for (var propName in defaultProps) {\n                if (props[propName] === void 0) {\n                    props[propName] = defaultProps[propName];\n                }\n            }\n        } else if (!props) {\n            props = defaultProps || {};\n        }\n\n        if (childrenLength === 1) {\n            props.children = children;\n        } else if (childrenLength > 1) {\n            var childArray = new Array(childrenLength);\n\n            for (var i = 0; i < childrenLength; i++) {\n                childArray[i] = arguments[i + 3];\n            }\n\n            props.children = childArray;\n        }\n\n        return {\n            $$typeof: REACT_ELEMENT_TYPE,\n            type: type,\n            key: key === undefined ? null : '' + key,\n            ref: null,\n            props: props,\n            _owner: null,\n        };\n    }\n\n    function _asyncIterator(iterable) {\n        var method;\n\n        if (typeof Symbol !== 'undefined') {\n            if (Symbol.asyncIterator) {\n                method = iterable[Symbol.asyncIterator];\n                if (method != null) return method.call(iterable);\n            }\n\n            if (Symbol.iterator) {\n                method = iterable[Symbol.iterator];\n                if (method != null) return method.call(iterable);\n            }\n        }\n\n        throw new TypeError('Object is not async iterable');\n    }\n\n    function _AwaitValue(value) {\n        this.wrapped = value;\n    }\n\n    function _AsyncGenerator(gen) {\n        var front, back;\n\n        function send(key, arg) {\n            return new Promise(function(resolve, reject) {\n                var request = {\n                    key: key,\n                    arg: arg,\n                    resolve: resolve,\n                    reject: reject,\n                    next: null,\n                };\n\n                if (back) {\n                    back = back.next = request;\n                } else {\n                    front = back = request;\n                    resume(key, arg);\n                }\n            });\n        }\n\n        function resume(key, arg) {\n            try {\n                var result = gen[key](arg);\n                var value = result.value;\n                var wrappedAwait = value instanceof _AwaitValue;\n                Promise.resolve(wrappedAwait ? value.wrapped : value).then(\n                    function(arg) {\n                        if (wrappedAwait) {\n                            resume('next', arg);\n                            return;\n                        }\n\n                        settle(result.done ? 'return' : 'normal', arg);\n                    },\n                    function(err) {\n                        resume('throw', err);\n                    }\n                );\n            } catch (err) {\n                settle('throw', err);\n            }\n        }\n\n        function settle(type, value) {\n            switch (type) {\n                case 'return':\n                    front.resolve({\n                        value: value,\n                        done: true,\n                    });\n                    break;\n\n                case 'throw':\n                    front.reject(value);\n                    break;\n\n                default:\n                    front.resolve({\n                        value: value,\n                        done: false,\n                    });\n                    break;\n            }\n\n            front = front.next;\n\n            if (front) {\n                resume(front.key, front.arg);\n            } else {\n                back = null;\n            }\n        }\n\n        this._invoke = send;\n\n        if (typeof gen.return !== 'function') {\n            this.return = undefined;\n        }\n    }\n\n    if (typeof Symbol === 'function' && Symbol.asyncIterator) {\n        _AsyncGenerator.prototype[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n\n    _AsyncGenerator.prototype.next = function(arg) {\n        return this._invoke('next', arg);\n    };\n\n    _AsyncGenerator.prototype.throw = function(arg) {\n        return this._invoke('throw', arg);\n    };\n\n    _AsyncGenerator.prototype.return = function(arg) {\n        return this._invoke('return', arg);\n    };\n\n    function _wrapAsyncGenerator(fn) {\n        return function() {\n            return new _AsyncGenerator(fn.apply(this, arguments));\n        };\n    }\n\n    function _awaitAsyncGenerator(value) {\n        return new _AwaitValue(value);\n    }\n\n    function _asyncGeneratorDelegate(inner, awaitWrap) {\n        var iter = {},\n            waiting = false;\n\n        function pump(key, value) {\n            waiting = true;\n            value = new Promise(function(resolve) {\n                resolve(inner[key](value));\n            });\n            return {\n                done: false,\n                value: awaitWrap(value),\n            };\n        }\n\n        if (typeof Symbol === 'function' && Symbol.iterator) {\n            iter[Symbol.iterator] = function() {\n                return this;\n            };\n        }\n\n        iter.next = function(value) {\n            if (waiting) {\n                waiting = false;\n                return value;\n            }\n\n            return pump('next', value);\n        };\n\n        if (typeof inner.throw === 'function') {\n            iter.throw = function(value) {\n                if (waiting) {\n                    waiting = false;\n                    throw value;\n                }\n\n                return pump('throw', value);\n            };\n        }\n\n        if (typeof inner.return === 'function') {\n            iter.return = function(value) {\n                return pump('return', value);\n            };\n        }\n\n        return iter;\n    }\n\n    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n        try {\n            var info = gen[key](arg);\n            var value = info.value;\n        } catch (error) {\n            reject(error);\n            return;\n        }\n\n        if (info.done) {\n            resolve(value);\n        } else {\n            Promise.resolve(value).then(_next, _throw);\n        }\n    }\n\n    function _asyncToGenerator(fn) {\n        return function() {\n            var self = this,\n                args = arguments;\n            return new Promise(function(resolve, reject) {\n                var gen = fn.apply(self, args);\n\n                function _next(value) {\n                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);\n                }\n\n                function _throw(err) {\n                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n                }\n\n                _next(undefined);\n            });\n        };\n    }\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError('Cannot call a class as a function');\n        }\n    }\n\n    function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if ('value' in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n    }\n\n    function _defineEnumerableProperties(obj, descs) {\n        for (var key in descs) {\n            var desc = descs[key];\n            desc.configurable = desc.enumerable = true;\n            if ('value' in desc) desc.writable = true;\n            Object.defineProperty(obj, key, desc);\n        }\n\n        if (Object.getOwnPropertySymbols) {\n            var objectSymbols = Object.getOwnPropertySymbols(descs);\n\n            for (var i = 0; i < objectSymbols.length; i++) {\n                var sym = objectSymbols[i];\n                var desc = descs[sym];\n                desc.configurable = desc.enumerable = true;\n                if ('value' in desc) desc.writable = true;\n                Object.defineProperty(obj, sym, desc);\n            }\n        }\n\n        return obj;\n    }\n\n    function _defaults(obj, defaults) {\n        var keys = Object.getOwnPropertyNames(defaults);\n\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n            if (value && value.configurable && obj[key] === undefined) {\n                Object.defineProperty(obj, key, value);\n            }\n        }\n\n        return obj;\n    }\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true,\n            });\n        } else {\n            obj[key] = value;\n        }\n\n        return obj;\n    }\n\n    function _extends() {\n        _extends =\n            Object.assign ||\n            function(target) {\n                for (var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n\n                    for (var key in source) {\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n\n                return target;\n            };\n\n        return _extends.apply(this, arguments);\n    }\n\n    function _objectSpread(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i] != null ? arguments[i] : {};\n            var ownKeys = Object.keys(source);\n\n            if (typeof Object.getOwnPropertySymbols === 'function') {\n                ownKeys = ownKeys.concat(\n                    Object.getOwnPropertySymbols(source).filter(function(sym) {\n                        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n                    })\n                );\n            }\n\n            ownKeys.forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        }\n\n        return target;\n    }\n\n    function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n\n        if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(object);\n            if (enumerableOnly)\n                symbols = symbols.filter(function(sym) {\n                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n                });\n            keys.push.apply(keys, symbols);\n        }\n\n        return keys;\n    }\n\n    function _objectSpread2(target) {\n        for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i] != null ? arguments[i] : {};\n\n            if (i % 2) {\n                ownKeys(source, true).forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            } else if (Object.getOwnPropertyDescriptors) {\n                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n            } else {\n                ownKeys(source).forEach(function(key) {\n                    Object.defineProperty(\n                        target,\n                        key,\n                        Object.getOwnPropertyDescriptor(source, key)\n                    );\n                });\n            }\n        }\n\n        return target;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== 'function' && superClass !== null) {\n            throw new TypeError('Super expression must either be null or a function');\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true,\n            },\n        });\n        if (superClass) _setPrototypeOf(subClass, superClass);\n    }\n\n    function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n    }\n\n    function _getPrototypeOf(o) {\n        _getPrototypeOf = Object.setPrototypeOf\n            ? Object.getPrototypeOf\n            : function _getPrototypeOf(o) {\n                  return o.__proto__ || Object.getPrototypeOf(o);\n              };\n        return _getPrototypeOf(o);\n    }\n\n    function _setPrototypeOf(o, p) {\n        _setPrototypeOf =\n            Object.setPrototypeOf ||\n            function _setPrototypeOf(o, p) {\n                o.__proto__ = p;\n                return o;\n            };\n\n        return _setPrototypeOf(o, p);\n    }\n\n    function isNativeReflectConstruct() {\n        if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (typeof Proxy === 'function') return true;\n\n        try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    function _construct(Parent, args, Class) {\n        if (isNativeReflectConstruct()) {\n            _construct = Reflect.construct;\n        } else {\n            _construct = function _construct(Parent, args, Class) {\n                var a = [null];\n                a.push.apply(a, args);\n                var Constructor = Function.bind.apply(Parent, a);\n                var instance = new Constructor();\n                if (Class) _setPrototypeOf(instance, Class.prototype);\n                return instance;\n            };\n        }\n\n        return _construct.apply(null, arguments);\n    }\n\n    function _isNativeFunction(fn) {\n        return Function.toString.call(fn).indexOf('[native code]') !== -1;\n    }\n\n    function _wrapNativeSuper(Class) {\n        var _cache = typeof Map === 'function' ? new Map() : undefined;\n\n        _wrapNativeSuper = function _wrapNativeSuper(Class) {\n            if (Class === null || !_isNativeFunction(Class)) return Class;\n\n            if (typeof Class !== 'function') {\n                throw new TypeError('Super expression must either be null or a function');\n            }\n\n            if (typeof _cache !== 'undefined') {\n                if (_cache.has(Class)) return _cache.get(Class);\n\n                _cache.set(Class, Wrapper);\n            }\n\n            function Wrapper() {\n                return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n            }\n\n            Wrapper.prototype = Object.create(Class.prototype, {\n                constructor: {\n                    value: Wrapper,\n                    enumerable: false,\n                    writable: true,\n                    configurable: true,\n                },\n            });\n            return _setPrototypeOf(Wrapper, Class);\n        };\n\n        return _wrapNativeSuper(Class);\n    }\n\n    function _instanceof(left, right) {\n        if (right != null && typeof Symbol !== 'undefined' && right[Symbol.hasInstance]) {\n            return !!right[Symbol.hasInstance](left);\n        } else {\n            return left instanceof right;\n        }\n    }\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule\n            ? obj\n            : {\n                  default: obj,\n              };\n    }\n\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};\n\n            if (obj != null) {\n                for (var key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        var desc =\n                            Object.defineProperty && Object.getOwnPropertyDescriptor\n                                ? Object.getOwnPropertyDescriptor(obj, key)\n                                : {};\n\n                        if (desc.get || desc.set) {\n                            Object.defineProperty(newObj, key, desc);\n                        } else {\n                            newObj[key] = obj[key];\n                        }\n                    }\n                }\n            }\n\n            newObj.default = obj;\n            return newObj;\n        }\n    }\n\n    function _newArrowCheck(innerThis, boundThis) {\n        if (innerThis !== boundThis) {\n            throw new TypeError('Cannot instantiate an arrow function');\n        }\n    }\n\n    function _objectDestructuringEmpty(obj) {\n        if (obj == null) throw new TypeError('Cannot destructure undefined');\n    }\n\n    function _objectWithoutPropertiesLoose(source, excluded) {\n        if (source == null) return {};\n        var target = {};\n        var sourceKeys = Object.keys(source);\n        var key, i;\n\n        for (i = 0; i < sourceKeys.length; i++) {\n            key = sourceKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n\n        return target;\n    }\n\n    function _objectWithoutProperties(source, excluded) {\n        if (source == null) return {};\n\n        var target = _objectWithoutPropertiesLoose(source, excluded);\n\n        var key, i;\n\n        if (Object.getOwnPropertySymbols) {\n            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n            for (i = 0; i < sourceSymbolKeys.length; i++) {\n                key = sourceSymbolKeys[i];\n                if (excluded.indexOf(key) >= 0) continue;\n                if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n                target[key] = source[key];\n            }\n        }\n\n        return target;\n    }\n\n    function _assertThisInitialized(self) {\n        if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return self;\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (call && (typeof call === 'object' || typeof call === 'function')) {\n            return call;\n        }\n\n        return _assertThisInitialized(self);\n    }\n\n    function _superPropBase(object, property) {\n        while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n        }\n\n        return object;\n    }\n\n    function _get(target, property, receiver) {\n        if (typeof Reflect !== 'undefined' && Reflect.get) {\n            _get = Reflect.get;\n        } else {\n            _get = function _get(target, property, receiver) {\n                var base = _superPropBase(target, property);\n\n                if (!base) return;\n                var desc = Object.getOwnPropertyDescriptor(base, property);\n\n                if (desc.get) {\n                    return desc.get.call(receiver);\n                }\n\n                return desc.value;\n            };\n        }\n\n        return _get(target, property, receiver || target);\n    }\n\n    function set(target, property, value, receiver) {\n        if (typeof Reflect !== 'undefined' && Reflect.set) {\n            set = Reflect.set;\n        } else {\n            set = function set(target, property, value, receiver) {\n                var base = _superPropBase(target, property);\n\n                var desc;\n\n                if (base) {\n                    desc = Object.getOwnPropertyDescriptor(base, property);\n\n                    if (desc.set) {\n                        desc.set.call(receiver, value);\n                        return true;\n                    } else if (!desc.writable) {\n                        return false;\n                    }\n                }\n\n                desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n                if (desc) {\n                    if (!desc.writable) {\n                        return false;\n                    }\n\n                    desc.value = value;\n                    Object.defineProperty(receiver, property, desc);\n                } else {\n                    _defineProperty(receiver, property, value);\n                }\n\n                return true;\n            };\n        }\n\n        return set(target, property, value, receiver);\n    }\n\n    function _set(target, property, value, receiver, isStrict) {\n        var s = set(target, property, value, receiver || target);\n\n        if (!s && isStrict) {\n            throw new Error('failed to set property');\n        }\n\n        return value;\n    }\n\n    function _taggedTemplateLiteral(strings, raw) {\n        if (!raw) {\n            raw = strings.slice(0);\n        }\n\n        return Object.freeze(\n            Object.defineProperties(strings, {\n                raw: {\n                    value: Object.freeze(raw),\n                },\n            })\n        );\n    }\n\n    function _taggedTemplateLiteralLoose(strings, raw) {\n        if (!raw) {\n            raw = strings.slice(0);\n        }\n\n        strings.raw = raw;\n        return strings;\n    }\n\n    function _temporalRef(val, name) {\n        if (val === _temporalUndefined) {\n            throw new ReferenceError(name + ' is not defined - temporal dead zone');\n        } else {\n            return val;\n        }\n    }\n\n    function _readOnlyError(name) {\n        throw new Error('\"' + name + '\" is read-only');\n    }\n\n    function _classNameTDZError(name) {\n        throw new Error('Class \"' + name + '\" cannot be referenced in computed property keys.');\n    }\n\n    var _temporalUndefined = {};\n\n    function _slicedToArray(arr, i) {\n        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n    }\n\n    function _slicedToArrayLoose(arr, i) {\n        return _arrayWithHoles(arr) || _iterableToArrayLimitLoose(arr, i) || _nonIterableRest();\n    }\n\n    function _toArray(arr) {\n        return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n    }\n\n    function _toConsumableArray(arr) {\n        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n    }\n\n    function _arrayWithoutHoles(arr) {\n        if (Array.isArray(arr)) {\n            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n            return arr2;\n        }\n    }\n\n    function _arrayWithHoles(arr) {\n        if (Array.isArray(arr)) return arr;\n    }\n\n    function _iterableToArray(iter) {\n        if (\n            Symbol.iterator in Object(iter) ||\n            Object.prototype.toString.call(iter) === '[object Arguments]'\n        )\n            return Array.from(iter);\n    }\n\n    function _iterableToArrayLimit(arr, i) {\n        var _arr = [];\n        var _n = true;\n        var _d = false;\n        var _e = undefined;\n\n        try {\n            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                _arr.push(_s.value);\n\n                if (i && _arr.length === i) break;\n            }\n        } catch (err) {\n            _d = true;\n            _e = err;\n        } finally {\n            try {\n                if (!_n && _i['return'] != null) _i['return']();\n            } finally {\n                if (_d) throw _e;\n            }\n        }\n\n        return _arr;\n    }\n\n    function _iterableToArrayLimitLoose(arr, i) {\n        var _arr = [];\n\n        for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done; ) {\n            _arr.push(_step.value);\n\n            if (i && _arr.length === i) break;\n        }\n\n        return _arr;\n    }\n\n    function _nonIterableSpread() {\n        throw new TypeError('Invalid attempt to spread non-iterable instance');\n    }\n\n    function _nonIterableRest() {\n        throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n\n    function _skipFirstGeneratorNext(fn) {\n        return function() {\n            var it = fn.apply(this, arguments);\n            it.next();\n            return it;\n        };\n    }\n\n    function _toPrimitive(input, hint) {\n        if (typeof input !== 'object' || input === null) return input;\n        var prim = input[Symbol.toPrimitive];\n\n        if (prim !== undefined) {\n            var res = prim.call(input, hint || 'default');\n            if (typeof res !== 'object') return res;\n            throw new TypeError('@@toPrimitive must return a primitive value.');\n        }\n\n        return (hint === 'string' ? String : Number)(input);\n    }\n\n    function _toPropertyKey(arg) {\n        var key = _toPrimitive(arg, 'string');\n\n        return typeof key === 'symbol' ? key : String(key);\n    }\n\n    function _initializerWarningHelper(descriptor, context) {\n        throw new Error(\n            'Decorating class property failed. Please ensure that ' +\n                'proposal-class-properties is enabled and set to use loose mode. ' +\n                'To use proposal-class-properties in spec mode with decorators, wait for ' +\n                'the next major version of decorators in stage 2.'\n        );\n    }\n\n    function _initializerDefineProperty(target, property, descriptor, context) {\n        if (!descriptor) return;\n        Object.defineProperty(target, property, {\n            enumerable: descriptor.enumerable,\n            configurable: descriptor.configurable,\n            writable: descriptor.writable,\n            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,\n        });\n    }\n\n    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n        var desc = {};\n        Object.keys(descriptor).forEach(function(key) {\n            desc[key] = descriptor[key];\n        });\n        desc.enumerable = !!desc.enumerable;\n        desc.configurable = !!desc.configurable;\n\n        if ('value' in desc || desc.initializer) {\n            desc.writable = true;\n        }\n\n        desc = decorators\n            .slice()\n            .reverse()\n            .reduce(function(desc, decorator) {\n                return decorator(target, property, desc) || desc;\n            }, desc);\n\n        if (context && desc.initializer !== void 0) {\n            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n            desc.initializer = undefined;\n        }\n\n        if (desc.initializer === void 0) {\n            Object.defineProperty(target, property, desc);\n            desc = null;\n        }\n\n        return desc;\n    }\n\n    var id = 0;\n\n    function _classPrivateFieldLooseKey(name) {\n        return '__private_' + id++ + '_' + name;\n    }\n\n    function _classPrivateFieldLooseBase(receiver, privateKey) {\n        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n            throw new TypeError('attempted to use private field on non-instance');\n        }\n\n        return receiver;\n    }\n\n    function _classPrivateFieldGet(receiver, privateMap) {\n        var descriptor = privateMap.get(receiver);\n\n        if (!descriptor) {\n            throw new TypeError('attempted to get private field on non-instance');\n        }\n\n        if (descriptor.get) {\n            return descriptor.get.call(receiver);\n        }\n\n        return descriptor.value;\n    }\n\n    function _classPrivateFieldSet(receiver, privateMap, value) {\n        var descriptor = privateMap.get(receiver);\n\n        if (!descriptor) {\n            throw new TypeError('attempted to set private field on non-instance');\n        }\n\n        if (descriptor.set) {\n            descriptor.set.call(receiver, value);\n        } else {\n            if (!descriptor.writable) {\n                throw new TypeError('attempted to set read only private field');\n            }\n\n            descriptor.value = value;\n        }\n\n        return value;\n    }\n\n    function _classPrivateFieldDestructureSet(receiver, privateMap) {\n        if (!privateMap.has(receiver)) {\n            throw new TypeError('attempted to set private field on non-instance');\n        }\n\n        var descriptor = privateMap.get(receiver);\n\n        if (descriptor.set) {\n            if (!('__destrObj' in descriptor)) {\n                descriptor.__destrObj = {\n                    set value(v) {\n                        descriptor.set.call(receiver, v);\n                    },\n                };\n            }\n\n            return descriptor.__destrObj;\n        } else {\n            if (!descriptor.writable) {\n                throw new TypeError('attempted to set read only private field');\n            }\n\n            return descriptor;\n        }\n    }\n\n    function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n        if (receiver !== classConstructor) {\n            throw new TypeError('Private static access of wrong provenance');\n        }\n\n        return descriptor.value;\n    }\n\n    function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n        if (receiver !== classConstructor) {\n            throw new TypeError('Private static access of wrong provenance');\n        }\n\n        if (!descriptor.writable) {\n            throw new TypeError('attempted to set read only private field');\n        }\n\n        descriptor.value = value;\n        return value;\n    }\n\n    function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n        if (receiver !== classConstructor) {\n            throw new TypeError('Private static access of wrong provenance');\n        }\n\n        return method;\n    }\n\n    function _classStaticPrivateMethodSet() {\n        throw new TypeError('attempted to set read only static private field');\n    }\n\n    function _decorate(decorators, factory, superClass, mixins) {\n        var api = _getDecoratorsApi();\n\n        if (mixins) {\n            for (var i = 0; i < mixins.length; i++) {\n                api = mixins[i](api);\n            }\n        }\n\n        var r = factory(function initialize(O) {\n            api.initializeInstanceElements(O, decorated.elements);\n        }, superClass);\n        var decorated = api.decorateClass(\n            _coalesceClassElements(r.d.map(_createElementDescriptor)),\n            decorators\n        );\n        api.initializeClassElements(r.F, decorated.elements);\n        return api.runClassFinishers(r.F, decorated.finishers);\n    }\n\n    function _getDecoratorsApi() {\n        _getDecoratorsApi = function() {\n            return api;\n        };\n\n        var api = {\n            elementsDefinitionOrder: [['method'], ['field']],\n            initializeInstanceElements: function(O, elements) {\n                ['method', 'field'].forEach(function(kind) {\n                    elements.forEach(function(element) {\n                        if (element.kind === kind && element.placement === 'own') {\n                            this.defineClassElement(O, element);\n                        }\n                    }, this);\n                }, this);\n            },\n            initializeClassElements: function(F, elements) {\n                var proto = F.prototype;\n                ['method', 'field'].forEach(function(kind) {\n                    elements.forEach(function(element) {\n                        var placement = element.placement;\n\n                        if (\n                            element.kind === kind &&\n                            (placement === 'static' || placement === 'prototype')\n                        ) {\n                            var receiver = placement === 'static' ? F : proto;\n                            this.defineClassElement(receiver, element);\n                        }\n                    }, this);\n                }, this);\n            },\n            defineClassElement: function(receiver, element) {\n                var descriptor = element.descriptor;\n\n                if (element.kind === 'field') {\n                    var initializer = element.initializer;\n                    descriptor = {\n                        enumerable: descriptor.enumerable,\n                        writable: descriptor.writable,\n                        configurable: descriptor.configurable,\n                        value: initializer === void 0 ? void 0 : initializer.call(receiver),\n                    };\n                }\n\n                Object.defineProperty(receiver, element.key, descriptor);\n            },\n            decorateClass: function(elements, decorators) {\n                var newElements = [];\n                var finishers = [];\n                var placements = {\n                    static: [],\n                    prototype: [],\n                    own: [],\n                };\n                elements.forEach(function(element) {\n                    this.addElementPlacement(element, placements);\n                }, this);\n                elements.forEach(function(element) {\n                    if (!_hasDecorators(element)) return newElements.push(element);\n                    var elementFinishersExtras = this.decorateElement(element, placements);\n                    newElements.push(elementFinishersExtras.element);\n                    newElements.push.apply(newElements, elementFinishersExtras.extras);\n                    finishers.push.apply(finishers, elementFinishersExtras.finishers);\n                }, this);\n\n                if (!decorators) {\n                    return {\n                        elements: newElements,\n                        finishers: finishers,\n                    };\n                }\n\n                var result = this.decorateConstructor(newElements, decorators);\n                finishers.push.apply(finishers, result.finishers);\n                result.finishers = finishers;\n                return result;\n            },\n            addElementPlacement: function(element, placements, silent) {\n                var keys = placements[element.placement];\n\n                if (!silent && keys.indexOf(element.key) !== -1) {\n                    throw new TypeError('Duplicated element (' + element.key + ')');\n                }\n\n                keys.push(element.key);\n            },\n            decorateElement: function(element, placements) {\n                var extras = [];\n                var finishers = [];\n\n                for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) {\n                    var keys = placements[element.placement];\n                    keys.splice(keys.indexOf(element.key), 1);\n                    var elementObject = this.fromElementDescriptor(element);\n                    var elementFinisherExtras = this.toElementFinisherExtras(\n                        (0, decorators[i])(elementObject) || elementObject\n                    );\n                    element = elementFinisherExtras.element;\n                    this.addElementPlacement(element, placements);\n\n                    if (elementFinisherExtras.finisher) {\n                        finishers.push(elementFinisherExtras.finisher);\n                    }\n\n                    var newExtras = elementFinisherExtras.extras;\n\n                    if (newExtras) {\n                        for (var j = 0; j < newExtras.length; j++) {\n                            this.addElementPlacement(newExtras[j], placements);\n                        }\n\n                        extras.push.apply(extras, newExtras);\n                    }\n                }\n\n                return {\n                    element: element,\n                    finishers: finishers,\n                    extras: extras,\n                };\n            },\n            decorateConstructor: function(elements, decorators) {\n                var finishers = [];\n\n                for (var i = decorators.length - 1; i >= 0; i--) {\n                    var obj = this.fromClassDescriptor(elements);\n                    var elementsAndFinisher = this.toClassDescriptor(\n                        (0, decorators[i])(obj) || obj\n                    );\n\n                    if (elementsAndFinisher.finisher !== undefined) {\n                        finishers.push(elementsAndFinisher.finisher);\n                    }\n\n                    if (elementsAndFinisher.elements !== undefined) {\n                        elements = elementsAndFinisher.elements;\n\n                        for (var j = 0; j < elements.length - 1; j++) {\n                            for (var k = j + 1; k < elements.length; k++) {\n                                if (\n                                    elements[j].key === elements[k].key &&\n                                    elements[j].placement === elements[k].placement\n                                ) {\n                                    throw new TypeError(\n                                        'Duplicated element (' + elements[j].key + ')'\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return {\n                    elements: elements,\n                    finishers: finishers,\n                };\n            },\n            fromElementDescriptor: function(element) {\n                var obj = {\n                    kind: element.kind,\n                    key: element.key,\n                    placement: element.placement,\n                    descriptor: element.descriptor,\n                };\n                var desc = {\n                    value: 'Descriptor',\n                    configurable: true,\n                };\n                Object.defineProperty(obj, Symbol.toStringTag, desc);\n                if (element.kind === 'field') obj.initializer = element.initializer;\n                return obj;\n            },\n            toElementDescriptors: function(elementObjects) {\n                if (elementObjects === undefined) return;\n                return _toArray(elementObjects).map(function(elementObject) {\n                    var element = this.toElementDescriptor(elementObject);\n                    this.disallowProperty(elementObject, 'finisher', 'An element descriptor');\n                    this.disallowProperty(elementObject, 'extras', 'An element descriptor');\n                    return element;\n                }, this);\n            },\n            toElementDescriptor: function(elementObject) {\n                var kind = String(elementObject.kind);\n\n                if (kind !== 'method' && kind !== 'field') {\n                    throw new TypeError(\n                        'An element descriptor\\'s .kind property must be either \"method\" or' +\n                            ' \"field\", but a decorator created an element descriptor with' +\n                            ' .kind \"' +\n                            kind +\n                            '\"'\n                    );\n                }\n\n                var key = _toPropertyKey(elementObject.key);\n\n                var placement = String(elementObject.placement);\n\n                if (placement !== 'static' && placement !== 'prototype' && placement !== 'own') {\n                    throw new TypeError(\n                        'An element descriptor\\'s .placement property must be one of \"static\",' +\n                            ' \"prototype\" or \"own\", but a decorator created an element descriptor' +\n                            ' with .placement \"' +\n                            placement +\n                            '\"'\n                    );\n                }\n\n                var descriptor = elementObject.descriptor;\n                this.disallowProperty(elementObject, 'elements', 'An element descriptor');\n                var element = {\n                    kind: kind,\n                    key: key,\n                    placement: placement,\n                    descriptor: Object.assign({}, descriptor),\n                };\n\n                if (kind !== 'field') {\n                    this.disallowProperty(elementObject, 'initializer', 'A method descriptor');\n                } else {\n                    this.disallowProperty(\n                        descriptor,\n                        'get',\n                        'The property descriptor of a field descriptor'\n                    );\n                    this.disallowProperty(\n                        descriptor,\n                        'set',\n                        'The property descriptor of a field descriptor'\n                    );\n                    this.disallowProperty(\n                        descriptor,\n                        'value',\n                        'The property descriptor of a field descriptor'\n                    );\n                    element.initializer = elementObject.initializer;\n                }\n\n                return element;\n            },\n            toElementFinisherExtras: function(elementObject) {\n                var element = this.toElementDescriptor(elementObject);\n\n                var finisher = _optionalCallableProperty(elementObject, 'finisher');\n\n                var extras = this.toElementDescriptors(elementObject.extras);\n                return {\n                    element: element,\n                    finisher: finisher,\n                    extras: extras,\n                };\n            },\n            fromClassDescriptor: function(elements) {\n                var obj = {\n                    kind: 'class',\n                    elements: elements.map(this.fromElementDescriptor, this),\n                };\n                var desc = {\n                    value: 'Descriptor',\n                    configurable: true,\n                };\n                Object.defineProperty(obj, Symbol.toStringTag, desc);\n                return obj;\n            },\n            toClassDescriptor: function(obj) {\n                var kind = String(obj.kind);\n\n                if (kind !== 'class') {\n                    throw new TypeError(\n                        'A class descriptor\\'s .kind property must be \"class\", but a decorator' +\n                            ' created a class descriptor with .kind \"' +\n                            kind +\n                            '\"'\n                    );\n                }\n\n                this.disallowProperty(obj, 'key', 'A class descriptor');\n                this.disallowProperty(obj, 'placement', 'A class descriptor');\n                this.disallowProperty(obj, 'descriptor', 'A class descriptor');\n                this.disallowProperty(obj, 'initializer', 'A class descriptor');\n                this.disallowProperty(obj, 'extras', 'A class descriptor');\n\n                var finisher = _optionalCallableProperty(obj, 'finisher');\n\n                var elements = this.toElementDescriptors(obj.elements);\n                return {\n                    elements: elements,\n                    finisher: finisher,\n                };\n            },\n            runClassFinishers: function(constructor, finishers) {\n                for (var i = 0; i < finishers.length; i++) {\n                    var newConstructor = (0, finishers[i])(constructor);\n\n                    if (newConstructor !== undefined) {\n                        if (typeof newConstructor !== 'function') {\n                            throw new TypeError('Finishers must return a constructor.');\n                        }\n\n                        constructor = newConstructor;\n                    }\n                }\n\n                return constructor;\n            },\n            disallowProperty: function(obj, name, objectType) {\n                if (obj[name] !== undefined) {\n                    throw new TypeError(objectType + \" can't have a .\" + name + ' property.');\n                }\n            },\n        };\n        return api;\n    }\n\n    function _createElementDescriptor(def) {\n        var key = _toPropertyKey(def.key);\n\n        var descriptor;\n\n        if (def.kind === 'method') {\n            descriptor = {\n                value: def.value,\n                writable: true,\n                configurable: true,\n                enumerable: false,\n            };\n        } else if (def.kind === 'get') {\n            descriptor = {\n                get: def.value,\n                configurable: true,\n                enumerable: false,\n            };\n        } else if (def.kind === 'set') {\n            descriptor = {\n                set: def.value,\n                configurable: true,\n                enumerable: false,\n            };\n        } else if (def.kind === 'field') {\n            descriptor = {\n                configurable: true,\n                writable: true,\n                enumerable: true,\n            };\n        }\n\n        var element = {\n            kind: def.kind === 'field' ? 'field' : 'method',\n            key: key,\n            placement: def.static ? 'static' : def.kind === 'field' ? 'own' : 'prototype',\n            descriptor: descriptor,\n        };\n        if (def.decorators) element.decorators = def.decorators;\n        if (def.kind === 'field') element.initializer = def.value;\n        return element;\n    }\n\n    function _coalesceGetterSetter(element, other) {\n        if (element.descriptor.get !== undefined) {\n            other.descriptor.get = element.descriptor.get;\n        } else {\n            other.descriptor.set = element.descriptor.set;\n        }\n    }\n\n    function _coalesceClassElements(elements) {\n        var newElements = [];\n\n        var isSameElement = function(other) {\n            return (\n                other.kind === 'method' &&\n                other.key === element.key &&\n                other.placement === element.placement\n            );\n        };\n\n        for (var i = 0; i < elements.length; i++) {\n            var element = elements[i];\n            var other;\n\n            if (element.kind === 'method' && (other = newElements.find(isSameElement))) {\n                if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {\n                    if (_hasDecorators(element) || _hasDecorators(other)) {\n                        throw new ReferenceError(\n                            'Duplicated methods (' + element.key + \") can't be decorated.\"\n                        );\n                    }\n\n                    other.descriptor = element.descriptor;\n                } else {\n                    if (_hasDecorators(element)) {\n                        if (_hasDecorators(other)) {\n                            throw new ReferenceError(\n                                \"Decorators can't be placed on different accessors with for \" +\n                                    'the same property (' +\n                                    element.key +\n                                    ').'\n                            );\n                        }\n\n                        other.decorators = element.decorators;\n                    }\n\n                    _coalesceGetterSetter(element, other);\n                }\n            } else {\n                newElements.push(element);\n            }\n        }\n\n        return newElements;\n    }\n\n    function _hasDecorators(element) {\n        return element.decorators && element.decorators.length;\n    }\n\n    function _isDataDescriptor(desc) {\n        return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);\n    }\n\n    function _optionalCallableProperty(obj, name) {\n        var value = obj[name];\n\n        if (value !== undefined && typeof value !== 'function') {\n            throw new TypeError(\"Expected '\" + name + \"' to be a function\");\n        }\n\n        return value;\n    }\n\n    function _classPrivateMethodGet(receiver, privateSet, fn) {\n        if (!privateSet.has(receiver)) {\n            throw new TypeError('attempted to get private field on non-instance');\n        }\n\n        return fn;\n    }\n\n    function _classPrivateMethodSet() {\n        throw new TypeError('attempted to reassign private method');\n    }\n\n    function _wrapRegExp(re, groups) {\n        _wrapRegExp = function(re, groups) {\n            return new BabelRegExp(re, groups);\n        };\n\n        var _RegExp = _wrapNativeSuper(RegExp);\n\n        var _super = RegExp.prototype;\n\n        var _groups = new WeakMap();\n\n        function BabelRegExp(re, groups) {\n            var _this = _RegExp.call(this, re);\n\n            _groups.set(_this, groups);\n\n            return _this;\n        }\n\n        _inherits(BabelRegExp, _RegExp);\n\n        BabelRegExp.prototype.exec = function(str) {\n            var result = _super.exec.call(this, str);\n\n            if (result) result.groups = buildGroups(result, this);\n            return result;\n        };\n\n        BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n            if (typeof substitution === 'string') {\n                var groups = _groups.get(this);\n\n                return _super[Symbol.replace].call(\n                    this,\n                    str,\n                    substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n                        return '$' + groups[name];\n                    })\n                );\n            } else if (typeof substitution === 'function') {\n                var _this = this;\n\n                return _super[Symbol.replace].call(this, str, function() {\n                    var args = [];\n                    args.push.apply(args, arguments);\n\n                    if (typeof args[args.length - 1] !== 'object') {\n                        args.push(buildGroups(args, _this));\n                    }\n\n                    return substitution.apply(this, args);\n                });\n            } else {\n                return _super[Symbol.replace].call(this, str, substitution);\n            }\n        };\n\n        function buildGroups(result, re) {\n            var g = _groups.get(re);\n\n            return Object.keys(g).reduce(function(groups, name) {\n                groups[name] = result[g[name]];\n                return groups;\n            }, Object.create(null));\n        }\n\n        return _wrapRegExp.apply(this, arguments);\n    }\n\n    var arrayRemove = function arrayRemove(arr, index) {\n        return arr.splice(index, 1);\n    };\n\n    var run = function run(cb, sync) {\n        if (sync) {\n            cb();\n        } else if (document.hidden) {\n            Promise.resolve(1).then(cb);\n        } else {\n            setTimeout(cb, 0);\n        }\n    };\n\n    var on = function on() {\n        var listeners = [];\n        var off = function off(event, cb) {\n            arrayRemove(\n                listeners,\n                listeners.findIndex(function(listener) {\n                    return listener.event === event && (listener.cb === cb || !cb);\n                })\n            );\n        };\n        var _fire = function fire(event, args, sync) {\n            listeners\n                .filter(function(listener) {\n                    return listener.event === event;\n                })\n                .map(function(listener) {\n                    return listener.cb;\n                })\n                .forEach(function(cb) {\n                    return run(function() {\n                        return cb.apply(void 0, _toConsumableArray(args));\n                    }, sync);\n                });\n        };\n        return {\n            fireSync: function fireSync(event) {\n                for (\n                    var _len = arguments.length,\n                        args = new Array(_len > 1 ? _len - 1 : 0),\n                        _key = 1;\n                    _key < _len;\n                    _key++\n                ) {\n                    args[_key - 1] = arguments[_key];\n                }\n                _fire(event, args, true);\n            },\n            fire: function fire(event) {\n                for (\n                    var _len2 = arguments.length,\n                        args = new Array(_len2 > 1 ? _len2 - 1 : 0),\n                        _key2 = 1;\n                    _key2 < _len2;\n                    _key2++\n                ) {\n                    args[_key2 - 1] = arguments[_key2];\n                }\n                _fire(event, args, false);\n            },\n            on: function on(event, cb) {\n                listeners.push({ event: event, cb: cb });\n            },\n            onOnce: function onOnce(event, _cb) {\n                listeners.push({\n                    event: event,\n                    cb: function cb() {\n                        off(event, _cb);\n                        _cb.apply(void 0, arguments);\n                    },\n                });\n            },\n            off: off,\n        };\n    };\n\n    var copyObjectPropertiesToObject = function copyObjectPropertiesToObject(\n        src,\n        target,\n        excluded\n    ) {\n        Object.getOwnPropertyNames(src)\n            .filter(function(property) {\n                return !excluded.includes(property);\n            })\n            .forEach(function(key) {\n                return Object.defineProperty(\n                    target,\n                    key,\n                    Object.getOwnPropertyDescriptor(src, key)\n                );\n            });\n    };\n\n    var PRIVATE = [\n        'fire',\n        'process',\n        'revert',\n        'load',\n        'on',\n        'off',\n        'onOnce',\n        'retryLoad',\n        'extend',\n        'archive',\n        'archived',\n        'release',\n        'released',\n        'requestProcessing',\n        'freeze',\n    ];\n\n    var createItemAPI = function createItemAPI(item) {\n        var api = {};\n        copyObjectPropertiesToObject(item, api, PRIVATE);\n        return api;\n    };\n\n    var removeReleasedItems = function removeReleasedItems(items) {\n        items.forEach(function(item, index) {\n            if (item.released) {\n                arrayRemove(items, index);\n            }\n        });\n    };\n\n    var ItemStatus = {\n        INIT: 1,\n        IDLE: 2,\n        PROCESSING_QUEUED: 9,\n        PROCESSING: 3,\n        PROCESSING_COMPLETE: 5,\n        PROCESSING_ERROR: 6,\n        PROCESSING_REVERT_ERROR: 10,\n        LOADING: 7,\n        LOAD_ERROR: 8,\n    };\n\n    var FileOrigin = {\n        INPUT: 1,\n        LIMBO: 2,\n        LOCAL: 3,\n    };\n\n    var getNonNumeric = function getNonNumeric(str) {\n        return /[^0-9]+/.exec(str);\n    };\n\n    var getDecimalSeparator = function getDecimalSeparator() {\n        return getNonNumeric((1.1).toLocaleString())[0];\n    };\n\n    var getThousandsSeparator = function getThousandsSeparator() {\n        // Added for browsers that do not return the thousands separator (happend on native browser Android 4.4.4)\n        // We check against the normal toString output and if they're the same return a comma when decimal separator is a dot\n        var decimalSeparator = getDecimalSeparator();\n        var thousandsStringWithSeparator = (1000.0).toLocaleString();\n        var thousandsStringWithoutSeparator = (1000.0).toString();\n        if (thousandsStringWithSeparator !== thousandsStringWithoutSeparator) {\n            return getNonNumeric(thousandsStringWithSeparator)[0];\n        }\n        return decimalSeparator === '.' ? ',' : '.';\n    };\n\n    var Type = {\n        BOOLEAN: 'boolean',\n        INT: 'int',\n        NUMBER: 'number',\n        STRING: 'string',\n        ARRAY: 'array',\n        OBJECT: 'object',\n        FUNCTION: 'function',\n        ACTION: 'action',\n        SERVER_API: 'serverapi',\n        REGEX: 'regex',\n    };\n\n    // all registered filters\n    var filters = [];\n\n    // loops over matching filters and passes options to each filter, returning the mapped results\n    var applyFilterChain = function applyFilterChain(key, value, utils) {\n        return new Promise(function(resolve, reject) {\n            // find matching filters for this key\n            var matchingFilters = filters\n                .filter(function(f) {\n                    return f.key === key;\n                })\n                .map(function(f) {\n                    return f.cb;\n                });\n\n            // resolve now\n            if (matchingFilters.length === 0) {\n                resolve(value);\n                return;\n            }\n\n            // first filter to kick things of\n            var initialFilter = matchingFilters.shift();\n\n            // chain filters\n            matchingFilters\n                .reduce(\n                    // loop over promises passing value to next promise\n                    function(current, next) {\n                        return current.then(function(value) {\n                            return next(value, utils);\n                        });\n                    },\n\n                    // call initial filter, will return a promise\n                    initialFilter(value, utils)\n\n                    // all executed\n                )\n                .then(function(value) {\n                    return resolve(value);\n                })\n                .catch(function(error) {\n                    return reject(error);\n                });\n        });\n    };\n\n    var applyFilters = function applyFilters(key, value, utils) {\n        return filters\n            .filter(function(f) {\n                return f.key === key;\n            })\n            .map(function(f) {\n                return f.cb(value, utils);\n            });\n    };\n\n    // adds a new filter to the list\n    var addFilter = function addFilter(key, cb) {\n        return filters.push({ key: key, cb: cb });\n    };\n\n    var extendDefaultOptions = function extendDefaultOptions(additionalOptions) {\n        return Object.assign(defaultOptions, additionalOptions);\n    };\n\n    var getOptions = function getOptions() {\n        return Object.assign({}, defaultOptions);\n    };\n\n    var setOptions = function setOptions(opts) {\n        forin(opts, function(key, value) {\n            // key does not exist, so this option cannot be set\n            if (!defaultOptions[key]) {\n                return;\n            }\n            defaultOptions[key][0] = getValueByType(\n                value,\n                defaultOptions[key][0],\n                defaultOptions[key][1]\n            );\n        });\n    };\n\n    // default options on app\n    var defaultOptions = {\n        // the id to add to the root element\n        id: [null, Type.STRING],\n\n        // input field name to use\n        name: ['filepond', Type.STRING],\n\n        // disable the field\n        disabled: [false, Type.BOOLEAN],\n\n        // classname to put on wrapper\n        className: [null, Type.STRING],\n\n        // is the field required\n        required: [false, Type.BOOLEAN],\n\n        // Allow media capture when value is set\n        captureMethod: [null, Type.STRING],\n        // - \"camera\", \"microphone\" or \"camcorder\",\n        // - Does not work with multiple on apple devices\n        // - If set, acceptedFileTypes must be made to match with media wildcard \"image/*\", \"audio/*\" or \"video/*\"\n\n        // sync `acceptedFileTypes` property with `accept` attribute\n        allowSyncAcceptAttribute: [true, Type.BOOLEAN],\n\n        // Feature toggles\n        allowDrop: [true, Type.BOOLEAN], // Allow dropping of files\n        allowBrowse: [true, Type.BOOLEAN], // Allow browsing the file system\n        allowPaste: [true, Type.BOOLEAN], // Allow pasting files\n        allowMultiple: [false, Type.BOOLEAN], // Allow multiple files (disabled by default, as multiple attribute is also required on input to allow multiple)\n        allowReplace: [true, Type.BOOLEAN], // Allow dropping a file on other file to replace it (only works when multiple is set to false)\n        allowRevert: [true, Type.BOOLEAN], // Allows user to revert file upload\n        allowRemove: [true, Type.BOOLEAN], // Allow user to remove a file\n        allowProcess: [true, Type.BOOLEAN], // Allows user to process a file, when set to false, this removes the file upload button\n        allowReorder: [false, Type.BOOLEAN], // Allow reordering of files\n        allowDirectoriesOnly: [false, Type.BOOLEAN], // Allow only selecting directories with browse (no support for filtering dnd at this point)\n\n        // Try store file if `server` not set\n        storeAsFile: [false, Type.BOOLEAN],\n\n        // Revert mode\n        forceRevert: [false, Type.BOOLEAN], // Set to 'force' to require the file to be reverted before removal\n\n        // Input requirements\n        maxFiles: [null, Type.INT], // Max number of files\n        checkValidity: [false, Type.BOOLEAN], // Enables custom validity messages\n\n        // Where to put file\n        itemInsertLocationFreedom: [true, Type.BOOLEAN], // Set to false to always add items to begin or end of list\n        itemInsertLocation: ['before', Type.STRING], // Default index in list to add items that have been dropped at the top of the list\n        itemInsertInterval: [75, Type.INT],\n\n        // Drag 'n Drop related\n        dropOnPage: [false, Type.BOOLEAN], // Allow dropping of files anywhere on page (prevents browser from opening file if dropped outside of Up)\n        dropOnElement: [true, Type.BOOLEAN], // Drop needs to happen on element (set to false to also load drops outside of Up)\n        dropValidation: [false, Type.BOOLEAN], // Enable or disable validating files on drop\n        ignoredFiles: [['.ds_store', 'thumbs.db', 'desktop.ini'], Type.ARRAY],\n\n        // Upload related\n        instantUpload: [true, Type.BOOLEAN], // Should upload files immediately on drop\n        maxParallelUploads: [2, Type.INT], // Maximum files to upload in parallel\n        allowMinimumUploadDuration: [true, Type.BOOLEAN], // if true uploads take at least 750 ms, this ensures the user sees the upload progress giving trust the upload actually happened\n\n        // Chunks\n        chunkUploads: [false, Type.BOOLEAN], // Enable chunked uploads\n        chunkForce: [false, Type.BOOLEAN], // Force use of chunk uploads even for files smaller than chunk size\n        chunkSize: [5000000, Type.INT], // Size of chunks (5MB default)\n        chunkRetryDelays: [[500, 1000, 3000], Type.ARRAY], // Amount of times to retry upload of a chunk when it fails\n\n        // The server api end points to use for uploading (see docs)\n        server: [null, Type.SERVER_API],\n\n        // File size calculations, can set to 1024, this is only used for display, properties use file size base 1000\n        fileSizeBase: [1000, Type.INT],\n\n        // Labels and status messages\n        labelFileSizeBytes: ['bytes', Type.STRING],\n        labelFileSizeKilobytes: ['KB', Type.STRING],\n        labelFileSizeMegabytes: ['MB', Type.STRING],\n        labelFileSizeGigabytes: ['GB', Type.STRING],\n\n        labelDecimalSeparator: [getDecimalSeparator(), Type.STRING], // Default is locale separator\n        labelThousandsSeparator: [getThousandsSeparator(), Type.STRING], // Default is locale separator\n\n        labelIdle: [\n            'Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>',\n            Type.STRING,\n        ],\n\n        labelInvalidField: ['Field contains invalid files', Type.STRING],\n        labelFileWaitingForSize: ['Waiting for size', Type.STRING],\n        labelFileSizeNotAvailable: ['Size not available', Type.STRING],\n        labelFileCountSingular: ['file in list', Type.STRING],\n        labelFileCountPlural: ['files in list', Type.STRING],\n        labelFileLoading: ['Loading', Type.STRING],\n        labelFileAdded: ['Added', Type.STRING], // assistive only\n        labelFileLoadError: ['Error during load', Type.STRING],\n        labelFileRemoved: ['Removed', Type.STRING], // assistive only\n        labelFileRemoveError: ['Error during remove', Type.STRING],\n        labelFileProcessing: ['Uploading', Type.STRING],\n        labelFileProcessingComplete: ['Upload complete', Type.STRING],\n        labelFileProcessingAborted: ['Upload cancelled', Type.STRING],\n        labelFileProcessingError: ['Error during upload', Type.STRING],\n        labelFileProcessingRevertError: ['Error during revert', Type.STRING],\n\n        labelTapToCancel: ['tap to cancel', Type.STRING],\n        labelTapToRetry: ['tap to retry', Type.STRING],\n        labelTapToUndo: ['tap to undo', Type.STRING],\n\n        labelButtonRemoveItem: ['Remove', Type.STRING],\n        labelButtonAbortItemLoad: ['Abort', Type.STRING],\n        labelButtonRetryItemLoad: ['Retry', Type.STRING],\n        labelButtonAbortItemProcessing: ['Cancel', Type.STRING],\n        labelButtonUndoItemProcessing: ['Undo', Type.STRING],\n        labelButtonRetryItemProcessing: ['Retry', Type.STRING],\n        labelButtonProcessItem: ['Upload', Type.STRING],\n\n        // make sure width and height plus viewpox are even numbers so icons are nicely centered\n        iconRemove: [\n            '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n            Type.STRING,\n        ],\n\n        iconProcess: [\n            '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z\" fill=\"currentColor\" fill-rule=\"evenodd\"/></svg>',\n            Type.STRING,\n        ],\n\n        iconRetry: [\n            '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n            Type.STRING,\n        ],\n\n        iconUndo: [\n            '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n            Type.STRING,\n        ],\n\n        iconDone: [\n            '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n            Type.STRING,\n        ],\n\n        // event handlers\n        oninit: [null, Type.FUNCTION],\n        onwarning: [null, Type.FUNCTION],\n        onerror: [null, Type.FUNCTION],\n        onactivatefile: [null, Type.FUNCTION],\n        oninitfile: [null, Type.FUNCTION],\n        onaddfilestart: [null, Type.FUNCTION],\n        onaddfileprogress: [null, Type.FUNCTION],\n        onaddfile: [null, Type.FUNCTION],\n        onprocessfilestart: [null, Type.FUNCTION],\n        onprocessfileprogress: [null, Type.FUNCTION],\n        onprocessfileabort: [null, Type.FUNCTION],\n        onprocessfilerevert: [null, Type.FUNCTION],\n        onprocessfile: [null, Type.FUNCTION],\n        onprocessfiles: [null, Type.FUNCTION],\n        onremovefile: [null, Type.FUNCTION],\n        onpreparefile: [null, Type.FUNCTION],\n        onupdatefiles: [null, Type.FUNCTION],\n        onreorderfiles: [null, Type.FUNCTION],\n\n        // hooks\n        beforeDropFile: [null, Type.FUNCTION],\n        beforeAddFile: [null, Type.FUNCTION],\n        beforeRemoveFile: [null, Type.FUNCTION],\n        beforePrepareFile: [null, Type.FUNCTION],\n\n        // styles\n        stylePanelLayout: [null, Type.STRING], // null 'integrated', 'compact', 'circle'\n        stylePanelAspectRatio: [null, Type.STRING], // null or '3:2' or 1\n        styleItemPanelAspectRatio: [null, Type.STRING],\n        styleButtonRemoveItemPosition: ['left', Type.STRING],\n        styleButtonProcessItemPosition: ['right', Type.STRING],\n        styleLoadIndicatorPosition: ['right', Type.STRING],\n        styleProgressIndicatorPosition: ['right', Type.STRING],\n        styleButtonRemoveItemAlign: [false, Type.BOOLEAN],\n\n        // custom initial files array\n        files: [[], Type.ARRAY],\n\n        // show support by displaying credits\n        credits: [['https://pqina.nl/', 'Powered by PQINA'], Type.ARRAY],\n    };\n\n    var getItemByQuery = function getItemByQuery(items, query) {\n        // just return first index\n        if (isEmpty(query)) {\n            return items[0] || null;\n        }\n\n        // query is index\n        if (isInt(query)) {\n            return items[query] || null;\n        }\n\n        // if query is item, get the id\n        if (typeof query === 'object') {\n            query = query.id;\n        }\n\n        // assume query is a string and return item by id\n        return (\n            items.find(function(item) {\n                return item.id === query;\n            }) || null\n        );\n    };\n\n    var getNumericAspectRatioFromString = function getNumericAspectRatioFromString(aspectRatio) {\n        if (isEmpty(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (/:/.test(aspectRatio)) {\n            var parts = aspectRatio.split(':');\n            return parts[1] / parts[0];\n        }\n        return parseFloat(aspectRatio);\n    };\n\n    var getActiveItems = function getActiveItems(items) {\n        return items.filter(function(item) {\n            return !item.archived;\n        });\n    };\n\n    var Status = {\n        EMPTY: 0,\n        IDLE: 1, // waiting\n        ERROR: 2, // a file is in error state\n        BUSY: 3, // busy processing or loading\n        READY: 4, // all files uploaded\n    };\n\n    var res = null;\n    var canUpdateFileInput = function canUpdateFileInput() {\n        if (res === null) {\n            try {\n                var dataTransfer = new DataTransfer();\n                dataTransfer.items.add(new File(['hello world'], 'This_Works.txt'));\n                var el = document.createElement('input');\n                el.setAttribute('type', 'file');\n                el.files = dataTransfer.files;\n                res = el.files.length === 1;\n            } catch (err) {\n                res = false;\n            }\n        }\n        return res;\n    };\n\n    var ITEM_ERROR = [\n        ItemStatus.LOAD_ERROR,\n        ItemStatus.PROCESSING_ERROR,\n        ItemStatus.PROCESSING_REVERT_ERROR,\n    ];\n\n    var ITEM_BUSY = [\n        ItemStatus.LOADING,\n        ItemStatus.PROCESSING,\n        ItemStatus.PROCESSING_QUEUED,\n        ItemStatus.INIT,\n    ];\n\n    var ITEM_READY = [ItemStatus.PROCESSING_COMPLETE];\n\n    var isItemInErrorState = function isItemInErrorState(item) {\n        return ITEM_ERROR.includes(item.status);\n    };\n    var isItemInBusyState = function isItemInBusyState(item) {\n        return ITEM_BUSY.includes(item.status);\n    };\n    var isItemInReadyState = function isItemInReadyState(item) {\n        return ITEM_READY.includes(item.status);\n    };\n\n    var isAsync = function isAsync(state) {\n        return (\n            isObject(state.options.server) &&\n            (isObject(state.options.server.process) || isFunction(state.options.server.process))\n        );\n    };\n\n    var queries = function queries(state) {\n        return {\n            GET_STATUS: function GET_STATUS() {\n                var items = getActiveItems(state.items);\n                var EMPTY = Status.EMPTY,\n                    ERROR = Status.ERROR,\n                    BUSY = Status.BUSY,\n                    IDLE = Status.IDLE,\n                    READY = Status.READY;\n\n                if (items.length === 0) return EMPTY;\n\n                if (items.some(isItemInErrorState)) return ERROR;\n\n                if (items.some(isItemInBusyState)) return BUSY;\n\n                if (items.some(isItemInReadyState)) return READY;\n\n                return IDLE;\n            },\n\n            GET_ITEM: function GET_ITEM(query) {\n                return getItemByQuery(state.items, query);\n            },\n\n            GET_ACTIVE_ITEM: function GET_ACTIVE_ITEM(query) {\n                return getItemByQuery(getActiveItems(state.items), query);\n            },\n\n            GET_ACTIVE_ITEMS: function GET_ACTIVE_ITEMS() {\n                return getActiveItems(state.items);\n            },\n\n            GET_ITEMS: function GET_ITEMS() {\n                return state.items;\n            },\n\n            GET_ITEM_NAME: function GET_ITEM_NAME(query) {\n                var item = getItemByQuery(state.items, query);\n                return item ? item.filename : null;\n            },\n\n            GET_ITEM_SIZE: function GET_ITEM_SIZE(query) {\n                var item = getItemByQuery(state.items, query);\n                return item ? item.fileSize : null;\n            },\n\n            GET_STYLES: function GET_STYLES() {\n                return Object.keys(state.options)\n                    .filter(function(key) {\n                        return /^style/.test(key);\n                    })\n                    .map(function(option) {\n                        return {\n                            name: option,\n                            value: state.options[option],\n                        };\n                    });\n            },\n\n            GET_PANEL_ASPECT_RATIO: function GET_PANEL_ASPECT_RATIO() {\n                var isShapeCircle = /circle/.test(state.options.stylePanelLayout);\n                var aspectRatio = isShapeCircle\n                    ? 1\n                    : getNumericAspectRatioFromString(state.options.stylePanelAspectRatio);\n                return aspectRatio;\n            },\n\n            GET_ITEM_PANEL_ASPECT_RATIO: function GET_ITEM_PANEL_ASPECT_RATIO() {\n                return state.options.styleItemPanelAspectRatio;\n            },\n\n            GET_ITEMS_BY_STATUS: function GET_ITEMS_BY_STATUS(status) {\n                return getActiveItems(state.items).filter(function(item) {\n                    return item.status === status;\n                });\n            },\n\n            GET_TOTAL_ITEMS: function GET_TOTAL_ITEMS() {\n                return getActiveItems(state.items).length;\n            },\n\n            SHOULD_UPDATE_FILE_INPUT: function SHOULD_UPDATE_FILE_INPUT() {\n                return state.options.storeAsFile && canUpdateFileInput() && !isAsync(state);\n            },\n\n            IS_ASYNC: function IS_ASYNC() {\n                return isAsync(state);\n            },\n\n            GET_FILE_SIZE_LABELS: function GET_FILE_SIZE_LABELS(query) {\n                return {\n                    labelBytes: query('GET_LABEL_FILE_SIZE_BYTES') || undefined,\n                    labelKilobytes: query('GET_LABEL_FILE_SIZE_KILOBYTES') || undefined,\n                    labelMegabytes: query('GET_LABEL_FILE_SIZE_MEGABYTES') || undefined,\n                    labelGigabytes: query('GET_LABEL_FILE_SIZE_GIGABYTES') || undefined,\n                };\n            },\n        };\n    };\n\n    var hasRoomForItem = function hasRoomForItem(state) {\n        var count = getActiveItems(state.items).length;\n\n        // if cannot have multiple items, to add one item it should currently not contain items\n        if (!state.options.allowMultiple) {\n            return count === 0;\n        }\n\n        // if allows multiple items, we check if a max item count has been set, if not, there's no limit\n        var maxFileCount = state.options.maxFiles;\n        if (maxFileCount === null) {\n            return true;\n        }\n\n        // we check if the current count is smaller than the max count, if so, another file can still be added\n        if (count < maxFileCount) {\n            return true;\n        }\n\n        // no more room for another file\n        return false;\n    };\n\n    var limit = function limit(value, min, max) {\n        return Math.max(Math.min(max, value), min);\n    };\n\n    var arrayInsert = function arrayInsert(arr, index, item) {\n        return arr.splice(index, 0, item);\n    };\n\n    var insertItem = function insertItem(items, item, index) {\n        if (isEmpty(item)) {\n            return null;\n        }\n\n        // if index is undefined, append\n        if (typeof index === 'undefined') {\n            items.push(item);\n            return item;\n        }\n\n        // limit the index to the size of the items array\n        index = limit(index, 0, items.length);\n\n        // add item to array\n        arrayInsert(items, index, item);\n\n        // expose\n        return item;\n    };\n\n    var isBase64DataURI = function isBase64DataURI(str) {\n        return /^\\s*data:([a-z]+\\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*)\\s*$/i.test(\n            str\n        );\n    };\n\n    var getFilenameFromURL = function getFilenameFromURL(url) {\n        return ('' + url)\n            .split('/')\n            .pop()\n            .split('?')\n            .shift();\n    };\n\n    var getExtensionFromFilename = function getExtensionFromFilename(name) {\n        return name.split('.').pop();\n    };\n\n    var guesstimateExtension = function guesstimateExtension(type) {\n        // if no extension supplied, exit here\n        if (typeof type !== 'string') {\n            return '';\n        }\n\n        // get subtype\n        var subtype = type.split('/').pop();\n\n        // is svg subtype\n        if (/svg/.test(subtype)) {\n            return 'svg';\n        }\n\n        if (/zip|compressed/.test(subtype)) {\n            return 'zip';\n        }\n\n        if (/plain/.test(subtype)) {\n            return 'txt';\n        }\n\n        if (/msword/.test(subtype)) {\n            return 'doc';\n        }\n\n        // if is valid subtype\n        if (/[a-z]+/.test(subtype)) {\n            // always use jpg extension\n            if (subtype === 'jpeg') {\n                return 'jpg';\n            }\n\n            // return subtype\n            return subtype;\n        }\n\n        return '';\n    };\n\n    var leftPad = function leftPad(value) {\n        var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        return (padding + value).slice(-padding.length);\n    };\n\n    var getDateString = function getDateString() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n        return (\n            date.getFullYear() +\n            '-' +\n            leftPad(date.getMonth() + 1, '00') +\n            '-' +\n            leftPad(date.getDate(), '00') +\n            '_' +\n            leftPad(date.getHours(), '00') +\n            '-' +\n            leftPad(date.getMinutes(), '00') +\n            '-' +\n            leftPad(date.getSeconds(), '00')\n        );\n    };\n\n    var getFileFromBlob = function getFileFromBlob(blob, filename) {\n        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var extension = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var file =\n            typeof type === 'string'\n                ? blob.slice(0, blob.size, type)\n                : blob.slice(0, blob.size, blob.type);\n        file.lastModifiedDate = new Date();\n\n        // copy relative path\n        if (blob._relativePath) file._relativePath = blob._relativePath;\n\n        // if blob has name property, use as filename if no filename supplied\n        if (!isString(filename)) {\n            filename = getDateString();\n        }\n\n        // if filename supplied but no extension and filename has extension\n        if (filename && extension === null && getExtensionFromFilename(filename)) {\n            file.name = filename;\n        } else {\n            extension = extension || guesstimateExtension(file.type);\n            file.name = filename + (extension ? '.' + extension : '');\n        }\n\n        return file;\n    };\n\n    var getBlobBuilder = function getBlobBuilder() {\n        return (window.BlobBuilder =\n            window.BlobBuilder ||\n            window.WebKitBlobBuilder ||\n            window.MozBlobBuilder ||\n            window.MSBlobBuilder);\n    };\n\n    var createBlob = function createBlob(arrayBuffer, mimeType) {\n        var BB = getBlobBuilder();\n\n        if (BB) {\n            var bb = new BB();\n            bb.append(arrayBuffer);\n            return bb.getBlob(mimeType);\n        }\n\n        return new Blob([arrayBuffer], {\n            type: mimeType,\n        });\n    };\n\n    var getBlobFromByteStringWithMimeType = function getBlobFromByteStringWithMimeType(\n        byteString,\n        mimeType\n    ) {\n        var ab = new ArrayBuffer(byteString.length);\n        var ia = new Uint8Array(ab);\n\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n\n        return createBlob(ab, mimeType);\n    };\n\n    var getMimeTypeFromBase64DataURI = function getMimeTypeFromBase64DataURI(dataURI) {\n        return (/^data:(.+);/.exec(dataURI) || [])[1] || null;\n    };\n\n    var getBase64DataFromBase64DataURI = function getBase64DataFromBase64DataURI(dataURI) {\n        // get data part of string (remove data:image/jpeg...,)\n        var data = dataURI.split(',')[1];\n\n        // remove any whitespace as that causes InvalidCharacterError in IE\n        return data.replace(/\\s/g, '');\n    };\n\n    var getByteStringFromBase64DataURI = function getByteStringFromBase64DataURI(dataURI) {\n        return atob(getBase64DataFromBase64DataURI(dataURI));\n    };\n\n    var getBlobFromBase64DataURI = function getBlobFromBase64DataURI(dataURI) {\n        var mimeType = getMimeTypeFromBase64DataURI(dataURI);\n        var byteString = getByteStringFromBase64DataURI(dataURI);\n\n        return getBlobFromByteStringWithMimeType(byteString, mimeType);\n    };\n\n    var getFileFromBase64DataURI = function getFileFromBase64DataURI(dataURI, filename, extension) {\n        return getFileFromBlob(getBlobFromBase64DataURI(dataURI), filename, null, extension);\n    };\n\n    var getFileNameFromHeader = function getFileNameFromHeader(header) {\n        // test if is content disposition header, if not exit\n        if (!/^content-disposition:/i.test(header)) return null;\n\n        // get filename parts\n        var matches = header\n            .split(/filename=|filename\\*=.+''/)\n            .splice(1)\n            .map(function(name) {\n                return name.trim().replace(/^[\"']|[;\"']{0,2}$/g, '');\n            })\n            .filter(function(name) {\n                return name.length;\n            });\n\n        return matches.length ? decodeURI(matches[matches.length - 1]) : null;\n    };\n\n    var getFileSizeFromHeader = function getFileSizeFromHeader(header) {\n        if (/content-length:/i.test(header)) {\n            var size = header.match(/[0-9]+/)[0];\n            return size ? parseInt(size, 10) : null;\n        }\n        return null;\n    };\n\n    var getTranfserIdFromHeader = function getTranfserIdFromHeader(header) {\n        if (/x-content-transfer-id:/i.test(header)) {\n            var id = (header.split(':')[1] || '').trim();\n            return id || null;\n        }\n        return null;\n    };\n\n    var getFileInfoFromHeaders = function getFileInfoFromHeaders(headers) {\n        var info = {\n            source: null,\n            name: null,\n            size: null,\n        };\n\n        var rows = headers.split('\\n');\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n            for (\n                var _iterator = rows[Symbol.iterator](), _step;\n                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n                _iteratorNormalCompletion = true\n            ) {\n                var header = _step.value;\n\n                var name = getFileNameFromHeader(header);\n                if (name) {\n                    info.name = name;\n                    continue;\n                }\n\n                var size = getFileSizeFromHeader(header);\n                if (size) {\n                    info.size = size;\n                    continue;\n                }\n\n                var source = getTranfserIdFromHeader(header);\n                if (source) {\n                    info.source = source;\n                    continue;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return info;\n    };\n\n    var createFileLoader = function createFileLoader(fetchFn) {\n        var state = {\n            source: null,\n            complete: false,\n            progress: 0,\n            size: null,\n            timestamp: null,\n            duration: 0,\n            request: null,\n        };\n\n        var getProgress = function getProgress() {\n            return state.progress;\n        };\n        var abort = function abort() {\n            if (state.request && state.request.abort) {\n                state.request.abort();\n            }\n        };\n\n        // load source\n        var load = function load() {\n            // get quick reference\n            var source = state.source;\n\n            api.fire('init', source);\n\n            // Load Files\n            if (source instanceof File) {\n                api.fire('load', source);\n            } else if (source instanceof Blob) {\n                // Load blobs, set default name to current date\n                api.fire('load', getFileFromBlob(source, source.name));\n            } else if (isBase64DataURI(source)) {\n                // Load base 64, set default name to current date\n                api.fire('load', getFileFromBase64DataURI(source));\n            } else {\n                // Deal as if is external URL, let's load it!\n                loadURL(source);\n            }\n        };\n\n        // loads a url\n        var loadURL = function loadURL(url) {\n            // is remote url and no fetch method supplied\n            if (!fetchFn) {\n                api.fire('error', {\n                    type: 'error',\n                    body: \"Can't load URL\",\n                    code: 400,\n                });\n\n                return;\n            }\n\n            // set request start\n            state.timestamp = Date.now();\n\n            // load file\n            state.request = fetchFn(\n                url,\n                function(response) {\n                    // update duration\n                    state.duration = Date.now() - state.timestamp;\n\n                    // done!\n                    state.complete = true;\n\n                    // turn blob response into a file\n                    if (response instanceof Blob) {\n                        response = getFileFromBlob(\n                            response,\n                            response.name || getFilenameFromURL(url)\n                        );\n                    }\n\n                    api.fire(\n                        'load',\n                        // if has received blob, we go with blob, if no response, we return null\n                        response instanceof Blob ? response : response ? response.body : null\n                    );\n                },\n                function(error) {\n                    api.fire(\n                        'error',\n                        typeof error === 'string'\n                            ? {\n                                  type: 'error',\n                                  code: 0,\n                                  body: error,\n                              }\n                            : error\n                    );\n                },\n                function(computable, current, total) {\n                    // collected some meta data already\n                    if (total) {\n                        state.size = total;\n                    }\n\n                    // update duration\n                    state.duration = Date.now() - state.timestamp;\n\n                    // if we can't compute progress, we're not going to fire progress events\n                    if (!computable) {\n                        state.progress = null;\n                        return;\n                    }\n\n                    // update progress percentage\n                    state.progress = current / total;\n\n                    // expose\n                    api.fire('progress', state.progress);\n                },\n                function() {\n                    api.fire('abort');\n                },\n                function(response) {\n                    var fileinfo = getFileInfoFromHeaders(\n                        typeof response === 'string' ? response : response.headers\n                    );\n                    api.fire('meta', {\n                        size: state.size || fileinfo.size,\n                        filename: fileinfo.name,\n                        source: fileinfo.source,\n                    });\n                }\n            );\n        };\n\n        var api = Object.assign({}, on(), {\n            setSource: function setSource(source) {\n                return (state.source = source);\n            },\n            getProgress: getProgress, // file load progress\n            abort: abort, // abort file load\n            load: load, // start load\n        });\n\n        return api;\n    };\n\n    var isGet = function isGet(method) {\n        return /GET|HEAD/.test(method);\n    };\n\n    var sendRequest = function sendRequest(data, url, options) {\n        var api = {\n            onheaders: function onheaders() {},\n            onprogress: function onprogress() {},\n            onload: function onload() {},\n            ontimeout: function ontimeout() {},\n            onerror: function onerror() {},\n            onabort: function onabort() {},\n            abort: function abort() {\n                aborted = true;\n                xhr.abort();\n            },\n        };\n\n        // timeout identifier, only used when timeout is defined\n        var aborted = false;\n        var headersReceived = false;\n\n        // set default options\n        options = Object.assign(\n            {\n                method: 'POST',\n                headers: {},\n                withCredentials: false,\n            },\n            options\n        );\n\n        // encode url\n        url = encodeURI(url);\n\n        // if method is GET, add any received data to url\n\n        if (isGet(options.method) && data) {\n            url =\n                '' +\n                url +\n                encodeURIComponent(typeof data === 'string' ? data : JSON.stringify(data));\n        }\n\n        // create request\n        var xhr = new XMLHttpRequest();\n\n        // progress of load\n        var process = isGet(options.method) ? xhr : xhr.upload;\n        process.onprogress = function(e) {\n            // no progress event when aborted ( onprogress is called once after abort() )\n            if (aborted) {\n                return;\n            }\n\n            api.onprogress(e.lengthComputable, e.loaded, e.total);\n        };\n\n        // tries to get header info to the app as fast as possible\n        xhr.onreadystatechange = function() {\n            // not interesting in these states ('unsent' and 'openend' as they don't give us any additional info)\n            if (xhr.readyState < 2) {\n                return;\n            }\n\n            // no server response\n            if (xhr.readyState === 4 && xhr.status === 0) {\n                return;\n            }\n\n            if (headersReceived) {\n                return;\n            }\n\n            headersReceived = true;\n\n            // we've probably received some useful data in response headers\n            api.onheaders(xhr);\n        };\n\n        // load successful\n        xhr.onload = function() {\n            // is classified as valid response\n            if (xhr.status >= 200 && xhr.status < 300) {\n                api.onload(xhr);\n            } else {\n                api.onerror(xhr);\n            }\n        };\n\n        // error during load\n        xhr.onerror = function() {\n            return api.onerror(xhr);\n        };\n\n        // request aborted\n        xhr.onabort = function() {\n            aborted = true;\n            api.onabort();\n        };\n\n        // request timeout\n        xhr.ontimeout = function() {\n            return api.ontimeout(xhr);\n        };\n\n        // open up open up!\n        xhr.open(options.method, url, true);\n\n        // set timeout if defined (do it after open so IE11 plays ball)\n        if (isInt(options.timeout)) {\n            xhr.timeout = options.timeout;\n        }\n\n        // add headers\n        Object.keys(options.headers).forEach(function(key) {\n            var value = unescape(encodeURIComponent(options.headers[key]));\n            xhr.setRequestHeader(key, value);\n        });\n\n        // set type of response\n        if (options.responseType) {\n            xhr.responseType = options.responseType;\n        }\n\n        // set credentials\n        if (options.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        // let's send our data\n        xhr.send(data);\n\n        return api;\n    };\n\n    var createResponse = function createResponse(type, code, body, headers) {\n        return {\n            type: type,\n            code: code,\n            body: body,\n            headers: headers,\n        };\n    };\n\n    var createTimeoutResponse = function createTimeoutResponse(cb) {\n        return function(xhr) {\n            cb(createResponse('error', 0, 'Timeout', xhr.getAllResponseHeaders()));\n        };\n    };\n\n    var hasQS = function hasQS(str) {\n        return /\\?/.test(str);\n    };\n    var buildURL = function buildURL() {\n        var url = '';\n        for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {\n            parts[_key] = arguments[_key];\n        }\n        parts.forEach(function(part) {\n            url += hasQS(url) && hasQS(part) ? part.replace(/\\?/, '&') : part;\n        });\n        return url;\n    };\n\n    var createFetchFunction = function createFetchFunction() {\n        var apiUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var action = arguments.length > 1 ? arguments[1] : undefined;\n        // custom handler (should also handle file, load, error, progress and abort)\n        if (typeof action === 'function') {\n            return action;\n        }\n\n        // no action supplied\n        if (!action || !isString(action.url)) {\n            return null;\n        }\n\n        // set onload hanlder\n        var onload =\n            action.onload ||\n            function(res) {\n                return res;\n            };\n        var onerror =\n            action.onerror ||\n            function(res) {\n                return null;\n            };\n\n        // internal handler\n        return function(url, load, error, progress, abort, headers) {\n            // do local or remote request based on if the url is external\n            var request = sendRequest(\n                url,\n                buildURL(apiUrl, action.url),\n                Object.assign({}, action, {\n                    responseType: 'blob',\n                })\n            );\n\n            request.onload = function(xhr) {\n                // get headers\n                var headers = xhr.getAllResponseHeaders();\n\n                // get filename\n                var filename = getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n\n                // create response\n                load(\n                    createResponse(\n                        'load',\n                        xhr.status,\n                        action.method === 'HEAD'\n                            ? null\n                            : getFileFromBlob(onload(xhr.response), filename),\n                        headers\n                    )\n                );\n            };\n\n            request.onerror = function(xhr) {\n                error(\n                    createResponse(\n                        'error',\n                        xhr.status,\n                        onerror(xhr.response) || xhr.statusText,\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.onheaders = function(xhr) {\n                headers(createResponse('headers', xhr.status, null, xhr.getAllResponseHeaders()));\n            };\n\n            request.ontimeout = createTimeoutResponse(error);\n            request.onprogress = progress;\n            request.onabort = abort;\n\n            // should return request\n            return request;\n        };\n    };\n\n    var ChunkStatus = {\n        QUEUED: 0,\n        COMPLETE: 1,\n        PROCESSING: 2,\n        ERROR: 3,\n        WAITING: 4,\n    };\n\n    /*\n                                                       function signature:\n                                                         (file, metadata, load, error, progress, abort, transfer, options) => {\n                                                           return {\n                                                           abort:() => {}\n                                                         }\n                                                       }\n                                                       */\n\n    // apiUrl, action, name, file, metadata, load, error, progress, abort, transfer, options\n    var processFileChunked = function processFileChunked(\n        apiUrl,\n        action,\n        name,\n        file,\n        metadata,\n        load,\n        error,\n        progress,\n        abort,\n        transfer,\n        options\n    ) {\n        // all chunks\n        var chunks = [];\n        var chunkTransferId = options.chunkTransferId,\n            chunkServer = options.chunkServer,\n            chunkSize = options.chunkSize,\n            chunkRetryDelays = options.chunkRetryDelays;\n\n        // default state\n        var state = {\n            serverId: chunkTransferId,\n            aborted: false,\n        };\n\n        // set onload handlers\n        var ondata =\n            action.ondata ||\n            function(fd) {\n                return fd;\n            };\n        var onload =\n            action.onload ||\n            function(xhr, method) {\n                return method === 'HEAD' ? xhr.getResponseHeader('Upload-Offset') : xhr.response;\n            };\n        var onerror =\n            action.onerror ||\n            function(res) {\n                return null;\n            };\n\n        // create server hook\n        var requestTransferId = function requestTransferId(cb) {\n            var formData = new FormData();\n\n            // add metadata under same name\n            if (isObject(metadata)) formData.append(name, JSON.stringify(metadata));\n\n            var headers =\n                typeof action.headers === 'function'\n                    ? action.headers(file, metadata)\n                    : Object.assign(\n                          {},\n\n                          action.headers,\n                          {\n                              'Upload-Length': file.size,\n                          }\n                      );\n\n            var requestParams = Object.assign({}, action, {\n                headers: headers,\n            });\n\n            // send request object\n            var request = sendRequest(\n                ondata(formData),\n                buildURL(apiUrl, action.url),\n                requestParams\n            );\n\n            request.onload = function(xhr) {\n                return cb(onload(xhr, requestParams.method));\n            };\n\n            request.onerror = function(xhr) {\n                return error(\n                    createResponse(\n                        'error',\n                        xhr.status,\n                        onerror(xhr.response) || xhr.statusText,\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.ontimeout = createTimeoutResponse(error);\n        };\n\n        var requestTransferOffset = function requestTransferOffset(cb) {\n            var requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n\n            var headers =\n                typeof action.headers === 'function'\n                    ? action.headers(state.serverId)\n                    : Object.assign(\n                          {},\n\n                          action.headers\n                      );\n\n            var requestParams = {\n                headers: headers,\n                method: 'HEAD',\n            };\n\n            var request = sendRequest(null, requestUrl, requestParams);\n\n            request.onload = function(xhr) {\n                return cb(onload(xhr, requestParams.method));\n            };\n\n            request.onerror = function(xhr) {\n                return error(\n                    createResponse(\n                        'error',\n                        xhr.status,\n                        onerror(xhr.response) || xhr.statusText,\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.ontimeout = createTimeoutResponse(error);\n        };\n\n        // create chunks\n        var lastChunkIndex = Math.floor(file.size / chunkSize);\n        for (var i = 0; i <= lastChunkIndex; i++) {\n            var offset = i * chunkSize;\n            var data = file.slice(offset, offset + chunkSize, 'application/offset+octet-stream');\n            chunks[i] = {\n                index: i,\n                size: data.size,\n                offset: offset,\n                data: data,\n                file: file,\n                progress: 0,\n                retries: _toConsumableArray(chunkRetryDelays),\n                status: ChunkStatus.QUEUED,\n                error: null,\n                request: null,\n                timeout: null,\n            };\n        }\n\n        var completeProcessingChunks = function completeProcessingChunks() {\n            return load(state.serverId);\n        };\n\n        var canProcessChunk = function canProcessChunk(chunk) {\n            return chunk.status === ChunkStatus.QUEUED || chunk.status === ChunkStatus.ERROR;\n        };\n\n        var processChunk = function processChunk(chunk) {\n            // processing is paused, wait here\n            if (state.aborted) return;\n\n            // get next chunk to process\n            chunk = chunk || chunks.find(canProcessChunk);\n\n            // no more chunks to process\n            if (!chunk) {\n                // all done?\n                if (\n                    chunks.every(function(chunk) {\n                        return chunk.status === ChunkStatus.COMPLETE;\n                    })\n                ) {\n                    completeProcessingChunks();\n                }\n\n                // no chunk to handle\n                return;\n            }\n\n            // now processing this chunk\n            chunk.status = ChunkStatus.PROCESSING;\n            chunk.progress = null;\n\n            // allow parsing of formdata\n            var ondata =\n                chunkServer.ondata ||\n                function(fd) {\n                    return fd;\n                };\n            var onerror =\n                chunkServer.onerror ||\n                function(res) {\n                    return null;\n                };\n            var onload = chunkServer.onload || function() {};\n\n            // send request object\n            var requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n\n            var headers =\n                typeof chunkServer.headers === 'function'\n                    ? chunkServer.headers(chunk)\n                    : Object.assign(\n                          {},\n\n                          chunkServer.headers,\n                          {\n                              'Content-Type': 'application/offset+octet-stream',\n                              'Upload-Offset': chunk.offset,\n                              'Upload-Length': file.size,\n                              'Upload-Name': file.name,\n                          }\n                      );\n\n            var request = (chunk.request = sendRequest(\n                ondata(chunk.data),\n                requestUrl,\n                Object.assign({}, chunkServer, {\n                    headers: headers,\n                })\n            ));\n\n            request.onload = function(xhr) {\n                // allow hooking into request result\n                onload(xhr, chunk.index, chunks.length);\n\n                // done!\n                chunk.status = ChunkStatus.COMPLETE;\n\n                // remove request reference\n                chunk.request = null;\n\n                // start processing more chunks\n                processChunks();\n            };\n\n            request.onprogress = function(lengthComputable, loaded, total) {\n                chunk.progress = lengthComputable ? loaded : null;\n                updateTotalProgress();\n            };\n\n            request.onerror = function(xhr) {\n                chunk.status = ChunkStatus.ERROR;\n                chunk.request = null;\n                chunk.error = onerror(xhr.response) || xhr.statusText;\n                if (!retryProcessChunk(chunk)) {\n                    error(\n                        createResponse(\n                            'error',\n                            xhr.status,\n                            onerror(xhr.response) || xhr.statusText,\n                            xhr.getAllResponseHeaders()\n                        )\n                    );\n                }\n            };\n\n            request.ontimeout = function(xhr) {\n                chunk.status = ChunkStatus.ERROR;\n                chunk.request = null;\n                if (!retryProcessChunk(chunk)) {\n                    createTimeoutResponse(error)(xhr);\n                }\n            };\n\n            request.onabort = function() {\n                chunk.status = ChunkStatus.QUEUED;\n                chunk.request = null;\n                abort();\n            };\n        };\n\n        var retryProcessChunk = function retryProcessChunk(chunk) {\n            // no more retries left\n            if (chunk.retries.length === 0) return false;\n\n            // new retry\n            chunk.status = ChunkStatus.WAITING;\n            clearTimeout(chunk.timeout);\n            chunk.timeout = setTimeout(function() {\n                processChunk(chunk);\n            }, chunk.retries.shift());\n\n            // we're going to retry\n            return true;\n        };\n\n        var updateTotalProgress = function updateTotalProgress() {\n            // calculate total progress fraction\n            var totalBytesTransfered = chunks.reduce(function(p, chunk) {\n                if (p === null || chunk.progress === null) return null;\n                return p + chunk.progress;\n            }, 0);\n\n            // can't compute progress\n            if (totalBytesTransfered === null) return progress(false, 0, 0);\n\n            // calculate progress values\n            var totalSize = chunks.reduce(function(total, chunk) {\n                return total + chunk.size;\n            }, 0);\n\n            // can update progress indicator\n            progress(true, totalBytesTransfered, totalSize);\n        };\n\n        // process new chunks\n        var processChunks = function processChunks() {\n            var totalProcessing = chunks.filter(function(chunk) {\n                return chunk.status === ChunkStatus.PROCESSING;\n            }).length;\n            if (totalProcessing >= 1) return;\n            processChunk();\n        };\n\n        var abortChunks = function abortChunks() {\n            chunks.forEach(function(chunk) {\n                clearTimeout(chunk.timeout);\n                if (chunk.request) {\n                    chunk.request.abort();\n                }\n            });\n        };\n\n        // let's go!\n        if (!state.serverId) {\n            requestTransferId(function(serverId) {\n                // stop here if aborted, might have happened in between request and callback\n                if (state.aborted) return;\n\n                // pass back to item so we can use it if something goes wrong\n                transfer(serverId);\n\n                // store internally\n                state.serverId = serverId;\n                processChunks();\n            });\n        } else {\n            requestTransferOffset(function(offset) {\n                // stop here if aborted, might have happened in between request and callback\n                if (state.aborted) return;\n\n                // mark chunks with lower offset as complete\n                chunks\n                    .filter(function(chunk) {\n                        return chunk.offset < offset;\n                    })\n                    .forEach(function(chunk) {\n                        chunk.status = ChunkStatus.COMPLETE;\n                        chunk.progress = chunk.size;\n                    });\n\n                // continue processing\n                processChunks();\n            });\n        }\n\n        return {\n            abort: function abort() {\n                state.aborted = true;\n                abortChunks();\n            },\n        };\n    };\n\n    /*\n                                                               function signature:\n                                                                 (file, metadata, load, error, progress, abort) => {\n                                                                   return {\n                                                                   abort:() => {}\n                                                                 }\n                                                               }\n                                                               */\n    var createFileProcessorFunction = function createFileProcessorFunction(\n        apiUrl,\n        action,\n        name,\n        options\n    ) {\n        return function(file, metadata, load, error, progress, abort, transfer) {\n            // no file received\n            if (!file) return;\n\n            // if was passed a file, and we can chunk it, exit here\n            var canChunkUpload = options.chunkUploads;\n            var shouldChunkUpload = canChunkUpload && file.size > options.chunkSize;\n            var willChunkUpload = canChunkUpload && (shouldChunkUpload || options.chunkForce);\n            if (file instanceof Blob && willChunkUpload)\n                return processFileChunked(\n                    apiUrl,\n                    action,\n                    name,\n                    file,\n                    metadata,\n                    load,\n                    error,\n                    progress,\n                    abort,\n                    transfer,\n                    options\n                );\n\n            // set handlers\n            var ondata =\n                action.ondata ||\n                function(fd) {\n                    return fd;\n                };\n            var onload =\n                action.onload ||\n                function(res) {\n                    return res;\n                };\n            var onerror =\n                action.onerror ||\n                function(res) {\n                    return null;\n                };\n\n            var headers =\n                typeof action.headers === 'function'\n                    ? action.headers(file, metadata) || {}\n                    : Object.assign(\n                          {},\n\n                          action.headers\n                      );\n\n            var requestParams = Object.assign({}, action, {\n                headers: headers,\n            });\n\n            // create formdata object\n            var formData = new FormData();\n\n            // add metadata under same name\n            if (isObject(metadata)) {\n                formData.append(name, JSON.stringify(metadata));\n            }\n\n            // Turn into an array of objects so no matter what the input, we can handle it the same way\n            (file instanceof Blob ? [{ name: null, file: file }] : file).forEach(function(item) {\n                formData.append(\n                    name,\n                    item.file,\n                    item.name === null ? item.file.name : '' + item.name + item.file.name\n                );\n            });\n\n            // send request object\n            var request = sendRequest(\n                ondata(formData),\n                buildURL(apiUrl, action.url),\n                requestParams\n            );\n            request.onload = function(xhr) {\n                load(\n                    createResponse(\n                        'load',\n                        xhr.status,\n                        onload(xhr.response),\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.onerror = function(xhr) {\n                error(\n                    createResponse(\n                        'error',\n                        xhr.status,\n                        onerror(xhr.response) || xhr.statusText,\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.ontimeout = createTimeoutResponse(error);\n            request.onprogress = progress;\n            request.onabort = abort;\n\n            // should return request\n            return request;\n        };\n    };\n\n    var createProcessorFunction = function createProcessorFunction() {\n        var apiUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var action = arguments.length > 1 ? arguments[1] : undefined;\n        var name = arguments.length > 2 ? arguments[2] : undefined;\n        var options = arguments.length > 3 ? arguments[3] : undefined;\n\n        // custom handler (should also handle file, load, error, progress and abort)\n        if (typeof action === 'function')\n            return function() {\n                for (\n                    var _len = arguments.length, params = new Array(_len), _key = 0;\n                    _key < _len;\n                    _key++\n                ) {\n                    params[_key] = arguments[_key];\n                }\n                return action.apply(void 0, [name].concat(params, [options]));\n            };\n\n        // no action supplied\n        if (!action || !isString(action.url)) return null;\n\n        // internal handler\n        return createFileProcessorFunction(apiUrl, action, name, options);\n    };\n\n    /*\n                                                      function signature:\n                                                      (uniqueFileId, load, error) => { }\n                                                      */\n    var createRevertFunction = function createRevertFunction() {\n        var apiUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var action = arguments.length > 1 ? arguments[1] : undefined;\n        // is custom implementation\n        if (typeof action === 'function') {\n            return action;\n        }\n\n        // no action supplied, return stub function, interface will work, but file won't be removed\n        if (!action || !isString(action.url)) {\n            return function(uniqueFileId, load) {\n                return load();\n            };\n        }\n\n        // set onload hanlder\n        var onload =\n            action.onload ||\n            function(res) {\n                return res;\n            };\n        var onerror =\n            action.onerror ||\n            function(res) {\n                return null;\n            };\n\n        // internal implementation\n        return function(uniqueFileId, load, error) {\n            var request = sendRequest(\n                uniqueFileId,\n                apiUrl + action.url,\n                action // contains method, headers and withCredentials properties\n            );\n            request.onload = function(xhr) {\n                load(\n                    createResponse(\n                        'load',\n                        xhr.status,\n                        onload(xhr.response),\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.onerror = function(xhr) {\n                error(\n                    createResponse(\n                        'error',\n                        xhr.status,\n                        onerror(xhr.response) || xhr.statusText,\n                        xhr.getAllResponseHeaders()\n                    )\n                );\n            };\n\n            request.ontimeout = createTimeoutResponse(error);\n\n            return request;\n        };\n    };\n\n    var getRandomNumber = function getRandomNumber() {\n        var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        return min + Math.random() * (max - min);\n    };\n\n    var createPerceivedPerformanceUpdater = function createPerceivedPerformanceUpdater(cb) {\n        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var tickMin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 25;\n        var tickMax = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 250;\n        var timeout = null;\n        var start = Date.now();\n\n        var tick = function tick() {\n            var runtime = Date.now() - start;\n            var delay = getRandomNumber(tickMin, tickMax);\n\n            if (runtime + delay > duration) {\n                delay = runtime + delay - duration;\n            }\n\n            var progress = runtime / duration;\n            if (progress >= 1 || document.hidden) {\n                cb(1);\n                return;\n            }\n\n            cb(progress);\n\n            timeout = setTimeout(tick, delay);\n        };\n\n        if (duration > 0) tick();\n\n        return {\n            clear: function clear() {\n                clearTimeout(timeout);\n            },\n        };\n    };\n\n    var createFileProcessor = function createFileProcessor(processFn, options) {\n        var state = {\n            complete: false,\n            perceivedProgress: 0,\n            perceivedPerformanceUpdater: null,\n            progress: null,\n            timestamp: null,\n            perceivedDuration: 0,\n            duration: 0,\n            request: null,\n            response: null,\n        };\n        var allowMinimumUploadDuration = options.allowMinimumUploadDuration;\n\n        var process = function process(file, metadata) {\n            var progressFn = function progressFn() {\n                // we've not yet started the real download, stop here\n                // the request might not go through, for instance, there might be some server trouble\n                // if state.progress is null, the server does not allow computing progress and we show the spinner instead\n                if (state.duration === 0 || state.progress === null) return;\n\n                // as we're now processing, fire the progress event\n                api.fire('progress', api.getProgress());\n            };\n\n            var completeFn = function completeFn() {\n                state.complete = true;\n                api.fire('load-perceived', state.response.body);\n            };\n\n            // let's start processing\n            api.fire('start');\n\n            // set request start\n            state.timestamp = Date.now();\n\n            // create perceived performance progress indicator\n            state.perceivedPerformanceUpdater = createPerceivedPerformanceUpdater(\n                function(progress) {\n                    state.perceivedProgress = progress;\n                    state.perceivedDuration = Date.now() - state.timestamp;\n\n                    progressFn();\n\n                    // if fake progress is done, and a response has been received,\n                    // and we've not yet called the complete method\n                    if (state.response && state.perceivedProgress === 1 && !state.complete) {\n                        // we done!\n                        completeFn();\n                    }\n                },\n                // random delay as in a list of files you start noticing\n                // files uploading at the exact same speed\n                allowMinimumUploadDuration ? getRandomNumber(750, 1500) : 0\n            );\n\n            // remember request so we can abort it later\n            state.request = processFn(\n                // the file to process\n                file,\n\n                // the metadata to send along\n                metadata,\n\n                // callbacks (load, error, progress, abort, transfer)\n                // load expects the body to be a server id if\n                // you want to make use of revert\n                function(response) {\n                    // we put the response in state so we can access\n                    // it outside of this method\n                    state.response = isObject(response)\n                        ? response\n                        : {\n                              type: 'load',\n                              code: 200,\n                              body: '' + response,\n                              headers: {},\n                          };\n\n                    // update duration\n                    state.duration = Date.now() - state.timestamp;\n\n                    // force progress to 1 as we're now done\n                    state.progress = 1;\n\n                    // actual load is done let's share results\n                    api.fire('load', state.response.body);\n\n                    // we are really done\n                    // if perceived progress is 1 ( wait for perceived progress to complete )\n                    // or if server does not support progress ( null )\n                    if (\n                        !allowMinimumUploadDuration ||\n                        (allowMinimumUploadDuration && state.perceivedProgress === 1)\n                    ) {\n                        completeFn();\n                    }\n                },\n\n                // error is expected to be an object with type, code, body\n                function(error) {\n                    // cancel updater\n                    state.perceivedPerformanceUpdater.clear();\n\n                    // update others about this error\n                    api.fire(\n                        'error',\n                        isObject(error)\n                            ? error\n                            : {\n                                  type: 'error',\n                                  code: 0,\n                                  body: '' + error,\n                              }\n                    );\n                },\n\n                // actual processing progress\n                function(computable, current, total) {\n                    // update actual duration\n                    state.duration = Date.now() - state.timestamp;\n\n                    // update actual progress\n                    state.progress = computable ? current / total : null;\n\n                    progressFn();\n                },\n\n                // abort does not expect a value\n                function() {\n                    // stop updater\n                    state.perceivedPerformanceUpdater.clear();\n\n                    // fire the abort event so we can switch visuals\n                    api.fire('abort', state.response ? state.response.body : null);\n                },\n\n                // register the id for this transfer\n                function(transferId) {\n                    api.fire('transfer', transferId);\n                }\n            );\n        };\n\n        var abort = function abort() {\n            // no request running, can't abort\n            if (!state.request) return;\n\n            // stop updater\n            state.perceivedPerformanceUpdater.clear();\n\n            // abort actual request\n            if (state.request.abort) state.request.abort();\n\n            // if has response object, we've completed the request\n            state.complete = true;\n        };\n\n        var reset = function reset() {\n            abort();\n            state.complete = false;\n            state.perceivedProgress = 0;\n            state.progress = 0;\n            state.timestamp = null;\n            state.perceivedDuration = 0;\n            state.duration = 0;\n            state.request = null;\n            state.response = null;\n        };\n\n        var getProgress = allowMinimumUploadDuration\n            ? function() {\n                  return state.progress ? Math.min(state.progress, state.perceivedProgress) : null;\n              }\n            : function() {\n                  return state.progress || null;\n              };\n\n        var getDuration = allowMinimumUploadDuration\n            ? function() {\n                  return Math.min(state.duration, state.perceivedDuration);\n              }\n            : function() {\n                  return state.duration;\n              };\n\n        var api = Object.assign({}, on(), {\n            process: process, // start processing file\n            abort: abort, // abort active process request\n            getProgress: getProgress,\n            getDuration: getDuration,\n            reset: reset,\n        });\n\n        return api;\n    };\n\n    var getFilenameWithoutExtension = function getFilenameWithoutExtension(name) {\n        return name.substring(0, name.lastIndexOf('.')) || name;\n    };\n\n    var createFileStub = function createFileStub(source) {\n        var data = [source.name, source.size, source.type];\n\n        // is blob or base64, then we need to set the name\n        if (source instanceof Blob || isBase64DataURI(source)) {\n            data[0] = source.name || getDateString();\n        } else if (isBase64DataURI(source)) {\n            // if is base64 data uri we need to determine the average size and type\n            data[1] = source.length;\n            data[2] = getMimeTypeFromBase64DataURI(source);\n        } else if (isString(source)) {\n            // url\n            data[0] = getFilenameFromURL(source);\n            data[1] = 0;\n            data[2] = 'application/octet-stream';\n        }\n\n        return {\n            name: data[0],\n            size: data[1],\n            type: data[2],\n        };\n    };\n\n    var isFile = function isFile(value) {\n        return !!(value instanceof File || (value instanceof Blob && value.name));\n    };\n\n    var deepCloneObject = function deepCloneObject(src) {\n        if (!isObject(src)) return src;\n        var target = isArray(src) ? [] : {};\n        for (var key in src) {\n            if (!src.hasOwnProperty(key)) continue;\n            var v = src[key];\n            target[key] = v && isObject(v) ? deepCloneObject(v) : v;\n        }\n        return target;\n    };\n\n    var createItem = function createItem() {\n        var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var serverFileReference =\n            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        // unique id for this item, is used to identify the item across views\n        var id = getUniqueId();\n\n        /**\n         * Internal item state\n         */\n        var state = {\n            // is archived\n            archived: false,\n\n            // if is frozen, no longer fires events\n            frozen: false,\n\n            // removed from view\n            released: false,\n\n            // original source\n            source: null,\n\n            // file model reference\n            file: file,\n\n            // id of file on server\n            serverFileReference: serverFileReference,\n\n            // id of file transfer on server\n            transferId: null,\n\n            // is aborted\n            processingAborted: false,\n\n            // current item status\n            status: serverFileReference ? ItemStatus.PROCESSING_COMPLETE : ItemStatus.INIT,\n\n            // active processes\n            activeLoader: null,\n            activeProcessor: null,\n        };\n\n        // callback used when abort processing is called to link back to the resolve method\n        var abortProcessingRequestComplete = null;\n\n        /**\n         * Externally added item metadata\n         */\n        var metadata = {};\n\n        // item data\n        var setStatus = function setStatus(status) {\n            return (state.status = status);\n        };\n\n        // fire event unless the item has been archived\n        var fire = function fire(event) {\n            if (state.released || state.frozen) return;\n            for (\n                var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1;\n                _key < _len;\n                _key++\n            ) {\n                params[_key - 1] = arguments[_key];\n            }\n            api.fire.apply(api, [event].concat(params));\n        };\n\n        // file data\n        var getFileExtension = function getFileExtension() {\n            return getExtensionFromFilename(state.file.name);\n        };\n        var getFileType = function getFileType() {\n            return state.file.type;\n        };\n        var getFileSize = function getFileSize() {\n            return state.file.size;\n        };\n        var getFile = function getFile() {\n            return state.file;\n        };\n\n        //\n        // logic to load a file\n        //\n        var load = function load(source, loader, onload) {\n            // remember the original item source\n            state.source = source;\n\n            // source is known\n            api.fireSync('init');\n\n            // file stub is already there\n            if (state.file) {\n                api.fireSync('load-skip');\n                return;\n            }\n\n            // set a stub file object while loading the actual data\n            state.file = createFileStub(source);\n\n            // starts loading\n            loader.on('init', function() {\n                fire('load-init');\n            });\n\n            // we'eve received a size indication, let's update the stub\n            loader.on('meta', function(meta) {\n                // set size of file stub\n                state.file.size = meta.size;\n\n                // set name of file stub\n                state.file.filename = meta.filename;\n\n                // if has received source, we done\n                if (meta.source) {\n                    origin = FileOrigin.LIMBO;\n                    state.serverFileReference = meta.source;\n                    state.status = ItemStatus.PROCESSING_COMPLETE;\n                }\n\n                // size has been updated\n                fire('load-meta');\n            });\n\n            // the file is now loading we need to update the progress indicators\n            loader.on('progress', function(progress) {\n                setStatus(ItemStatus.LOADING);\n\n                fire('load-progress', progress);\n            });\n\n            // an error was thrown while loading the file, we need to switch to error state\n            loader.on('error', function(error) {\n                setStatus(ItemStatus.LOAD_ERROR);\n\n                fire('load-request-error', error);\n            });\n\n            // user or another process aborted the file load (cannot retry)\n            loader.on('abort', function() {\n                setStatus(ItemStatus.INIT);\n                fire('load-abort');\n            });\n\n            // done loading\n            loader.on('load', function(file) {\n                // as we've now loaded the file the loader is no longer required\n                state.activeLoader = null;\n\n                // called when file has loaded succesfully\n                var success = function success(result) {\n                    // set (possibly) transformed file\n                    state.file = isFile(result) ? result : state.file;\n\n                    // file received\n                    if (origin === FileOrigin.LIMBO && state.serverFileReference) {\n                        setStatus(ItemStatus.PROCESSING_COMPLETE);\n                    } else {\n                        setStatus(ItemStatus.IDLE);\n                    }\n\n                    fire('load');\n                };\n\n                var error = function error(result) {\n                    // set original file\n                    state.file = file;\n                    fire('load-meta');\n\n                    setStatus(ItemStatus.LOAD_ERROR);\n                    fire('load-file-error', result);\n                };\n\n                // if we already have a server file reference, we don't need to call the onload method\n                if (state.serverFileReference) {\n                    success(file);\n                    return;\n                }\n\n                // no server id, let's give this file the full treatment\n                onload(file, success, error);\n            });\n\n            // set loader source data\n            loader.setSource(source);\n\n            // set as active loader\n            state.activeLoader = loader;\n\n            // load the source data\n            loader.load();\n        };\n\n        var retryLoad = function retryLoad() {\n            if (!state.activeLoader) {\n                return;\n            }\n            state.activeLoader.load();\n        };\n\n        var abortLoad = function abortLoad() {\n            if (state.activeLoader) {\n                state.activeLoader.abort();\n                return;\n            }\n            setStatus(ItemStatus.INIT);\n            fire('load-abort');\n        };\n\n        //\n        // logic to process a file\n        //\n        var process = function process(processor, onprocess) {\n            // processing was aborted\n            if (state.processingAborted) {\n                state.processingAborted = false;\n                return;\n            }\n\n            // now processing\n            setStatus(ItemStatus.PROCESSING);\n\n            // reset abort callback\n            abortProcessingRequestComplete = null;\n\n            // if no file loaded we'll wait for the load event\n            if (!(state.file instanceof Blob)) {\n                api.on('load', function() {\n                    process(processor, onprocess);\n                });\n                return;\n            }\n\n            // setup processor\n            processor.on('load', function(serverFileReference) {\n                // need this id to be able to revert the upload\n                state.transferId = null;\n                state.serverFileReference = serverFileReference;\n            });\n\n            // register transfer id\n            processor.on('transfer', function(transferId) {\n                // need this id to be able to revert the upload\n                state.transferId = transferId;\n            });\n\n            processor.on('load-perceived', function(serverFileReference) {\n                // no longer required\n                state.activeProcessor = null;\n\n                // need this id to be able to rever the upload\n                state.transferId = null;\n                state.serverFileReference = serverFileReference;\n\n                setStatus(ItemStatus.PROCESSING_COMPLETE);\n                fire('process-complete', serverFileReference);\n            });\n\n            processor.on('start', function() {\n                fire('process-start');\n            });\n\n            processor.on('error', function(error) {\n                state.activeProcessor = null;\n                setStatus(ItemStatus.PROCESSING_ERROR);\n                fire('process-error', error);\n            });\n\n            processor.on('abort', function(serverFileReference) {\n                state.activeProcessor = null;\n\n                // if file was uploaded but processing was cancelled during perceived processor time store file reference\n                state.serverFileReference = serverFileReference;\n\n                setStatus(ItemStatus.IDLE);\n                fire('process-abort');\n\n                // has timeout so doesn't interfere with remove action\n                if (abortProcessingRequestComplete) {\n                    abortProcessingRequestComplete();\n                }\n            });\n\n            processor.on('progress', function(progress) {\n                fire('process-progress', progress);\n            });\n\n            // when successfully transformed\n            var success = function success(file) {\n                // if was archived in the mean time, don't process\n                if (state.archived) return;\n\n                // process file!\n                processor.process(file, Object.assign({}, metadata));\n            };\n\n            // something went wrong during transform phase\n            var error = console.error;\n\n            // start processing the file\n            onprocess(state.file, success, error);\n\n            // set as active processor\n            state.activeProcessor = processor;\n        };\n\n        var requestProcessing = function requestProcessing() {\n            state.processingAborted = false;\n            setStatus(ItemStatus.PROCESSING_QUEUED);\n        };\n\n        var abortProcessing = function abortProcessing() {\n            return new Promise(function(resolve) {\n                if (!state.activeProcessor) {\n                    state.processingAborted = true;\n\n                    setStatus(ItemStatus.IDLE);\n                    fire('process-abort');\n\n                    resolve();\n                    return;\n                }\n\n                abortProcessingRequestComplete = function abortProcessingRequestComplete() {\n                    resolve();\n                };\n\n                state.activeProcessor.abort();\n            });\n        };\n\n        //\n        // logic to revert a processed file\n        //\n        var revert = function revert(revertFileUpload, forceRevert) {\n            return new Promise(function(resolve, reject) {\n                // a completed upload will have a serverFileReference, a failed chunked upload where\n                // getting a serverId succeeded but >=0 chunks have been uploaded will have transferId set\n                var serverTransferId =\n                    state.serverFileReference !== null\n                        ? state.serverFileReference\n                        : state.transferId;\n\n                // cannot revert without a server id for this process\n                if (serverTransferId === null) {\n                    resolve();\n                    return;\n                }\n\n                // revert the upload (fire and forget)\n                revertFileUpload(\n                    serverTransferId,\n                    function() {\n                        // reset file server id and transfer id as now it's not available on the server\n                        state.serverFileReference = null;\n                        state.transferId = null;\n                        resolve();\n                    },\n                    function(error) {\n                        // don't set error state when reverting is optional, it will always resolve\n                        if (!forceRevert) {\n                            resolve();\n                            return;\n                        }\n\n                        // oh no errors\n                        setStatus(ItemStatus.PROCESSING_REVERT_ERROR);\n                        fire('process-revert-error');\n                        reject(error);\n                    }\n                );\n\n                // fire event\n                setStatus(ItemStatus.IDLE);\n                fire('process-revert');\n            });\n        };\n\n        // exposed methods\n        var _setMetadata = function setMetadata(key, value, silent) {\n            var keys = key.split('.');\n            var root = keys[0];\n            var last = keys.pop();\n            var data = metadata;\n            keys.forEach(function(key) {\n                return (data = data[key]);\n            });\n\n            // compare old value against new value, if they're the same, we're not updating\n            if (JSON.stringify(data[last]) === JSON.stringify(value)) return;\n\n            // update value\n            data[last] = value;\n\n            // fire update\n            fire('metadata-update', {\n                key: root,\n                value: metadata[root],\n                silent: silent,\n            });\n        };\n\n        var getMetadata = function getMetadata(key) {\n            return deepCloneObject(key ? metadata[key] : metadata);\n        };\n\n        var api = Object.assign(\n            {\n                id: {\n                    get: function get() {\n                        return id;\n                    },\n                },\n                origin: {\n                    get: function get() {\n                        return origin;\n                    },\n                    set: function set(value) {\n                        return (origin = value);\n                    },\n                },\n                serverId: {\n                    get: function get() {\n                        return state.serverFileReference;\n                    },\n                },\n                transferId: {\n                    get: function get() {\n                        return state.transferId;\n                    },\n                },\n                status: {\n                    get: function get() {\n                        return state.status;\n                    },\n                },\n                filename: {\n                    get: function get() {\n                        return state.file.name;\n                    },\n                },\n                filenameWithoutExtension: {\n                    get: function get() {\n                        return getFilenameWithoutExtension(state.file.name);\n                    },\n                },\n                fileExtension: { get: getFileExtension },\n                fileType: { get: getFileType },\n                fileSize: { get: getFileSize },\n                file: { get: getFile },\n                relativePath: {\n                    get: function get() {\n                        return state.file._relativePath;\n                    },\n                },\n\n                source: {\n                    get: function get() {\n                        return state.source;\n                    },\n                },\n\n                getMetadata: getMetadata,\n                setMetadata: function setMetadata(key, value, silent) {\n                    if (isObject(key)) {\n                        var data = key;\n                        Object.keys(data).forEach(function(key) {\n                            _setMetadata(key, data[key], value);\n                        });\n                        return key;\n                    }\n                    _setMetadata(key, value, silent);\n                    return value;\n                },\n\n                extend: function extend(name, handler) {\n                    return (itemAPI[name] = handler);\n                },\n\n                abortLoad: abortLoad,\n                retryLoad: retryLoad,\n                requestProcessing: requestProcessing,\n                abortProcessing: abortProcessing,\n\n                load: load,\n                process: process,\n                revert: revert,\n            },\n\n            on(),\n            {\n                freeze: function freeze() {\n                    return (state.frozen = true);\n                },\n\n                release: function release() {\n                    return (state.released = true);\n                },\n                released: {\n                    get: function get() {\n                        return state.released;\n                    },\n                },\n\n                archive: function archive() {\n                    return (state.archived = true);\n                },\n                archived: {\n                    get: function get() {\n                        return state.archived;\n                    },\n                },\n\n                // replace source and file object\n                setFile: function setFile(file) {\n                    return (state.file = file);\n                },\n            }\n        );\n\n        // create it here instead of returning it instantly so we can extend it later\n        var itemAPI = createObject(api);\n\n        return itemAPI;\n    };\n\n    var getItemIndexByQuery = function getItemIndexByQuery(items, query) {\n        // just return first index\n        if (isEmpty(query)) {\n            return 0;\n        }\n\n        // invalid queries\n        if (!isString(query)) {\n            return -1;\n        }\n\n        // return item by id (or -1 if not found)\n        return items.findIndex(function(item) {\n            return item.id === query;\n        });\n    };\n\n    var getItemById = function getItemById(items, itemId) {\n        var index = getItemIndexByQuery(items, itemId);\n        if (index < 0) {\n            return;\n        }\n        return items[index] || null;\n    };\n\n    var fetchBlob = function fetchBlob(url, load, error, progress, abort, headers) {\n        var request = sendRequest(null, url, {\n            method: 'GET',\n            responseType: 'blob',\n        });\n\n        request.onload = function(xhr) {\n            // get headers\n            var headers = xhr.getAllResponseHeaders();\n\n            // get filename\n            var filename = getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n\n            // create response\n            load(\n                createResponse('load', xhr.status, getFileFromBlob(xhr.response, filename), headers)\n            );\n        };\n\n        request.onerror = function(xhr) {\n            error(createResponse('error', xhr.status, xhr.statusText, xhr.getAllResponseHeaders()));\n        };\n\n        request.onheaders = function(xhr) {\n            headers(createResponse('headers', xhr.status, null, xhr.getAllResponseHeaders()));\n        };\n\n        request.ontimeout = createTimeoutResponse(error);\n        request.onprogress = progress;\n        request.onabort = abort;\n\n        // should return request\n        return request;\n    };\n\n    var getDomainFromURL = function getDomainFromURL(url) {\n        if (url.indexOf('//') === 0) {\n            url = location.protocol + url;\n        }\n        return url\n            .toLowerCase()\n            .replace('blob:', '')\n            .replace(/([a-z])?:\\/\\//, '$1')\n            .split('/')[0];\n    };\n\n    var isExternalURL = function isExternalURL(url) {\n        return (\n            (url.indexOf(':') > -1 || url.indexOf('//') > -1) &&\n            getDomainFromURL(location.href) !== getDomainFromURL(url)\n        );\n    };\n\n    var dynamicLabel = function dynamicLabel(label) {\n        return function() {\n            return isFunction(label) ? label.apply(void 0, arguments) : label;\n        };\n    };\n\n    var isMockItem = function isMockItem(item) {\n        return !isFile(item.file);\n    };\n\n    var listUpdated = function listUpdated(dispatch, state) {\n        clearTimeout(state.listUpdateTimeout);\n        state.listUpdateTimeout = setTimeout(function() {\n            dispatch('DID_UPDATE_ITEMS', { items: getActiveItems(state.items) });\n        }, 0);\n    };\n\n    var optionalPromise = function optionalPromise(fn) {\n        for (\n            var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1;\n            _key < _len;\n            _key++\n        ) {\n            params[_key - 1] = arguments[_key];\n        }\n        return new Promise(function(resolve) {\n            if (!fn) {\n                return resolve(true);\n            }\n\n            var result = fn.apply(void 0, params);\n\n            if (result == null) {\n                return resolve(true);\n            }\n\n            if (typeof result === 'boolean') {\n                return resolve(result);\n            }\n\n            if (typeof result.then === 'function') {\n                result.then(resolve);\n            }\n        });\n    };\n\n    var sortItems = function sortItems(state, compare) {\n        state.items.sort(function(a, b) {\n            return compare(createItemAPI(a), createItemAPI(b));\n        });\n    };\n\n    // returns item based on state\n    var getItemByQueryFromState = function getItemByQueryFromState(state, itemHandler) {\n        return function() {\n            var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var query = _ref.query,\n                _ref$success = _ref.success,\n                success = _ref$success === void 0 ? function() {} : _ref$success,\n                _ref$failure = _ref.failure,\n                failure = _ref$failure === void 0 ? function() {} : _ref$failure,\n                options = _objectWithoutProperties(_ref, ['query', 'success', 'failure']);\n            var item = getItemByQuery(state.items, query);\n            if (!item) {\n                failure({\n                    error: createResponse('error', 0, 'Item not found'),\n                    file: null,\n                });\n\n                return;\n            }\n            itemHandler(item, success, failure, options || {});\n        };\n    };\n\n    var actions = function actions(dispatch, query, state) {\n        return {\n            /**\n             * Aborts all ongoing processes\n             */\n            ABORT_ALL: function ABORT_ALL() {\n                getActiveItems(state.items).forEach(function(item) {\n                    item.freeze();\n                    item.abortLoad();\n                    item.abortProcessing();\n                });\n            },\n\n            /**\n             * Sets initial files\n             */\n            DID_SET_FILES: function DID_SET_FILES(_ref2) {\n                var _ref2$value = _ref2.value,\n                    value = _ref2$value === void 0 ? [] : _ref2$value;\n                // map values to file objects\n                var files = value.map(function(file) {\n                    return {\n                        source: file.source ? file.source : file,\n                        options: file.options,\n                    };\n                });\n\n                // loop over files, if file is in list, leave it be, if not, remove\n                // test if items should be moved\n                var activeItems = getActiveItems(state.items);\n\n                activeItems.forEach(function(item) {\n                    // if item not is in new value, remove\n                    if (\n                        !files.find(function(file) {\n                            return file.source === item.source || file.source === item.file;\n                        })\n                    ) {\n                        dispatch('REMOVE_ITEM', { query: item, remove: false });\n                    }\n                });\n\n                // add new files\n                activeItems = getActiveItems(state.items);\n                files.forEach(function(file, index) {\n                    // if file is already in list\n                    if (\n                        activeItems.find(function(item) {\n                            return item.source === file.source || item.file === file.source;\n                        })\n                    )\n                        return;\n\n                    // not in list, add\n                    dispatch(\n                        'ADD_ITEM',\n                        Object.assign({}, file, {\n                            interactionMethod: InteractionMethod.NONE,\n                            index: index,\n                        })\n                    );\n                });\n            },\n\n            DID_UPDATE_ITEM_METADATA: function DID_UPDATE_ITEM_METADATA(_ref3) {\n                var id = _ref3.id,\n                    action = _ref3.action,\n                    change = _ref3.change;\n                // don't do anything\n                if (change.silent) return;\n\n                // if is called multiple times in close succession we combined all calls together to save resources\n                clearTimeout(state.itemUpdateTimeout);\n                state.itemUpdateTimeout = setTimeout(function() {\n                    var item = getItemById(state.items, id);\n\n                    // only revert and attempt to upload when we're uploading to a server\n                    if (!query('IS_ASYNC')) {\n                        // should we update the output data\n                        applyFilterChain('SHOULD_PREPARE_OUTPUT', false, {\n                            item: item,\n                            query: query,\n                            action: action,\n                            change: change,\n                        }).then(function(shouldPrepareOutput) {\n                            // plugins determined the output data should be prepared (or not), can be adjusted with beforePrepareOutput hook\n                            var beforePrepareFile = query('GET_BEFORE_PREPARE_FILE');\n                            if (beforePrepareFile)\n                                shouldPrepareOutput = beforePrepareFile(item, shouldPrepareOutput);\n\n                            if (!shouldPrepareOutput) return;\n\n                            dispatch(\n                                'REQUEST_PREPARE_OUTPUT',\n                                {\n                                    query: id,\n                                    item: item,\n                                    success: function success(file) {\n                                        dispatch('DID_PREPARE_OUTPUT', { id: id, file: file });\n                                    },\n                                },\n\n                                true\n                            );\n                        });\n\n                        return;\n                    }\n\n                    // if is local item we need to enable upload button so change can be propagated to server\n                    if (item.origin === FileOrigin.LOCAL) {\n                        dispatch('DID_LOAD_ITEM', {\n                            id: item.id,\n                            error: null,\n                            serverFileReference: item.source,\n                        });\n                    }\n\n                    // for async scenarios\n                    var upload = function upload() {\n                        // we push this forward a bit so the interface is updated correctly\n                        setTimeout(function() {\n                            dispatch('REQUEST_ITEM_PROCESSING', { query: id });\n                        }, 32);\n                    };\n\n                    var revert = function revert(doUpload) {\n                        item.revert(\n                            createRevertFunction(\n                                state.options.server.url,\n                                state.options.server.revert\n                            ),\n                            query('GET_FORCE_REVERT')\n                        )\n                            .then(doUpload ? upload : function() {})\n                            .catch(function() {});\n                    };\n\n                    var abort = function abort(doUpload) {\n                        item.abortProcessing().then(doUpload ? upload : function() {});\n                    };\n\n                    // if we should re-upload the file immediately\n                    if (item.status === ItemStatus.PROCESSING_COMPLETE) {\n                        return revert(state.options.instantUpload);\n                    }\n\n                    // if currently uploading, cancel upload\n                    if (item.status === ItemStatus.PROCESSING) {\n                        return abort(state.options.instantUpload);\n                    }\n\n                    if (state.options.instantUpload) {\n                        upload();\n                    }\n                }, 0);\n            },\n\n            MOVE_ITEM: function MOVE_ITEM(_ref4) {\n                var query = _ref4.query,\n                    index = _ref4.index;\n                var item = getItemByQuery(state.items, query);\n                if (!item) return;\n                var currentIndex = state.items.indexOf(item);\n                index = limit(index, 0, state.items.length - 1);\n                if (currentIndex === index) return;\n                state.items.splice(index, 0, state.items.splice(currentIndex, 1)[0]);\n            },\n\n            SORT: function SORT(_ref5) {\n                var compare = _ref5.compare;\n                sortItems(state, compare);\n                dispatch('DID_SORT_ITEMS', {\n                    items: query('GET_ACTIVE_ITEMS'),\n                });\n            },\n\n            ADD_ITEMS: function ADD_ITEMS(_ref6) {\n                var items = _ref6.items,\n                    index = _ref6.index,\n                    interactionMethod = _ref6.interactionMethod,\n                    _ref6$success = _ref6.success,\n                    success = _ref6$success === void 0 ? function() {} : _ref6$success,\n                    _ref6$failure = _ref6.failure,\n                    failure = _ref6$failure === void 0 ? function() {} : _ref6$failure;\n                var currentIndex = index;\n\n                if (index === -1 || typeof index === 'undefined') {\n                    var insertLocation = query('GET_ITEM_INSERT_LOCATION');\n                    var totalItems = query('GET_TOTAL_ITEMS');\n                    currentIndex = insertLocation === 'before' ? 0 : totalItems;\n                }\n\n                var ignoredFiles = query('GET_IGNORED_FILES');\n                var isValidFile = function isValidFile(source) {\n                    return isFile(source)\n                        ? !ignoredFiles.includes(source.name.toLowerCase())\n                        : !isEmpty(source);\n                };\n                var validItems = items.filter(isValidFile);\n\n                var promises = validItems.map(function(source) {\n                    return new Promise(function(resolve, reject) {\n                        dispatch('ADD_ITEM', {\n                            interactionMethod: interactionMethod,\n                            source: source.source || source,\n                            success: resolve,\n                            failure: reject,\n                            index: currentIndex++,\n                            options: source.options || {},\n                        });\n                    });\n                });\n\n                Promise.all(promises)\n                    .then(success)\n                    .catch(failure);\n            },\n\n            /**\n             * @param source\n             * @param index\n             * @param interactionMethod\n             */\n            ADD_ITEM: function ADD_ITEM(_ref7) {\n                var source = _ref7.source,\n                    _ref7$index = _ref7.index,\n                    index = _ref7$index === void 0 ? -1 : _ref7$index,\n                    interactionMethod = _ref7.interactionMethod,\n                    _ref7$success = _ref7.success,\n                    success = _ref7$success === void 0 ? function() {} : _ref7$success,\n                    _ref7$failure = _ref7.failure,\n                    failure = _ref7$failure === void 0 ? function() {} : _ref7$failure,\n                    _ref7$options = _ref7.options,\n                    options = _ref7$options === void 0 ? {} : _ref7$options;\n                // if no source supplied\n                if (isEmpty(source)) {\n                    failure({\n                        error: createResponse('error', 0, 'No source'),\n                        file: null,\n                    });\n\n                    return;\n                }\n\n                // filter out invalid file items, used to filter dropped directory contents\n                if (\n                    isFile(source) &&\n                    state.options.ignoredFiles.includes(source.name.toLowerCase())\n                ) {\n                    // fail silently\n                    return;\n                }\n\n                // test if there's still room in the list of files\n                if (!hasRoomForItem(state)) {\n                    // if multiple allowed, we can't replace\n                    // or if only a single item is allowed but we're not allowed to replace it we exit\n                    if (\n                        state.options.allowMultiple ||\n                        (!state.options.allowMultiple && !state.options.allowReplace)\n                    ) {\n                        var error = createResponse('warning', 0, 'Max files');\n\n                        dispatch('DID_THROW_MAX_FILES', {\n                            source: source,\n                            error: error,\n                        });\n\n                        failure({ error: error, file: null });\n\n                        return;\n                    }\n\n                    // let's replace the item\n                    // id of first item we're about to remove\n                    var _item = getActiveItems(state.items)[0];\n\n                    // if has been processed remove it from the server as well\n                    if (\n                        _item.status === ItemStatus.PROCESSING_COMPLETE ||\n                        _item.status === ItemStatus.PROCESSING_REVERT_ERROR\n                    ) {\n                        var forceRevert = query('GET_FORCE_REVERT');\n                        _item\n                            .revert(\n                                createRevertFunction(\n                                    state.options.server.url,\n                                    state.options.server.revert\n                                ),\n                                forceRevert\n                            )\n                            .then(function() {\n                                if (!forceRevert) return;\n\n                                // try to add now\n                                dispatch('ADD_ITEM', {\n                                    source: source,\n                                    index: index,\n                                    interactionMethod: interactionMethod,\n                                    success: success,\n                                    failure: failure,\n                                    options: options,\n                                });\n                            })\n                            .catch(function() {}); // no need to handle this catch state for now\n\n                        if (forceRevert) return;\n                    }\n\n                    // remove first item as it will be replaced by this item\n                    dispatch('REMOVE_ITEM', { query: _item.id });\n                }\n\n                // where did the file originate\n                var origin =\n                    options.type === 'local'\n                        ? FileOrigin.LOCAL\n                        : options.type === 'limbo'\n                        ? FileOrigin.LIMBO\n                        : FileOrigin.INPUT;\n\n                // create a new blank item\n                var item = createItem(\n                    // where did this file come from\n                    origin,\n\n                    // an input file never has a server file reference\n                    origin === FileOrigin.INPUT ? null : source,\n\n                    // file mock data, if defined\n                    options.file\n                );\n\n                // set initial meta data\n                Object.keys(options.metadata || {}).forEach(function(key) {\n                    item.setMetadata(key, options.metadata[key]);\n                });\n\n                // created the item, let plugins add methods\n                applyFilters('DID_CREATE_ITEM', item, { query: query, dispatch: dispatch });\n\n                // where to insert new items\n                var itemInsertLocation = query('GET_ITEM_INSERT_LOCATION');\n\n                // adjust index if is not allowed to pick location\n                if (!state.options.itemInsertLocationFreedom) {\n                    index = itemInsertLocation === 'before' ? -1 : state.items.length;\n                }\n\n                // add item to list\n                insertItem(state.items, item, index);\n\n                // sort items in list\n                if (isFunction(itemInsertLocation) && source) {\n                    sortItems(state, itemInsertLocation);\n                }\n\n                // get a quick reference to the item id\n                var id = item.id;\n\n                // observe item events\n                item.on('init', function() {\n                    dispatch('DID_INIT_ITEM', { id: id });\n                });\n\n                item.on('load-init', function() {\n                    dispatch('DID_START_ITEM_LOAD', { id: id });\n                });\n\n                item.on('load-meta', function() {\n                    dispatch('DID_UPDATE_ITEM_META', { id: id });\n                });\n\n                item.on('load-progress', function(progress) {\n                    dispatch('DID_UPDATE_ITEM_LOAD_PROGRESS', { id: id, progress: progress });\n                });\n\n                item.on('load-request-error', function(error) {\n                    var mainStatus = dynamicLabel(state.options.labelFileLoadError)(error);\n\n                    // is client error, no way to recover\n                    if (error.code >= 400 && error.code < 500) {\n                        dispatch('DID_THROW_ITEM_INVALID', {\n                            id: id,\n                            error: error,\n                            status: {\n                                main: mainStatus,\n                                sub: error.code + ' (' + error.body + ')',\n                            },\n                        });\n\n                        // reject the file so can be dealt with through API\n                        failure({ error: error, file: createItemAPI(item) });\n                        return;\n                    }\n\n                    // is possible server error, so might be possible to retry\n                    dispatch('DID_THROW_ITEM_LOAD_ERROR', {\n                        id: id,\n                        error: error,\n                        status: {\n                            main: mainStatus,\n                            sub: state.options.labelTapToRetry,\n                        },\n                    });\n                });\n\n                item.on('load-file-error', function(error) {\n                    dispatch('DID_THROW_ITEM_INVALID', {\n                        id: id,\n                        error: error.status,\n                        status: error.status,\n                    });\n\n                    failure({ error: error.status, file: createItemAPI(item) });\n                });\n\n                item.on('load-abort', function() {\n                    dispatch('REMOVE_ITEM', { query: id });\n                });\n\n                item.on('load-skip', function() {\n                    item.on('metadata-update', function(change) {\n                        if (!isFile(item.file)) return;\n                        dispatch('DID_UPDATE_ITEM_METADATA', { id: id, change: change });\n                    });\n\n                    dispatch('COMPLETE_LOAD_ITEM', {\n                        query: id,\n                        item: item,\n                        data: {\n                            source: source,\n                            success: success,\n                        },\n                    });\n                });\n\n                item.on('load', function() {\n                    var handleAdd = function handleAdd(shouldAdd) {\n                        // no should not add this file\n                        if (!shouldAdd) {\n                            dispatch('REMOVE_ITEM', {\n                                query: id,\n                            });\n\n                            return;\n                        }\n\n                        // now interested in metadata updates\n                        item.on('metadata-update', function(change) {\n                            dispatch('DID_UPDATE_ITEM_METADATA', { id: id, change: change });\n                        });\n\n                        // let plugins decide if the output data should be prepared at this point\n                        // means we'll do this and wait for idle state\n                        applyFilterChain('SHOULD_PREPARE_OUTPUT', false, {\n                            item: item,\n                            query: query,\n                        }).then(function(shouldPrepareOutput) {\n                            // plugins determined the output data should be prepared (or not), can be adjusted with beforePrepareOutput hook\n                            var beforePrepareFile = query('GET_BEFORE_PREPARE_FILE');\n                            if (beforePrepareFile)\n                                shouldPrepareOutput = beforePrepareFile(item, shouldPrepareOutput);\n\n                            var loadComplete = function loadComplete() {\n                                dispatch('COMPLETE_LOAD_ITEM', {\n                                    query: id,\n                                    item: item,\n                                    data: {\n                                        source: source,\n                                        success: success,\n                                    },\n                                });\n\n                                listUpdated(dispatch, state);\n                            };\n\n                            // exit\n                            if (shouldPrepareOutput) {\n                                // wait for idle state and then run PREPARE_OUTPUT\n                                dispatch(\n                                    'REQUEST_PREPARE_OUTPUT',\n                                    {\n                                        query: id,\n                                        item: item,\n                                        success: function success(file) {\n                                            dispatch('DID_PREPARE_OUTPUT', { id: id, file: file });\n                                            loadComplete();\n                                        },\n                                    },\n\n                                    true\n                                );\n\n                                return;\n                            }\n\n                            loadComplete();\n                        });\n                    };\n\n                    // item loaded, allow plugins to\n                    // - read data (quickly)\n                    // - add metadata\n                    applyFilterChain('DID_LOAD_ITEM', item, { query: query, dispatch: dispatch })\n                        .then(function() {\n                            optionalPromise(query('GET_BEFORE_ADD_FILE'), createItemAPI(item)).then(\n                                handleAdd\n                            );\n                        })\n                        .catch(function(e) {\n                            if (!e || !e.error || !e.status) return handleAdd(false);\n                            dispatch('DID_THROW_ITEM_INVALID', {\n                                id: id,\n                                error: e.error,\n                                status: e.status,\n                            });\n                        });\n                });\n\n                item.on('process-start', function() {\n                    dispatch('DID_START_ITEM_PROCESSING', { id: id });\n                });\n\n                item.on('process-progress', function(progress) {\n                    dispatch('DID_UPDATE_ITEM_PROCESS_PROGRESS', { id: id, progress: progress });\n                });\n\n                item.on('process-error', function(error) {\n                    dispatch('DID_THROW_ITEM_PROCESSING_ERROR', {\n                        id: id,\n                        error: error,\n                        status: {\n                            main: dynamicLabel(state.options.labelFileProcessingError)(error),\n                            sub: state.options.labelTapToRetry,\n                        },\n                    });\n                });\n\n                item.on('process-revert-error', function(error) {\n                    dispatch('DID_THROW_ITEM_PROCESSING_REVERT_ERROR', {\n                        id: id,\n                        error: error,\n                        status: {\n                            main: dynamicLabel(state.options.labelFileProcessingRevertError)(error),\n                            sub: state.options.labelTapToRetry,\n                        },\n                    });\n                });\n\n                item.on('process-complete', function(serverFileReference) {\n                    dispatch('DID_COMPLETE_ITEM_PROCESSING', {\n                        id: id,\n                        error: null,\n                        serverFileReference: serverFileReference,\n                    });\n\n                    dispatch('DID_DEFINE_VALUE', { id: id, value: serverFileReference });\n                });\n\n                item.on('process-abort', function() {\n                    dispatch('DID_ABORT_ITEM_PROCESSING', { id: id });\n                });\n\n                item.on('process-revert', function() {\n                    dispatch('DID_REVERT_ITEM_PROCESSING', { id: id });\n                    dispatch('DID_DEFINE_VALUE', { id: id, value: null });\n                });\n\n                // let view know the item has been inserted\n                dispatch('DID_ADD_ITEM', {\n                    id: id,\n                    index: index,\n                    interactionMethod: interactionMethod,\n                });\n\n                listUpdated(dispatch, state);\n\n                // start loading the source\n                var _ref8 = state.options.server || {},\n                    url = _ref8.url,\n                    load = _ref8.load,\n                    restore = _ref8.restore,\n                    fetch = _ref8.fetch;\n\n                item.load(\n                    source,\n\n                    // this creates a function that loads the file based on the type of file (string, base64, blob, file) and location of file (local, remote, limbo)\n                    createFileLoader(\n                        origin === FileOrigin.INPUT\n                            ? // input, if is remote, see if should use custom fetch, else use default fetchBlob\n                              isString(source) && isExternalURL(source)\n                                ? fetch\n                                    ? createFetchFunction(url, fetch)\n                                    : fetchBlob // remote url\n                                : fetchBlob // try to fetch url\n                            : // limbo or local\n                            origin === FileOrigin.LIMBO\n                            ? createFetchFunction(url, restore) // limbo\n                            : createFetchFunction(url, load) // local\n                    ),\n\n                    // called when the file is loaded so it can be piped through the filters\n                    function(file, success, error) {\n                        // let's process the file\n                        applyFilterChain('LOAD_FILE', file, { query: query })\n                            .then(success)\n                            .catch(error);\n                    }\n                );\n            },\n\n            REQUEST_PREPARE_OUTPUT: function REQUEST_PREPARE_OUTPUT(_ref9) {\n                var item = _ref9.item,\n                    success = _ref9.success,\n                    _ref9$failure = _ref9.failure,\n                    failure = _ref9$failure === void 0 ? function() {} : _ref9$failure;\n                // error response if item archived\n                var err = {\n                    error: createResponse('error', 0, 'Item not found'),\n                    file: null,\n                };\n\n                // don't handle archived items, an item could have been archived (load aborted) while waiting to be prepared\n                if (item.archived) return failure(err);\n\n                // allow plugins to alter the file data\n                applyFilterChain('PREPARE_OUTPUT', item.file, { query: query, item: item }).then(\n                    function(result) {\n                        applyFilterChain('COMPLETE_PREPARE_OUTPUT', result, {\n                            query: query,\n                            item: item,\n                        }).then(function(result) {\n                            // don't handle archived items, an item could have been archived (load aborted) while being prepared\n                            if (item.archived) return failure(err);\n\n                            // we done!\n                            success(result);\n                        });\n                    }\n                );\n            },\n\n            COMPLETE_LOAD_ITEM: function COMPLETE_LOAD_ITEM(_ref10) {\n                var item = _ref10.item,\n                    data = _ref10.data;\n                var success = data.success,\n                    source = data.source;\n\n                // sort items in list\n                var itemInsertLocation = query('GET_ITEM_INSERT_LOCATION');\n                if (isFunction(itemInsertLocation) && source) {\n                    sortItems(state, itemInsertLocation);\n                }\n\n                // let interface know the item has loaded\n                dispatch('DID_LOAD_ITEM', {\n                    id: item.id,\n                    error: null,\n                    serverFileReference: item.origin === FileOrigin.INPUT ? null : source,\n                });\n\n                // item has been successfully loaded and added to the\n                // list of items so can now be safely returned for use\n                success(createItemAPI(item));\n\n                // if this is a local server file we need to show a different state\n                if (item.origin === FileOrigin.LOCAL) {\n                    dispatch('DID_LOAD_LOCAL_ITEM', { id: item.id });\n                    return;\n                }\n\n                // if is a temp server file we prevent async upload call here (as the file is already on the server)\n                if (item.origin === FileOrigin.LIMBO) {\n                    dispatch('DID_COMPLETE_ITEM_PROCESSING', {\n                        id: item.id,\n                        error: null,\n                        serverFileReference: source,\n                    });\n\n                    dispatch('DID_DEFINE_VALUE', {\n                        id: item.id,\n                        value: item.serverId || source,\n                    });\n\n                    return;\n                }\n\n                // id we are allowed to upload the file immediately, lets do it\n                if (query('IS_ASYNC') && state.options.instantUpload) {\n                    dispatch('REQUEST_ITEM_PROCESSING', { query: item.id });\n                }\n            },\n\n            RETRY_ITEM_LOAD: getItemByQueryFromState(state, function(item) {\n                // try loading the source one more time\n                item.retryLoad();\n            }),\n\n            REQUEST_ITEM_PREPARE: getItemByQueryFromState(state, function(item, _success, failure) {\n                dispatch(\n                    'REQUEST_PREPARE_OUTPUT',\n                    {\n                        query: item.id,\n                        item: item,\n                        success: function success(file) {\n                            dispatch('DID_PREPARE_OUTPUT', { id: item.id, file: file });\n                            _success({\n                                file: item,\n                                output: file,\n                            });\n                        },\n                        failure: failure,\n                    },\n\n                    true\n                );\n            }),\n\n            REQUEST_ITEM_PROCESSING: getItemByQueryFromState(state, function(\n                item,\n                success,\n                failure\n            ) {\n                // cannot be queued (or is already queued)\n                var itemCanBeQueuedForProcessing =\n                    // waiting for something\n                    item.status === ItemStatus.IDLE ||\n                    // processing went wrong earlier\n                    item.status === ItemStatus.PROCESSING_ERROR;\n\n                // not ready to be processed\n                if (!itemCanBeQueuedForProcessing) {\n                    var processNow = function processNow() {\n                        return dispatch('REQUEST_ITEM_PROCESSING', {\n                            query: item,\n                            success: success,\n                            failure: failure,\n                        });\n                    };\n\n                    var process = function process() {\n                        return document.hidden ? processNow() : setTimeout(processNow, 32);\n                    };\n\n                    // if already done processing or tried to revert but didn't work, try again\n                    if (\n                        item.status === ItemStatus.PROCESSING_COMPLETE ||\n                        item.status === ItemStatus.PROCESSING_REVERT_ERROR\n                    ) {\n                        item.revert(\n                            createRevertFunction(\n                                state.options.server.url,\n                                state.options.server.revert\n                            ),\n                            query('GET_FORCE_REVERT')\n                        )\n                            .then(process)\n                            .catch(function() {}); // don't continue with processing if something went wrong\n                    } else if (item.status === ItemStatus.PROCESSING) {\n                        item.abortProcessing().then(process);\n                    }\n\n                    return;\n                }\n\n                // already queued for processing\n                if (item.status === ItemStatus.PROCESSING_QUEUED) return;\n\n                item.requestProcessing();\n\n                dispatch('DID_REQUEST_ITEM_PROCESSING', { id: item.id });\n\n                dispatch('PROCESS_ITEM', { query: item, success: success, failure: failure }, true);\n            }),\n\n            PROCESS_ITEM: getItemByQueryFromState(state, function(item, success, failure) {\n                var maxParallelUploads = query('GET_MAX_PARALLEL_UPLOADS');\n                var totalCurrentUploads = query('GET_ITEMS_BY_STATUS', ItemStatus.PROCESSING)\n                    .length;\n\n                // queue and wait till queue is freed up\n                if (totalCurrentUploads === maxParallelUploads) {\n                    // queue for later processing\n                    state.processingQueue.push({\n                        id: item.id,\n                        success: success,\n                        failure: failure,\n                    });\n\n                    // stop it!\n                    return;\n                }\n\n                // if was not queued or is already processing exit here\n                if (item.status === ItemStatus.PROCESSING) return;\n\n                var processNext = function processNext() {\n                    // process queueud items\n                    var queueEntry = state.processingQueue.shift();\n\n                    // no items left\n                    if (!queueEntry) return;\n\n                    // get item reference\n                    var id = queueEntry.id,\n                        success = queueEntry.success,\n                        failure = queueEntry.failure;\n                    var itemReference = getItemByQuery(state.items, id);\n\n                    // if item was archived while in queue, jump to next\n                    if (!itemReference || itemReference.archived) {\n                        processNext();\n                        return;\n                    }\n\n                    // process queued item\n                    dispatch(\n                        'PROCESS_ITEM',\n                        { query: id, success: success, failure: failure },\n                        true\n                    );\n                };\n\n                // we done function\n                item.onOnce('process-complete', function() {\n                    success(createItemAPI(item));\n                    processNext();\n\n                    // if origin is local, and we're instant uploading, trigger remove of original\n                    // as revert will remove file from list\n                    var server = state.options.server;\n                    var instantUpload = state.options.instantUpload;\n                    if (\n                        instantUpload &&\n                        item.origin === FileOrigin.LOCAL &&\n                        isFunction(server.remove)\n                    ) {\n                        var noop = function noop() {};\n                        item.origin = FileOrigin.LIMBO;\n                        state.options.server.remove(item.source, noop, noop);\n                    }\n\n                    // All items processed? No errors?\n                    var allItemsProcessed =\n                        query('GET_ITEMS_BY_STATUS', ItemStatus.PROCESSING_COMPLETE).length ===\n                        state.items.length;\n                    if (allItemsProcessed) {\n                        dispatch('DID_COMPLETE_ITEM_PROCESSING_ALL');\n                    }\n                });\n\n                // we error function\n                item.onOnce('process-error', function(error) {\n                    failure({ error: error, file: createItemAPI(item) });\n                    processNext();\n                });\n\n                // start file processing\n                var options = state.options;\n                item.process(\n                    createFileProcessor(\n                        createProcessorFunction(\n                            options.server.url,\n                            options.server.process,\n                            options.name,\n                            {\n                                chunkTransferId: item.transferId,\n                                chunkServer: options.server.patch,\n                                chunkUploads: options.chunkUploads,\n                                chunkForce: options.chunkForce,\n                                chunkSize: options.chunkSize,\n                                chunkRetryDelays: options.chunkRetryDelays,\n                            }\n                        ),\n\n                        {\n                            allowMinimumUploadDuration: query('GET_ALLOW_MINIMUM_UPLOAD_DURATION'),\n                        }\n                    ),\n\n                    // called when the file is about to be processed so it can be piped through the transform filters\n                    function(file, success, error) {\n                        // allow plugins to alter the file data\n                        applyFilterChain('PREPARE_OUTPUT', file, { query: query, item: item })\n                            .then(function(file) {\n                                dispatch('DID_PREPARE_OUTPUT', { id: item.id, file: file });\n\n                                success(file);\n                            })\n                            .catch(error);\n                    }\n                );\n            }),\n\n            RETRY_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n                dispatch('REQUEST_ITEM_PROCESSING', { query: item });\n            }),\n\n            REQUEST_REMOVE_ITEM: getItemByQueryFromState(state, function(item) {\n                optionalPromise(query('GET_BEFORE_REMOVE_FILE'), createItemAPI(item)).then(function(\n                    shouldRemove\n                ) {\n                    if (!shouldRemove) {\n                        return;\n                    }\n                    dispatch('REMOVE_ITEM', { query: item });\n                });\n            }),\n\n            RELEASE_ITEM: getItemByQueryFromState(state, function(item) {\n                item.release();\n            }),\n\n            REMOVE_ITEM: getItemByQueryFromState(state, function(item, success, failure, options) {\n                var removeFromView = function removeFromView() {\n                    // get id reference\n                    var id = item.id;\n\n                    // archive the item, this does not remove it from the list\n                    getItemById(state.items, id).archive();\n\n                    // tell the view the item has been removed\n                    dispatch('DID_REMOVE_ITEM', { error: null, id: id, item: item });\n\n                    // now the list has been modified\n                    listUpdated(dispatch, state);\n\n                    // correctly removed\n                    success(createItemAPI(item));\n                };\n\n                // if this is a local file and the `server.remove` function has been configured,\n                // send source there so dev can remove file from server\n                var server = state.options.server;\n                if (\n                    item.origin === FileOrigin.LOCAL &&\n                    server &&\n                    isFunction(server.remove) &&\n                    options.remove !== false\n                ) {\n                    dispatch('DID_START_ITEM_REMOVE', { id: item.id });\n\n                    server.remove(\n                        item.source,\n                        function() {\n                            return removeFromView();\n                        },\n                        function(status) {\n                            dispatch('DID_THROW_ITEM_REMOVE_ERROR', {\n                                id: item.id,\n                                error: createResponse('error', 0, status, null),\n                                status: {\n                                    main: dynamicLabel(state.options.labelFileRemoveError)(status),\n                                    sub: state.options.labelTapToRetry,\n                                },\n                            });\n                        }\n                    );\n                } else {\n                    // if is requesting revert and can revert need to call revert handler (not calling request_ because that would also trigger beforeRemoveHook)\n                    if (\n                        (options.revert &&\n                            item.origin !== FileOrigin.LOCAL &&\n                            item.serverId !== null) ||\n                        // if chunked uploads are enabled and we're uploading in chunks for this specific file\n                        // or if the file isn't big enough for chunked uploads but chunkForce is set then call\n                        // revert before removing from the view...\n                        (state.options.chunkUploads && item.file.size > state.options.chunkSize) ||\n                        (state.options.chunkUploads && state.options.chunkForce)\n                    ) {\n                        item.revert(\n                            createRevertFunction(\n                                state.options.server.url,\n                                state.options.server.revert\n                            ),\n                            query('GET_FORCE_REVERT')\n                        );\n                    }\n\n                    // can now safely remove from view\n                    removeFromView();\n                }\n            }),\n\n            ABORT_ITEM_LOAD: getItemByQueryFromState(state, function(item) {\n                item.abortLoad();\n            }),\n\n            ABORT_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n                // test if is already processed\n                if (item.serverId) {\n                    dispatch('REVERT_ITEM_PROCESSING', { id: item.id });\n                    return;\n                }\n\n                // abort\n                item.abortProcessing().then(function() {\n                    var shouldRemove = state.options.instantUpload;\n                    if (shouldRemove) {\n                        dispatch('REMOVE_ITEM', { query: item.id });\n                    }\n                });\n            }),\n\n            REQUEST_REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n                // not instant uploading, revert immediately\n                if (!state.options.instantUpload) {\n                    dispatch('REVERT_ITEM_PROCESSING', { query: item });\n                    return;\n                }\n\n                // if we're instant uploading the file will also be removed if we revert,\n                // so if a before remove file hook is defined we need to run it now\n                var handleRevert = function handleRevert(shouldRevert) {\n                    if (!shouldRevert) return;\n                    dispatch('REVERT_ITEM_PROCESSING', { query: item });\n                };\n\n                var fn = query('GET_BEFORE_REMOVE_FILE');\n                if (!fn) {\n                    return handleRevert(true);\n                }\n\n                var requestRemoveResult = fn(createItemAPI(item));\n                if (requestRemoveResult == null) {\n                    // undefined or null\n                    return handleRevert(true);\n                }\n\n                if (typeof requestRemoveResult === 'boolean') {\n                    return handleRevert(requestRemoveResult);\n                }\n\n                if (typeof requestRemoveResult.then === 'function') {\n                    requestRemoveResult.then(handleRevert);\n                }\n            }),\n\n            REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n                item.revert(\n                    createRevertFunction(state.options.server.url, state.options.server.revert),\n                    query('GET_FORCE_REVERT')\n                )\n                    .then(function() {\n                        var shouldRemove = state.options.instantUpload || isMockItem(item);\n                        if (shouldRemove) {\n                            dispatch('REMOVE_ITEM', { query: item.id });\n                        }\n                    })\n                    .catch(function() {});\n            }),\n\n            SET_OPTIONS: function SET_OPTIONS(_ref11) {\n                var options = _ref11.options;\n                // get all keys passed\n                var optionKeys = Object.keys(options);\n\n                // get prioritized keyed to include (remove once not in options object)\n                var prioritizedOptionKeys = PrioritizedOptions.filter(function(key) {\n                    return optionKeys.includes(key);\n                });\n\n                // order the keys, prioritized first, then rest\n                var orderedOptionKeys = [].concat(\n                    _toConsumableArray(prioritizedOptionKeys),\n                    _toConsumableArray(\n                        Object.keys(options).filter(function(key) {\n                            return !prioritizedOptionKeys.includes(key);\n                        })\n                    )\n                );\n\n                // dispatch set event for each option\n                orderedOptionKeys.forEach(function(key) {\n                    dispatch('SET_' + fromCamels(key, '_').toUpperCase(), {\n                        value: options[key],\n                    });\n                });\n            },\n        };\n    };\n\n    var PrioritizedOptions = ['server'];\n\n    var formatFilename = function formatFilename(name) {\n        return name;\n    };\n\n    var createElement$1 = function createElement(tagName) {\n        return document.createElement(tagName);\n    };\n\n    var text = function text(node, value) {\n        var textNode = node.childNodes[0];\n        if (!textNode) {\n            textNode = document.createTextNode(value);\n            node.appendChild(textNode);\n        } else if (value !== textNode.nodeValue) {\n            textNode.nodeValue = value;\n        }\n    };\n\n    var polarToCartesian = function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n        var angleInRadians = (((angleInDegrees % 360) - 90) * Math.PI) / 180.0;\n        return {\n            x: centerX + radius * Math.cos(angleInRadians),\n            y: centerY + radius * Math.sin(angleInRadians),\n        };\n    };\n\n    var describeArc = function describeArc(x, y, radius, startAngle, endAngle, arcSweep) {\n        var start = polarToCartesian(x, y, radius, endAngle);\n        var end = polarToCartesian(x, y, radius, startAngle);\n        return ['M', start.x, start.y, 'A', radius, radius, 0, arcSweep, 0, end.x, end.y].join(' ');\n    };\n\n    var percentageArc = function percentageArc(x, y, radius, from, to) {\n        var arcSweep = 1;\n        if (to > from && to - from <= 0.5) {\n            arcSweep = 0;\n        }\n        if (from > to && from - to >= 0.5) {\n            arcSweep = 0;\n        }\n        return describeArc(\n            x,\n            y,\n            radius,\n            Math.min(0.9999, from) * 360,\n            Math.min(0.9999, to) * 360,\n            arcSweep\n        );\n    };\n\n    var create = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // start at 0\n        props.spin = false;\n        props.progress = 0;\n        props.opacity = 0;\n\n        // svg\n        var svg = createElement('svg');\n        root.ref.path = createElement('path', {\n            'stroke-width': 2,\n            'stroke-linecap': 'round',\n        });\n\n        svg.appendChild(root.ref.path);\n\n        root.ref.svg = svg;\n\n        root.appendChild(svg);\n    };\n\n    var write = function write(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        if (props.opacity === 0) {\n            return;\n        }\n\n        if (props.align) {\n            root.element.dataset.align = props.align;\n        }\n\n        // get width of stroke\n        var ringStrokeWidth = parseInt(attr(root.ref.path, 'stroke-width'), 10);\n\n        // calculate size of ring\n        var size = root.rect.element.width * 0.5;\n\n        // ring state\n        var ringFrom = 0;\n        var ringTo = 0;\n\n        // now in busy mode\n        if (props.spin) {\n            ringFrom = 0;\n            ringTo = 0.5;\n        } else {\n            ringFrom = 0;\n            ringTo = props.progress;\n        }\n\n        // get arc path\n        var coordinates = percentageArc(size, size, size - ringStrokeWidth, ringFrom, ringTo);\n\n        // update progress bar\n        attr(root.ref.path, 'd', coordinates);\n\n        // hide while contains 0 value\n        attr(root.ref.path, 'stroke-opacity', props.spin || props.progress > 0 ? 1 : 0);\n    };\n\n    var progressIndicator = createView({\n        tag: 'div',\n        name: 'progress-indicator',\n        ignoreRectUpdate: true,\n        ignoreRect: true,\n        create: create,\n        write: write,\n        mixins: {\n            apis: ['progress', 'spin', 'align'],\n            styles: ['opacity'],\n            animations: {\n                opacity: { type: 'tween', duration: 500 },\n                progress: {\n                    type: 'spring',\n                    stiffness: 0.95,\n                    damping: 0.65,\n                    mass: 10,\n                },\n            },\n        },\n    });\n\n    var create$1 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        root.element.innerHTML = (props.icon || '') + ('<span>' + props.label + '</span>');\n\n        props.isDisabled = false;\n    };\n\n    var write$1 = function write(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        var isDisabled = props.isDisabled;\n        var shouldDisable = root.query('GET_DISABLED') || props.opacity === 0;\n\n        if (shouldDisable && !isDisabled) {\n            props.isDisabled = true;\n            attr(root.element, 'disabled', 'disabled');\n        } else if (!shouldDisable && isDisabled) {\n            props.isDisabled = false;\n            root.element.removeAttribute('disabled');\n        }\n    };\n\n    var fileActionButton = createView({\n        tag: 'button',\n        attributes: {\n            type: 'button',\n        },\n\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        name: 'file-action-button',\n        mixins: {\n            apis: ['label'],\n            styles: ['translateX', 'translateY', 'scaleX', 'scaleY', 'opacity'],\n            animations: {\n                scaleX: 'spring',\n                scaleY: 'spring',\n                translateX: 'spring',\n                translateY: 'spring',\n                opacity: { type: 'tween', duration: 250 },\n            },\n\n            listeners: true,\n        },\n\n        create: create$1,\n        write: write$1,\n    });\n\n    var toNaturalFileSize = function toNaturalFileSize(bytes) {\n        var decimalSeparator =\n            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';\n        var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        var _options$labelBytes = options.labelBytes,\n            labelBytes = _options$labelBytes === void 0 ? 'bytes' : _options$labelBytes,\n            _options$labelKilobyt = options.labelKilobytes,\n            labelKilobytes = _options$labelKilobyt === void 0 ? 'KB' : _options$labelKilobyt,\n            _options$labelMegabyt = options.labelMegabytes,\n            labelMegabytes = _options$labelMegabyt === void 0 ? 'MB' : _options$labelMegabyt,\n            _options$labelGigabyt = options.labelGigabytes,\n            labelGigabytes = _options$labelGigabyt === void 0 ? 'GB' : _options$labelGigabyt;\n\n        // no negative byte sizes\n        bytes = Math.round(Math.abs(bytes));\n\n        var KB = base;\n        var MB = base * base;\n        var GB = base * base * base;\n\n        // just bytes\n        if (bytes < KB) {\n            return bytes + ' ' + labelBytes;\n        }\n\n        // kilobytes\n        if (bytes < MB) {\n            return Math.floor(bytes / KB) + ' ' + labelKilobytes;\n        }\n\n        // megabytes\n        if (bytes < GB) {\n            return removeDecimalsWhenZero(bytes / MB, 1, decimalSeparator) + ' ' + labelMegabytes;\n        }\n\n        // gigabytes\n        return removeDecimalsWhenZero(bytes / GB, 2, decimalSeparator) + ' ' + labelGigabytes;\n    };\n\n    var removeDecimalsWhenZero = function removeDecimalsWhenZero(value, decimalCount, separator) {\n        return value\n            .toFixed(decimalCount)\n            .split('.')\n            .filter(function(part) {\n                return part !== '0';\n            })\n            .join(separator);\n    };\n\n    var create$2 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // filename\n        var fileName = createElement$1('span');\n        fileName.className = 'filepond--file-info-main';\n        // hide for screenreaders\n        // the file is contained in a fieldset with legend that contains the filename\n        // no need to read it twice\n        attr(fileName, 'aria-hidden', 'true');\n        root.appendChild(fileName);\n        root.ref.fileName = fileName;\n\n        // filesize\n        var fileSize = createElement$1('span');\n        fileSize.className = 'filepond--file-info-sub';\n        root.appendChild(fileSize);\n        root.ref.fileSize = fileSize;\n\n        // set initial values\n        text(fileSize, root.query('GET_LABEL_FILE_WAITING_FOR_SIZE'));\n        text(fileName, formatFilename(root.query('GET_ITEM_NAME', props.id)));\n    };\n\n    var updateFile = function updateFile(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        text(\n            root.ref.fileSize,\n            toNaturalFileSize(\n                root.query('GET_ITEM_SIZE', props.id),\n                '.',\n                root.query('GET_FILE_SIZE_BASE'),\n                root.query('GET_FILE_SIZE_LABELS', root.query)\n            )\n        );\n\n        text(root.ref.fileName, formatFilename(root.query('GET_ITEM_NAME', props.id)));\n    };\n\n    var updateFileSizeOnError = function updateFileSizeOnError(_ref3) {\n        var root = _ref3.root,\n            props = _ref3.props;\n        // if size is available don't fallback to unknown size message\n        if (isInt(root.query('GET_ITEM_SIZE', props.id))) {\n            updateFile({ root: root, props: props });\n            return;\n        }\n\n        text(root.ref.fileSize, root.query('GET_LABEL_FILE_SIZE_NOT_AVAILABLE'));\n    };\n\n    var fileInfo = createView({\n        name: 'file-info',\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        write: createRoute({\n            DID_LOAD_ITEM: updateFile,\n            DID_UPDATE_ITEM_META: updateFile,\n            DID_THROW_ITEM_LOAD_ERROR: updateFileSizeOnError,\n            DID_THROW_ITEM_INVALID: updateFileSizeOnError,\n        }),\n\n        didCreateView: function didCreateView(root) {\n            applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n        },\n        create: create$2,\n        mixins: {\n            styles: ['translateX', 'translateY'],\n            animations: {\n                translateX: 'spring',\n                translateY: 'spring',\n            },\n        },\n    });\n\n    var toPercentage = function toPercentage(value) {\n        return Math.round(value * 100);\n    };\n\n    var create$3 = function create(_ref) {\n        var root = _ref.root;\n\n        // main status\n        var main = createElement$1('span');\n        main.className = 'filepond--file-status-main';\n        root.appendChild(main);\n        root.ref.main = main;\n\n        // sub status\n        var sub = createElement$1('span');\n        sub.className = 'filepond--file-status-sub';\n        root.appendChild(sub);\n        root.ref.sub = sub;\n\n        didSetItemLoadProgress({ root: root, action: { progress: null } });\n    };\n\n    var didSetItemLoadProgress = function didSetItemLoadProgress(_ref2) {\n        var root = _ref2.root,\n            action = _ref2.action;\n        var title =\n            action.progress === null\n                ? root.query('GET_LABEL_FILE_LOADING')\n                : root.query('GET_LABEL_FILE_LOADING') + ' ' + toPercentage(action.progress) + '%';\n\n        text(root.ref.main, title);\n        text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n    };\n\n    var didSetItemProcessProgress = function didSetItemProcessProgress(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action;\n        var title =\n            action.progress === null\n                ? root.query('GET_LABEL_FILE_PROCESSING')\n                : root.query('GET_LABEL_FILE_PROCESSING') +\n                  ' ' +\n                  toPercentage(action.progress) +\n                  '%';\n\n        text(root.ref.main, title);\n        text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n    };\n\n    var didRequestItemProcessing = function didRequestItemProcessing(_ref4) {\n        var root = _ref4.root;\n        text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING'));\n        text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n    };\n\n    var didAbortItemProcessing = function didAbortItemProcessing(_ref5) {\n        var root = _ref5.root;\n        text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING_ABORTED'));\n        text(root.ref.sub, root.query('GET_LABEL_TAP_TO_RETRY'));\n    };\n\n    var didCompleteItemProcessing = function didCompleteItemProcessing(_ref6) {\n        var root = _ref6.root;\n        text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING_COMPLETE'));\n        text(root.ref.sub, root.query('GET_LABEL_TAP_TO_UNDO'));\n    };\n\n    var clear = function clear(_ref7) {\n        var root = _ref7.root;\n        text(root.ref.main, '');\n        text(root.ref.sub, '');\n    };\n\n    var error = function error(_ref8) {\n        var root = _ref8.root,\n            action = _ref8.action;\n        text(root.ref.main, action.status.main);\n        text(root.ref.sub, action.status.sub);\n    };\n\n    var fileStatus = createView({\n        name: 'file-status',\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        write: createRoute({\n            DID_LOAD_ITEM: clear,\n            DID_REVERT_ITEM_PROCESSING: clear,\n            DID_REQUEST_ITEM_PROCESSING: didRequestItemProcessing,\n            DID_ABORT_ITEM_PROCESSING: didAbortItemProcessing,\n            DID_COMPLETE_ITEM_PROCESSING: didCompleteItemProcessing,\n            DID_UPDATE_ITEM_PROCESS_PROGRESS: didSetItemProcessProgress,\n            DID_UPDATE_ITEM_LOAD_PROGRESS: didSetItemLoadProgress,\n            DID_THROW_ITEM_LOAD_ERROR: error,\n            DID_THROW_ITEM_INVALID: error,\n            DID_THROW_ITEM_PROCESSING_ERROR: error,\n            DID_THROW_ITEM_PROCESSING_REVERT_ERROR: error,\n            DID_THROW_ITEM_REMOVE_ERROR: error,\n        }),\n\n        didCreateView: function didCreateView(root) {\n            applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n        },\n        create: create$3,\n        mixins: {\n            styles: ['translateX', 'translateY', 'opacity'],\n            animations: {\n                opacity: { type: 'tween', duration: 250 },\n                translateX: 'spring',\n                translateY: 'spring',\n            },\n        },\n    });\n\n    /**\n     * Button definitions for the file view\n     */\n\n    var Buttons = {\n        AbortItemLoad: {\n            label: 'GET_LABEL_BUTTON_ABORT_ITEM_LOAD',\n            action: 'ABORT_ITEM_LOAD',\n            className: 'filepond--action-abort-item-load',\n            align: 'LOAD_INDICATOR_POSITION', // right\n        },\n        RetryItemLoad: {\n            label: 'GET_LABEL_BUTTON_RETRY_ITEM_LOAD',\n            action: 'RETRY_ITEM_LOAD',\n            icon: 'GET_ICON_RETRY',\n            className: 'filepond--action-retry-item-load',\n            align: 'BUTTON_PROCESS_ITEM_POSITION', // right\n        },\n        RemoveItem: {\n            label: 'GET_LABEL_BUTTON_REMOVE_ITEM',\n            action: 'REQUEST_REMOVE_ITEM',\n            icon: 'GET_ICON_REMOVE',\n            className: 'filepond--action-remove-item',\n            align: 'BUTTON_REMOVE_ITEM_POSITION', // left\n        },\n        ProcessItem: {\n            label: 'GET_LABEL_BUTTON_PROCESS_ITEM',\n            action: 'REQUEST_ITEM_PROCESSING',\n            icon: 'GET_ICON_PROCESS',\n            className: 'filepond--action-process-item',\n            align: 'BUTTON_PROCESS_ITEM_POSITION', // right\n        },\n        AbortItemProcessing: {\n            label: 'GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING',\n            action: 'ABORT_ITEM_PROCESSING',\n            className: 'filepond--action-abort-item-processing',\n            align: 'BUTTON_PROCESS_ITEM_POSITION', // right\n        },\n        RetryItemProcessing: {\n            label: 'GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING',\n            action: 'RETRY_ITEM_PROCESSING',\n            icon: 'GET_ICON_RETRY',\n            className: 'filepond--action-retry-item-processing',\n            align: 'BUTTON_PROCESS_ITEM_POSITION', // right\n        },\n        RevertItemProcessing: {\n            label: 'GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING',\n            action: 'REQUEST_REVERT_ITEM_PROCESSING',\n            icon: 'GET_ICON_UNDO',\n            className: 'filepond--action-revert-item-processing',\n            align: 'BUTTON_PROCESS_ITEM_POSITION', // right\n        },\n    };\n\n    // make a list of buttons, we can then remove buttons from this list if they're disabled\n    var ButtonKeys = [];\n    forin(Buttons, function(key) {\n        ButtonKeys.push(key);\n    });\n\n    var calculateFileInfoOffset = function calculateFileInfoOffset(root) {\n        if (getRemoveIndicatorAligment(root) === 'right') return 0;\n        var buttonRect = root.ref.buttonRemoveItem.rect.element;\n        return buttonRect.hidden ? null : buttonRect.width + buttonRect.left;\n    };\n\n    var calculateButtonWidth = function calculateButtonWidth(root) {\n        var buttonRect = root.ref.buttonAbortItemLoad.rect.element;\n        return buttonRect.width;\n    };\n\n    // Force on full pixels so text stays crips\n    var calculateFileVerticalCenterOffset = function calculateFileVerticalCenterOffset(root) {\n        return Math.floor(root.ref.buttonRemoveItem.rect.element.height / 4);\n    };\n    var calculateFileHorizontalCenterOffset = function calculateFileHorizontalCenterOffset(root) {\n        return Math.floor(root.ref.buttonRemoveItem.rect.element.left / 2);\n    };\n\n    var getLoadIndicatorAlignment = function getLoadIndicatorAlignment(root) {\n        return root.query('GET_STYLE_LOAD_INDICATOR_POSITION');\n    };\n    var getProcessIndicatorAlignment = function getProcessIndicatorAlignment(root) {\n        return root.query('GET_STYLE_PROGRESS_INDICATOR_POSITION');\n    };\n    var getRemoveIndicatorAligment = function getRemoveIndicatorAligment(root) {\n        return root.query('GET_STYLE_BUTTON_REMOVE_ITEM_POSITION');\n    };\n\n    var DefaultStyle = {\n        buttonAbortItemLoad: { opacity: 0 },\n        buttonRetryItemLoad: { opacity: 0 },\n        buttonRemoveItem: { opacity: 0 },\n        buttonProcessItem: { opacity: 0 },\n        buttonAbortItemProcessing: { opacity: 0 },\n        buttonRetryItemProcessing: { opacity: 0 },\n        buttonRevertItemProcessing: { opacity: 0 },\n        loadProgressIndicator: { opacity: 0, align: getLoadIndicatorAlignment },\n        processProgressIndicator: { opacity: 0, align: getProcessIndicatorAlignment },\n        processingCompleteIndicator: { opacity: 0, scaleX: 0.75, scaleY: 0.75 },\n        info: { translateX: 0, translateY: 0, opacity: 0 },\n        status: { translateX: 0, translateY: 0, opacity: 0 },\n    };\n\n    var IdleStyle = {\n        buttonRemoveItem: { opacity: 1 },\n        buttonProcessItem: { opacity: 1 },\n        info: { translateX: calculateFileInfoOffset },\n        status: { translateX: calculateFileInfoOffset },\n    };\n\n    var ProcessingStyle = {\n        buttonAbortItemProcessing: { opacity: 1 },\n        processProgressIndicator: { opacity: 1 },\n        status: { opacity: 1 },\n    };\n\n    var StyleMap = {\n        DID_THROW_ITEM_INVALID: {\n            buttonRemoveItem: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n            status: { translateX: calculateFileInfoOffset, opacity: 1 },\n        },\n\n        DID_START_ITEM_LOAD: {\n            buttonAbortItemLoad: { opacity: 1 },\n            loadProgressIndicator: { opacity: 1 },\n            status: { opacity: 1 },\n        },\n\n        DID_THROW_ITEM_LOAD_ERROR: {\n            buttonRetryItemLoad: { opacity: 1 },\n            buttonRemoveItem: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n            status: { opacity: 1 },\n        },\n\n        DID_START_ITEM_REMOVE: {\n            processProgressIndicator: { opacity: 1, align: getRemoveIndicatorAligment },\n            info: { translateX: calculateFileInfoOffset },\n            status: { opacity: 0 },\n        },\n\n        DID_THROW_ITEM_REMOVE_ERROR: {\n            processProgressIndicator: { opacity: 0, align: getRemoveIndicatorAligment },\n            buttonRemoveItem: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n            status: { opacity: 1, translateX: calculateFileInfoOffset },\n        },\n\n        DID_LOAD_ITEM: IdleStyle,\n        DID_LOAD_LOCAL_ITEM: {\n            buttonRemoveItem: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n            status: { translateX: calculateFileInfoOffset },\n        },\n\n        DID_START_ITEM_PROCESSING: ProcessingStyle,\n        DID_REQUEST_ITEM_PROCESSING: ProcessingStyle,\n        DID_UPDATE_ITEM_PROCESS_PROGRESS: ProcessingStyle,\n        DID_COMPLETE_ITEM_PROCESSING: {\n            buttonRevertItemProcessing: { opacity: 1 },\n            info: { opacity: 1 },\n            status: { opacity: 1 },\n        },\n\n        DID_THROW_ITEM_PROCESSING_ERROR: {\n            buttonRemoveItem: { opacity: 1 },\n            buttonRetryItemProcessing: { opacity: 1 },\n            status: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n        },\n\n        DID_THROW_ITEM_PROCESSING_REVERT_ERROR: {\n            buttonRevertItemProcessing: { opacity: 1 },\n            status: { opacity: 1 },\n            info: { opacity: 1 },\n        },\n\n        DID_ABORT_ITEM_PROCESSING: {\n            buttonRemoveItem: { opacity: 1 },\n            buttonProcessItem: { opacity: 1 },\n            info: { translateX: calculateFileInfoOffset },\n            status: { opacity: 1 },\n        },\n\n        DID_REVERT_ITEM_PROCESSING: IdleStyle,\n    };\n\n    // complete indicator view\n    var processingCompleteIndicatorView = createView({\n        create: function create(_ref) {\n            var root = _ref.root;\n            root.element.innerHTML = root.query('GET_ICON_DONE');\n        },\n        name: 'processing-complete-indicator',\n        ignoreRect: true,\n        mixins: {\n            styles: ['scaleX', 'scaleY', 'opacity'],\n            animations: {\n                scaleX: 'spring',\n                scaleY: 'spring',\n                opacity: { type: 'tween', duration: 250 },\n            },\n        },\n    });\n\n    /**\n     * Creates the file view\n     */\n    var create$4 = function create(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        // copy Buttons object\n        var LocalButtons = Object.keys(Buttons).reduce(function(prev, curr) {\n            prev[curr] = Object.assign({}, Buttons[curr]);\n            return prev;\n        }, {});\n        var id = props.id;\n\n        // allow reverting upload\n        var allowRevert = root.query('GET_ALLOW_REVERT');\n\n        // allow remove file\n        var allowRemove = root.query('GET_ALLOW_REMOVE');\n\n        // allow processing upload\n        var allowProcess = root.query('GET_ALLOW_PROCESS');\n\n        // is instant uploading, need this to determine the icon of the undo button\n        var instantUpload = root.query('GET_INSTANT_UPLOAD');\n\n        // is async set up\n        var isAsync = root.query('IS_ASYNC');\n\n        // should align remove item buttons\n        var alignRemoveItemButton = root.query('GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN');\n\n        // enabled buttons array\n        var buttonFilter;\n        if (isAsync) {\n            if (allowProcess && !allowRevert) {\n                // only remove revert button\n                buttonFilter = function buttonFilter(key) {\n                    return !/RevertItemProcessing/.test(key);\n                };\n            } else if (!allowProcess && allowRevert) {\n                // only remove process button\n                buttonFilter = function buttonFilter(key) {\n                    return !/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(key);\n                };\n            } else if (!allowProcess && !allowRevert) {\n                // remove all process buttons\n                buttonFilter = function buttonFilter(key) {\n                    return !/Process/.test(key);\n                };\n            }\n        } else {\n            // no process controls available\n            buttonFilter = function buttonFilter(key) {\n                return !/Process/.test(key);\n            };\n        }\n\n        var enabledButtons = buttonFilter ? ButtonKeys.filter(buttonFilter) : ButtonKeys.concat();\n\n        // update icon and label for revert button when instant uploading\n        if (instantUpload && allowRevert) {\n            LocalButtons['RevertItemProcessing'].label = 'GET_LABEL_BUTTON_REMOVE_ITEM';\n            LocalButtons['RevertItemProcessing'].icon = 'GET_ICON_REMOVE';\n        }\n\n        // remove last button (revert) if not allowed\n        if (isAsync && !allowRevert) {\n            var map = StyleMap['DID_COMPLETE_ITEM_PROCESSING'];\n            map.info.translateX = calculateFileHorizontalCenterOffset;\n            map.info.translateY = calculateFileVerticalCenterOffset;\n            map.status.translateY = calculateFileVerticalCenterOffset;\n            map.processingCompleteIndicator = { opacity: 1, scaleX: 1, scaleY: 1 };\n        }\n\n        // should align center\n        if (isAsync && !allowProcess) {\n            [\n                'DID_START_ITEM_PROCESSING',\n                'DID_REQUEST_ITEM_PROCESSING',\n                'DID_UPDATE_ITEM_PROCESS_PROGRESS',\n                'DID_THROW_ITEM_PROCESSING_ERROR',\n            ].forEach(function(key) {\n                StyleMap[key].status.translateY = calculateFileVerticalCenterOffset;\n            });\n            StyleMap['DID_THROW_ITEM_PROCESSING_ERROR'].status.translateX = calculateButtonWidth;\n        }\n\n        // move remove button to right\n        if (alignRemoveItemButton && allowRevert) {\n            LocalButtons['RevertItemProcessing'].align = 'BUTTON_REMOVE_ITEM_POSITION';\n            var _map = StyleMap['DID_COMPLETE_ITEM_PROCESSING'];\n            _map.info.translateX = calculateFileInfoOffset;\n            _map.status.translateY = calculateFileVerticalCenterOffset;\n            _map.processingCompleteIndicator = { opacity: 1, scaleX: 1, scaleY: 1 };\n        }\n\n        // show/hide RemoveItem button\n        if (!allowRemove) {\n            LocalButtons['RemoveItem'].disabled = true;\n        }\n\n        // create the button views\n        forin(LocalButtons, function(key, definition) {\n            // create button\n            var buttonView = root.createChildView(fileActionButton, {\n                label: root.query(definition.label),\n                icon: root.query(definition.icon),\n                opacity: 0,\n            });\n\n            // should be appended?\n            if (enabledButtons.includes(key)) {\n                root.appendChildView(buttonView);\n            }\n\n            // toggle\n            if (definition.disabled) {\n                buttonView.element.setAttribute('disabled', 'disabled');\n                buttonView.element.setAttribute('hidden', 'hidden');\n            }\n\n            // add position attribute\n            buttonView.element.dataset.align = root.query('GET_STYLE_' + definition.align);\n\n            // add class\n            buttonView.element.classList.add(definition.className);\n\n            // handle interactions\n            buttonView.on('click', function(e) {\n                e.stopPropagation();\n                if (definition.disabled) return;\n                root.dispatch(definition.action, { query: id });\n            });\n\n            // set reference\n            root.ref['button' + key] = buttonView;\n        });\n\n        // checkmark\n        root.ref.processingCompleteIndicator = root.appendChildView(\n            root.createChildView(processingCompleteIndicatorView)\n        );\n\n        root.ref.processingCompleteIndicator.element.dataset.align = root.query(\n            'GET_STYLE_BUTTON_PROCESS_ITEM_POSITION'\n        );\n\n        // create file info view\n        root.ref.info = root.appendChildView(root.createChildView(fileInfo, { id: id }));\n\n        // create file status view\n        root.ref.status = root.appendChildView(root.createChildView(fileStatus, { id: id }));\n\n        // add progress indicators\n        var loadIndicatorView = root.appendChildView(\n            root.createChildView(progressIndicator, {\n                opacity: 0,\n                align: root.query('GET_STYLE_LOAD_INDICATOR_POSITION'),\n            })\n        );\n\n        loadIndicatorView.element.classList.add('filepond--load-indicator');\n        root.ref.loadProgressIndicator = loadIndicatorView;\n\n        var progressIndicatorView = root.appendChildView(\n            root.createChildView(progressIndicator, {\n                opacity: 0,\n                align: root.query('GET_STYLE_PROGRESS_INDICATOR_POSITION'),\n            })\n        );\n\n        progressIndicatorView.element.classList.add('filepond--process-indicator');\n        root.ref.processProgressIndicator = progressIndicatorView;\n\n        // current active styles\n        root.ref.activeStyles = [];\n    };\n\n    var write$2 = function write(_ref3) {\n        var root = _ref3.root,\n            actions = _ref3.actions,\n            props = _ref3.props;\n        // route actions\n        route({ root: root, actions: actions, props: props });\n\n        // select last state change action\n        var action = actions\n            .concat()\n            .filter(function(action) {\n                return /^DID_/.test(action.type);\n            })\n            .reverse()\n            .find(function(action) {\n                return StyleMap[action.type];\n            });\n\n        // a new action happened, let's get the matching styles\n        if (action) {\n            // define new active styles\n            root.ref.activeStyles = [];\n\n            var stylesToApply = StyleMap[action.type];\n            forin(DefaultStyle, function(name, defaultStyles) {\n                // get reference to control\n                var control = root.ref[name];\n\n                // loop over all styles for this control\n                forin(defaultStyles, function(key, defaultValue) {\n                    var value =\n                        stylesToApply[name] && typeof stylesToApply[name][key] !== 'undefined'\n                            ? stylesToApply[name][key]\n                            : defaultValue;\n                    root.ref.activeStyles.push({ control: control, key: key, value: value });\n                });\n            });\n        }\n\n        // apply active styles to element\n        root.ref.activeStyles.forEach(function(_ref4) {\n            var control = _ref4.control,\n                key = _ref4.key,\n                value = _ref4.value;\n            control[key] = typeof value === 'function' ? value(root) : value;\n        });\n    };\n\n    var route = createRoute({\n        DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING: function DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING(\n            _ref5\n        ) {\n            var root = _ref5.root,\n                action = _ref5.action;\n            root.ref.buttonAbortItemProcessing.label = action.value;\n        },\n        DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD: function DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD(_ref6) {\n            var root = _ref6.root,\n                action = _ref6.action;\n            root.ref.buttonAbortItemLoad.label = action.value;\n        },\n        DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL: function DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL(\n            _ref7\n        ) {\n            var root = _ref7.root,\n                action = _ref7.action;\n            root.ref.buttonAbortItemRemoval.label = action.value;\n        },\n        DID_REQUEST_ITEM_PROCESSING: function DID_REQUEST_ITEM_PROCESSING(_ref8) {\n            var root = _ref8.root;\n            root.ref.processProgressIndicator.spin = true;\n            root.ref.processProgressIndicator.progress = 0;\n        },\n        DID_START_ITEM_LOAD: function DID_START_ITEM_LOAD(_ref9) {\n            var root = _ref9.root;\n            root.ref.loadProgressIndicator.spin = true;\n            root.ref.loadProgressIndicator.progress = 0;\n        },\n        DID_START_ITEM_REMOVE: function DID_START_ITEM_REMOVE(_ref10) {\n            var root = _ref10.root;\n            root.ref.processProgressIndicator.spin = true;\n            root.ref.processProgressIndicator.progress = 0;\n        },\n        DID_UPDATE_ITEM_LOAD_PROGRESS: function DID_UPDATE_ITEM_LOAD_PROGRESS(_ref11) {\n            var root = _ref11.root,\n                action = _ref11.action;\n            root.ref.loadProgressIndicator.spin = false;\n            root.ref.loadProgressIndicator.progress = action.progress;\n        },\n        DID_UPDATE_ITEM_PROCESS_PROGRESS: function DID_UPDATE_ITEM_PROCESS_PROGRESS(_ref12) {\n            var root = _ref12.root,\n                action = _ref12.action;\n            root.ref.processProgressIndicator.spin = false;\n            root.ref.processProgressIndicator.progress = action.progress;\n        },\n    });\n\n    var file = createView({\n        create: create$4,\n        write: write$2,\n        didCreateView: function didCreateView(root) {\n            applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n        },\n        name: 'file',\n    });\n\n    /**\n     * Creates the file view\n     */\n    var create$5 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n\n        // filename\n        root.ref.fileName = createElement$1('legend');\n        root.appendChild(root.ref.fileName);\n\n        // file appended\n        root.ref.file = root.appendChildView(root.createChildView(file, { id: props.id }));\n\n        // data has moved to data.js\n        root.ref.data = false;\n    };\n\n    /**\n     * Data storage\n     */\n    var didLoadItem = function didLoadItem(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        // updates the legend of the fieldset so screenreaders can better group buttons\n        text(root.ref.fileName, formatFilename(root.query('GET_ITEM_NAME', props.id)));\n    };\n\n    var fileWrapper = createView({\n        create: create$5,\n        ignoreRect: true,\n        write: createRoute({\n            DID_LOAD_ITEM: didLoadItem,\n        }),\n\n        didCreateView: function didCreateView(root) {\n            applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n        },\n        tag: 'fieldset',\n        name: 'file-wrapper',\n    });\n\n    var PANEL_SPRING_PROPS = { type: 'spring', damping: 0.6, mass: 7 };\n\n    var create$6 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        [\n            {\n                name: 'top',\n            },\n\n            {\n                name: 'center',\n                props: {\n                    translateY: null,\n                    scaleY: null,\n                },\n\n                mixins: {\n                    animations: {\n                        scaleY: PANEL_SPRING_PROPS,\n                    },\n\n                    styles: ['translateY', 'scaleY'],\n                },\n            },\n\n            {\n                name: 'bottom',\n                props: {\n                    translateY: null,\n                },\n\n                mixins: {\n                    animations: {\n                        translateY: PANEL_SPRING_PROPS,\n                    },\n\n                    styles: ['translateY'],\n                },\n            },\n        ].forEach(function(section) {\n            createSection(root, section, props.name);\n        });\n\n        root.element.classList.add('filepond--' + props.name);\n\n        root.ref.scalable = null;\n    };\n\n    var createSection = function createSection(root, section, className) {\n        var viewConstructor = createView({\n            name: 'panel-' + section.name + ' filepond--' + className,\n            mixins: section.mixins,\n            ignoreRectUpdate: true,\n        });\n\n        var view = root.createChildView(viewConstructor, section.props);\n\n        root.ref[section.name] = root.appendChildView(view);\n    };\n\n    var write$3 = function write(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n\n        // update scalable state\n        if (root.ref.scalable === null || props.scalable !== root.ref.scalable) {\n            root.ref.scalable = isBoolean(props.scalable) ? props.scalable : true;\n            root.element.dataset.scalable = root.ref.scalable;\n        }\n\n        // no height, can't set\n        if (!props.height) return;\n\n        // get child rects\n        var topRect = root.ref.top.rect.element;\n        var bottomRect = root.ref.bottom.rect.element;\n\n        // make sure height never is smaller than bottom and top seciton heights combined (will probably never happen, but who knows)\n        var height = Math.max(topRect.height + bottomRect.height, props.height);\n\n        // offset center part\n        root.ref.center.translateY = topRect.height;\n\n        // scale center part\n        // use math ceil to prevent transparent lines because of rounding errors\n        root.ref.center.scaleY = (height - topRect.height - bottomRect.height) / 100;\n\n        // offset bottom part\n        root.ref.bottom.translateY = height - bottomRect.height;\n    };\n\n    var panel = createView({\n        name: 'panel',\n        read: function read(_ref3) {\n            var root = _ref3.root,\n                props = _ref3.props;\n            return (props.heightCurrent = root.ref.bottom.translateY);\n        },\n        write: write$3,\n        create: create$6,\n        ignoreRect: true,\n        mixins: {\n            apis: ['height', 'heightCurrent', 'scalable'],\n        },\n    });\n\n    var createDragHelper = function createDragHelper(items) {\n        var itemIds = items.map(function(item) {\n            return item.id;\n        });\n        var prevIndex = undefined;\n        return {\n            setIndex: function setIndex(index) {\n                prevIndex = index;\n            },\n            getIndex: function getIndex() {\n                return prevIndex;\n            },\n            getItemIndex: function getItemIndex(item) {\n                return itemIds.indexOf(item.id);\n            },\n        };\n    };\n\n    var ITEM_TRANSLATE_SPRING = {\n        type: 'spring',\n        stiffness: 0.75,\n        damping: 0.45,\n        mass: 10,\n    };\n\n    var ITEM_SCALE_SPRING = 'spring';\n\n    var StateMap = {\n        DID_START_ITEM_LOAD: 'busy',\n        DID_UPDATE_ITEM_LOAD_PROGRESS: 'loading',\n        DID_THROW_ITEM_INVALID: 'load-invalid',\n        DID_THROW_ITEM_LOAD_ERROR: 'load-error',\n        DID_LOAD_ITEM: 'idle',\n        DID_THROW_ITEM_REMOVE_ERROR: 'remove-error',\n        DID_START_ITEM_REMOVE: 'busy',\n        DID_START_ITEM_PROCESSING: 'busy processing',\n        DID_REQUEST_ITEM_PROCESSING: 'busy processing',\n        DID_UPDATE_ITEM_PROCESS_PROGRESS: 'processing',\n        DID_COMPLETE_ITEM_PROCESSING: 'processing-complete',\n        DID_THROW_ITEM_PROCESSING_ERROR: 'processing-error',\n        DID_THROW_ITEM_PROCESSING_REVERT_ERROR: 'processing-revert-error',\n        DID_ABORT_ITEM_PROCESSING: 'cancelled',\n        DID_REVERT_ITEM_PROCESSING: 'idle',\n    };\n\n    /**\n     * Creates the file view\n     */\n    var create$7 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // select\n        root.ref.handleClick = function(e) {\n            return root.dispatch('DID_ACTIVATE_ITEM', { id: props.id });\n        };\n\n        // set id\n        root.element.id = 'filepond--item-' + props.id;\n        root.element.addEventListener('click', root.ref.handleClick);\n\n        // file view\n        root.ref.container = root.appendChildView(\n            root.createChildView(fileWrapper, { id: props.id })\n        );\n\n        // file panel\n        root.ref.panel = root.appendChildView(root.createChildView(panel, { name: 'item-panel' }));\n\n        // default start height\n        root.ref.panel.height = null;\n\n        // by default not marked for removal\n        props.markedForRemoval = false;\n\n        // if not allowed to reorder file items, exit here\n        if (!root.query('GET_ALLOW_REORDER')) return;\n\n        // set to idle so shows grab cursor\n        root.element.dataset.dragState = 'idle';\n\n        var grab = function grab(e) {\n            if (!e.isPrimary) return;\n\n            var removedActivateListener = false;\n\n            var origin = {\n                x: e.pageX,\n                y: e.pageY,\n            };\n\n            props.dragOrigin = {\n                x: root.translateX,\n                y: root.translateY,\n            };\n\n            props.dragCenter = {\n                x: e.offsetX,\n                y: e.offsetY,\n            };\n\n            var dragState = createDragHelper(root.query('GET_ACTIVE_ITEMS'));\n\n            root.dispatch('DID_GRAB_ITEM', { id: props.id, dragState: dragState });\n\n            var drag = function drag(e) {\n                if (!e.isPrimary) return;\n\n                e.stopPropagation();\n                e.preventDefault();\n\n                props.dragOffset = {\n                    x: e.pageX - origin.x,\n                    y: e.pageY - origin.y,\n                };\n\n                // if dragged stop listening to clicks, will re-add when done dragging\n                var dist =\n                    props.dragOffset.x * props.dragOffset.x +\n                    props.dragOffset.y * props.dragOffset.y;\n                if (dist > 16 && !removedActivateListener) {\n                    removedActivateListener = true;\n                    root.element.removeEventListener('click', root.ref.handleClick);\n                }\n\n                root.dispatch('DID_DRAG_ITEM', { id: props.id, dragState: dragState });\n            };\n\n            var drop = function drop(e) {\n                if (!e.isPrimary) return;\n\n                props.dragOffset = {\n                    x: e.pageX - origin.x,\n                    y: e.pageY - origin.y,\n                };\n\n                reset();\n            };\n\n            var cancel = function cancel() {\n                reset();\n            };\n\n            var reset = function reset() {\n                document.removeEventListener('pointercancel', cancel);\n                document.removeEventListener('pointermove', drag);\n                document.removeEventListener('pointerup', drop);\n\n                root.dispatch('DID_DROP_ITEM', { id: props.id, dragState: dragState });\n\n                // start listening to clicks again\n                if (removedActivateListener) {\n                    setTimeout(function() {\n                        return root.element.addEventListener('click', root.ref.handleClick);\n                    }, 0);\n                }\n            };\n\n            document.addEventListener('pointercancel', cancel);\n            document.addEventListener('pointermove', drag);\n            document.addEventListener('pointerup', drop);\n        };\n\n        root.element.addEventListener('pointerdown', grab);\n    };\n\n    var route$1 = createRoute({\n        DID_UPDATE_PANEL_HEIGHT: function DID_UPDATE_PANEL_HEIGHT(_ref2) {\n            var root = _ref2.root,\n                action = _ref2.action;\n            root.height = action.height;\n        },\n    });\n\n    var write$4 = createRoute(\n        {\n            DID_GRAB_ITEM: function DID_GRAB_ITEM(_ref3) {\n                var root = _ref3.root,\n                    props = _ref3.props;\n                props.dragOrigin = {\n                    x: root.translateX,\n                    y: root.translateY,\n                };\n            },\n            DID_DRAG_ITEM: function DID_DRAG_ITEM(_ref4) {\n                var root = _ref4.root;\n                root.element.dataset.dragState = 'drag';\n            },\n            DID_DROP_ITEM: function DID_DROP_ITEM(_ref5) {\n                var root = _ref5.root,\n                    props = _ref5.props;\n                props.dragOffset = null;\n                props.dragOrigin = null;\n                root.element.dataset.dragState = 'drop';\n            },\n        },\n\n        function(_ref6) {\n            var root = _ref6.root,\n                actions = _ref6.actions,\n                props = _ref6.props,\n                shouldOptimize = _ref6.shouldOptimize;\n            if (root.element.dataset.dragState === 'drop') {\n                if (root.scaleX <= 1) {\n                    root.element.dataset.dragState = 'idle';\n                }\n            }\n\n            // select last state change action\n            var action = actions\n                .concat()\n                .filter(function(action) {\n                    return /^DID_/.test(action.type);\n                })\n                .reverse()\n                .find(function(action) {\n                    return StateMap[action.type];\n                });\n\n            // no need to set same state twice\n            if (action && action.type !== props.currentState) {\n                // set current state\n                props.currentState = action.type;\n\n                // set state\n                root.element.dataset.filepondItemState = StateMap[props.currentState] || '';\n            }\n\n            // route actions\n            var aspectRatio =\n                root.query('GET_ITEM_PANEL_ASPECT_RATIO') || root.query('GET_PANEL_ASPECT_RATIO');\n            if (!aspectRatio) {\n                route$1({ root: root, actions: actions, props: props });\n                if (!root.height && root.ref.container.rect.element.height > 0) {\n                    root.height = root.ref.container.rect.element.height;\n                }\n            } else if (!shouldOptimize) {\n                root.height = root.rect.element.width * aspectRatio;\n            }\n\n            // sync panel height with item height\n            if (shouldOptimize) {\n                root.ref.panel.height = null;\n            }\n\n            root.ref.panel.height = root.height;\n        }\n    );\n\n    var item = createView({\n        create: create$7,\n        write: write$4,\n        destroy: function destroy(_ref7) {\n            var root = _ref7.root,\n                props = _ref7.props;\n            root.element.removeEventListener('click', root.ref.handleClick);\n            root.dispatch('RELEASE_ITEM', { query: props.id });\n        },\n        tag: 'li',\n        name: 'item',\n        mixins: {\n            apis: [\n                'id',\n                'interactionMethod',\n                'markedForRemoval',\n                'spawnDate',\n                'dragCenter',\n                'dragOrigin',\n                'dragOffset',\n            ],\n\n            styles: ['translateX', 'translateY', 'scaleX', 'scaleY', 'opacity', 'height'],\n            animations: {\n                scaleX: ITEM_SCALE_SPRING,\n                scaleY: ITEM_SCALE_SPRING,\n                translateX: ITEM_TRANSLATE_SPRING,\n                translateY: ITEM_TRANSLATE_SPRING,\n                opacity: { type: 'tween', duration: 150 },\n            },\n        },\n    });\n\n    var getItemsPerRow = function(horizontalSpace, itemWidth) {\n        // add one pixel leeway, when using percentages for item width total items can be 1.99 per row\n\n        return Math.max(1, Math.floor((horizontalSpace + 1) / itemWidth));\n    };\n\n    var getItemIndexByPosition = function getItemIndexByPosition(view, children, positionInView) {\n        if (!positionInView) return;\n\n        var horizontalSpace = view.rect.element.width;\n        // const children = view.childViews;\n        var l = children.length;\n        var last = null;\n\n        // -1, don't move items to accomodate (either add to top or bottom)\n        if (l === 0 || positionInView.top < children[0].rect.element.top) return -1;\n\n        // let's get the item width\n        var item = children[0];\n        var itemRect = item.rect.element;\n        var itemHorizontalMargin = itemRect.marginLeft + itemRect.marginRight;\n        var itemWidth = itemRect.width + itemHorizontalMargin;\n        var itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n\n        // stack\n        if (itemsPerRow === 1) {\n            for (var index = 0; index < l; index++) {\n                var child = children[index];\n                var childMid = child.rect.outer.top + child.rect.element.height * 0.5;\n                if (positionInView.top < childMid) {\n                    return index;\n                }\n            }\n            return l;\n        }\n\n        // grid\n        var itemVerticalMargin = itemRect.marginTop + itemRect.marginBottom;\n        var itemHeight = itemRect.height + itemVerticalMargin;\n        for (var _index = 0; _index < l; _index++) {\n            var indexX = _index % itemsPerRow;\n            var indexY = Math.floor(_index / itemsPerRow);\n\n            var offsetX = indexX * itemWidth;\n            var offsetY = indexY * itemHeight;\n\n            var itemTop = offsetY - itemRect.marginTop;\n            var itemRight = offsetX + itemWidth;\n            var itemBottom = offsetY + itemHeight + itemRect.marginBottom;\n\n            if (positionInView.top < itemBottom && positionInView.top > itemTop) {\n                if (positionInView.left < itemRight) {\n                    return _index;\n                } else if (_index !== l - 1) {\n                    last = _index;\n                } else {\n                    last = null;\n                }\n            }\n        }\n\n        if (last !== null) {\n            return last;\n        }\n\n        return l;\n    };\n\n    var dropAreaDimensions = {\n        height: 0,\n        width: 0,\n        get getHeight() {\n            return this.height;\n        },\n        set setHeight(val) {\n            if (this.height === 0 || val === 0) this.height = val;\n        },\n        get getWidth() {\n            return this.width;\n        },\n        set setWidth(val) {\n            if (this.width === 0 || val === 0) this.width = val;\n        },\n        setDimensions: function setDimensions(height, width) {\n            if (this.height === 0 || height === 0) this.height = height;\n            if (this.width === 0 || width === 0) this.width = width;\n        },\n    };\n\n    var create$8 = function create(_ref) {\n        var root = _ref.root;\n        // need to set role to list as otherwise it won't be read as a list by VoiceOver\n        attr(root.element, 'role', 'list');\n\n        root.ref.lastItemSpanwDate = Date.now();\n    };\n\n    /**\n     * Inserts a new item\n     * @param root\n     * @param action\n     */\n    var addItemView = function addItemView(_ref2) {\n        var root = _ref2.root,\n            action = _ref2.action;\n        var id = action.id,\n            index = action.index,\n            interactionMethod = action.interactionMethod;\n\n        root.ref.addIndex = index;\n\n        var now = Date.now();\n        var spawnDate = now;\n        var opacity = 1;\n\n        if (interactionMethod !== InteractionMethod.NONE) {\n            opacity = 0;\n            var cooldown = root.query('GET_ITEM_INSERT_INTERVAL');\n            var dist = now - root.ref.lastItemSpanwDate;\n            spawnDate = dist < cooldown ? now + (cooldown - dist) : now;\n        }\n\n        root.ref.lastItemSpanwDate = spawnDate;\n\n        root.appendChildView(\n            root.createChildView(\n                // view type\n                item,\n\n                // props\n                {\n                    spawnDate: spawnDate,\n                    id: id,\n                    opacity: opacity,\n                    interactionMethod: interactionMethod,\n                }\n            ),\n\n            index\n        );\n    };\n\n    var moveItem = function moveItem(item, x, y) {\n        var vx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var vy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n        // set to null to remove animation while dragging\n        if (item.dragOffset) {\n            item.translateX = null;\n            item.translateY = null;\n            item.translateX = item.dragOrigin.x + item.dragOffset.x;\n            item.translateY = item.dragOrigin.y + item.dragOffset.y;\n            item.scaleX = 1.025;\n            item.scaleY = 1.025;\n        } else {\n            item.translateX = x;\n            item.translateY = y;\n\n            if (Date.now() > item.spawnDate) {\n                // reveal element\n                if (item.opacity === 0) {\n                    introItemView(item, x, y, vx, vy);\n                }\n\n                // make sure is default scale every frame\n                item.scaleX = 1;\n                item.scaleY = 1;\n                item.opacity = 1;\n            }\n        }\n    };\n\n    var introItemView = function introItemView(item, x, y, vx, vy) {\n        if (item.interactionMethod === InteractionMethod.NONE) {\n            item.translateX = null;\n            item.translateX = x;\n            item.translateY = null;\n            item.translateY = y;\n        } else if (item.interactionMethod === InteractionMethod.DROP) {\n            item.translateX = null;\n            item.translateX = x - vx * 20;\n\n            item.translateY = null;\n            item.translateY = y - vy * 10;\n\n            item.scaleX = 0.8;\n            item.scaleY = 0.8;\n        } else if (item.interactionMethod === InteractionMethod.BROWSE) {\n            item.translateY = null;\n            item.translateY = y - 30;\n        } else if (item.interactionMethod === InteractionMethod.API) {\n            item.translateX = null;\n            item.translateX = x - 30;\n            item.translateY = null;\n        }\n    };\n\n    /**\n     * Removes an existing item\n     * @param root\n     * @param action\n     */\n    var removeItemView = function removeItemView(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action;\n        var id = action.id;\n\n        // get the view matching the given id\n        var view = root.childViews.find(function(child) {\n            return child.id === id;\n        });\n\n        // if no view found, exit\n        if (!view) {\n            return;\n        }\n\n        // animate view out of view\n        view.scaleX = 0.9;\n        view.scaleY = 0.9;\n        view.opacity = 0;\n\n        // mark for removal\n        view.markedForRemoval = true;\n    };\n\n    var getItemHeight = function getItemHeight(child) {\n        return (\n            child.rect.element.height +\n            child.rect.element.marginBottom * 0.5 +\n            child.rect.element.marginTop * 0.5\n        );\n    };\n    var getItemWidth = function getItemWidth(child) {\n        return (\n            child.rect.element.width +\n            child.rect.element.marginLeft * 0.5 +\n            child.rect.element.marginRight * 0.5\n        );\n    };\n\n    var dragItem = function dragItem(_ref4) {\n        var root = _ref4.root,\n            action = _ref4.action;\n        var id = action.id,\n            dragState = action.dragState;\n\n        // reference to item\n        var item = root.query('GET_ITEM', { id: id });\n\n        // get the view matching the given id\n        var view = root.childViews.find(function(child) {\n            return child.id === id;\n        });\n\n        var numItems = root.childViews.length;\n        var oldIndex = dragState.getItemIndex(item);\n\n        // if no view found, exit\n        if (!view) return;\n\n        var dragPosition = {\n            x: view.dragOrigin.x + view.dragOffset.x + view.dragCenter.x,\n            y: view.dragOrigin.y + view.dragOffset.y + view.dragCenter.y,\n        };\n\n        // get drag area dimensions\n        var dragHeight = getItemHeight(view);\n        var dragWidth = getItemWidth(view);\n\n        // get rows and columns (There will always be at least one row and one column if a file is present)\n        var cols = Math.floor(root.rect.outer.width / dragWidth);\n        if (cols > numItems) cols = numItems;\n\n        // rows are used to find when we have left the preview area bounding box\n        var rows = Math.floor(numItems / cols + 1);\n\n        dropAreaDimensions.setHeight = dragHeight * rows;\n        dropAreaDimensions.setWidth = dragWidth * cols;\n\n        // get new index of dragged item\n        var location = {\n            y: Math.floor(dragPosition.y / dragHeight),\n            x: Math.floor(dragPosition.x / dragWidth),\n            getGridIndex: function getGridIndex() {\n                if (\n                    dragPosition.y > dropAreaDimensions.getHeight ||\n                    dragPosition.y < 0 ||\n                    dragPosition.x > dropAreaDimensions.getWidth ||\n                    dragPosition.x < 0\n                )\n                    return oldIndex;\n                return this.y * cols + this.x;\n            },\n            getColIndex: function getColIndex() {\n                var items = root.query('GET_ACTIVE_ITEMS');\n                var visibleChildren = root.childViews.filter(function(child) {\n                    return child.rect.element.height;\n                });\n                var children = items.map(function(item) {\n                    return visibleChildren.find(function(childView) {\n                        return childView.id === item.id;\n                    });\n                });\n\n                var currentIndex = children.findIndex(function(child) {\n                    return child === view;\n                });\n                var dragHeight = getItemHeight(view);\n                var l = children.length;\n                var idx = l;\n                var childHeight = 0;\n                var childBottom = 0;\n                var childTop = 0;\n                for (var i = 0; i < l; i++) {\n                    childHeight = getItemHeight(children[i]);\n                    childTop = childBottom;\n                    childBottom = childTop + childHeight;\n                    if (dragPosition.y < childBottom) {\n                        if (currentIndex > i) {\n                            if (dragPosition.y < childTop + dragHeight) {\n                                idx = i;\n                                break;\n                            }\n                            continue;\n                        }\n                        idx = i;\n                        break;\n                    }\n                }\n                return idx;\n            },\n        };\n\n        // get new index\n        var index = cols > 1 ? location.getGridIndex() : location.getColIndex();\n        root.dispatch('MOVE_ITEM', { query: view, index: index });\n\n        // if the index of the item changed, dispatch reorder action\n        var currentIndex = dragState.getIndex();\n\n        if (currentIndex === undefined || currentIndex !== index) {\n            dragState.setIndex(index);\n\n            if (currentIndex === undefined) return;\n\n            root.dispatch('DID_REORDER_ITEMS', {\n                items: root.query('GET_ACTIVE_ITEMS'),\n                origin: oldIndex,\n                target: index,\n            });\n        }\n    };\n\n    /**\n     * Setup action routes\n     */\n    var route$2 = createRoute({\n        DID_ADD_ITEM: addItemView,\n        DID_REMOVE_ITEM: removeItemView,\n        DID_DRAG_ITEM: dragItem,\n    });\n\n    /**\n     * Write to view\n     * @param root\n     * @param actions\n     * @param props\n     */\n    var write$5 = function write(_ref5) {\n        var root = _ref5.root,\n            props = _ref5.props,\n            actions = _ref5.actions,\n            shouldOptimize = _ref5.shouldOptimize;\n        // route actions\n        route$2({ root: root, props: props, actions: actions });\n        var dragCoordinates = props.dragCoordinates;\n\n        // available space on horizontal axis\n        var horizontalSpace = root.rect.element.width;\n\n        // only draw children that have dimensions\n        var visibleChildren = root.childViews.filter(function(child) {\n            return child.rect.element.height;\n        });\n\n        // sort based on current active items\n        var children = root\n            .query('GET_ACTIVE_ITEMS')\n            .map(function(item) {\n                return visibleChildren.find(function(child) {\n                    return child.id === item.id;\n                });\n            })\n            .filter(function(item) {\n                return item;\n            });\n\n        // get index\n        var dragIndex = dragCoordinates\n            ? getItemIndexByPosition(root, children, dragCoordinates)\n            : null;\n\n        // add index is used to reserve the dropped/added item index till the actual item is rendered\n        var addIndex = root.ref.addIndex || null;\n\n        // add index no longer needed till possibly next draw\n        root.ref.addIndex = null;\n\n        var dragIndexOffset = 0;\n        var removeIndexOffset = 0;\n        var addIndexOffset = 0;\n\n        if (children.length === 0) return;\n\n        var childRect = children[0].rect.element;\n        var itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n        var itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n        var itemWidth = childRect.width + itemHorizontalMargin;\n        var itemHeight = childRect.height + itemVerticalMargin;\n        var itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n\n        // stack\n        if (itemsPerRow === 1) {\n            var offsetY = 0;\n            var dragOffset = 0;\n\n            children.forEach(function(child, index) {\n                if (dragIndex) {\n                    var dist = index - dragIndex;\n                    if (dist === -2) {\n                        dragOffset = -itemVerticalMargin * 0.25;\n                    } else if (dist === -1) {\n                        dragOffset = -itemVerticalMargin * 0.75;\n                    } else if (dist === 0) {\n                        dragOffset = itemVerticalMargin * 0.75;\n                    } else if (dist === 1) {\n                        dragOffset = itemVerticalMargin * 0.25;\n                    } else {\n                        dragOffset = 0;\n                    }\n                }\n\n                if (shouldOptimize) {\n                    child.translateX = null;\n                    child.translateY = null;\n                }\n\n                if (!child.markedForRemoval) {\n                    moveItem(child, 0, offsetY + dragOffset);\n                }\n\n                var itemHeight = child.rect.element.height + itemVerticalMargin;\n\n                var visualHeight = itemHeight * (child.markedForRemoval ? child.opacity : 1);\n\n                offsetY += visualHeight;\n            });\n        }\n        // grid\n        else {\n            var prevX = 0;\n            var prevY = 0;\n\n            children.forEach(function(child, index) {\n                if (index === dragIndex) {\n                    dragIndexOffset = 1;\n                }\n\n                if (index === addIndex) {\n                    addIndexOffset += 1;\n                }\n\n                if (child.markedForRemoval && child.opacity < 0.5) {\n                    removeIndexOffset -= 1;\n                }\n\n                var visualIndex = index + addIndexOffset + dragIndexOffset + removeIndexOffset;\n\n                var indexX = visualIndex % itemsPerRow;\n                var indexY = Math.floor(visualIndex / itemsPerRow);\n\n                var offsetX = indexX * itemWidth;\n                var offsetY = indexY * itemHeight;\n\n                var vectorX = Math.sign(offsetX - prevX);\n                var vectorY = Math.sign(offsetY - prevY);\n\n                prevX = offsetX;\n                prevY = offsetY;\n\n                if (child.markedForRemoval) return;\n\n                if (shouldOptimize) {\n                    child.translateX = null;\n                    child.translateY = null;\n                }\n\n                moveItem(child, offsetX, offsetY, vectorX, vectorY);\n            });\n        }\n    };\n\n    /**\n     * Filters actions that are meant specifically for a certain child of the list\n     * @param child\n     * @param actions\n     */\n    var filterSetItemActions = function filterSetItemActions(child, actions) {\n        return actions.filter(function(action) {\n            // if action has an id, filter out actions that don't have this child id\n            if (action.data && action.data.id) {\n                return child.id === action.data.id;\n            }\n\n            // allow all other actions\n            return true;\n        });\n    };\n\n    var list = createView({\n        create: create$8,\n        write: write$5,\n        tag: 'ul',\n        name: 'list',\n        didWriteView: function didWriteView(_ref6) {\n            var root = _ref6.root;\n            root.childViews\n                .filter(function(view) {\n                    return view.markedForRemoval && view.opacity === 0 && view.resting;\n                })\n                .forEach(function(view) {\n                    view._destroy();\n                    root.removeChildView(view);\n                });\n        },\n        filterFrameActionsForChild: filterSetItemActions,\n        mixins: {\n            apis: ['dragCoordinates'],\n        },\n    });\n\n    var create$9 = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        root.ref.list = root.appendChildView(root.createChildView(list));\n        props.dragCoordinates = null;\n        props.overflowing = false;\n    };\n\n    var storeDragCoordinates = function storeDragCoordinates(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props,\n            action = _ref2.action;\n        if (!root.query('GET_ITEM_INSERT_LOCATION_FREEDOM')) return;\n        props.dragCoordinates = {\n            left: action.position.scopeLeft - root.ref.list.rect.element.left,\n            top:\n                action.position.scopeTop -\n                (root.rect.outer.top + root.rect.element.marginTop + root.rect.element.scrollTop),\n        };\n    };\n\n    var clearDragCoordinates = function clearDragCoordinates(_ref3) {\n        var props = _ref3.props;\n        props.dragCoordinates = null;\n    };\n\n    var route$3 = createRoute({\n        DID_DRAG: storeDragCoordinates,\n        DID_END_DRAG: clearDragCoordinates,\n    });\n\n    var write$6 = function write(_ref4) {\n        var root = _ref4.root,\n            props = _ref4.props,\n            actions = _ref4.actions;\n\n        // route actions\n        route$3({ root: root, props: props, actions: actions });\n\n        // current drag position\n        root.ref.list.dragCoordinates = props.dragCoordinates;\n\n        // if currently overflowing but no longer received overflow\n        if (props.overflowing && !props.overflow) {\n            props.overflowing = false;\n\n            // reset overflow state\n            root.element.dataset.state = '';\n            root.height = null;\n        }\n\n        // if is not overflowing currently but does receive overflow value\n        if (props.overflow) {\n            var newHeight = Math.round(props.overflow);\n            if (newHeight !== root.height) {\n                props.overflowing = true;\n                root.element.dataset.state = 'overflow';\n                root.height = newHeight;\n            }\n        }\n    };\n\n    var listScroller = createView({\n        create: create$9,\n        write: write$6,\n        name: 'list-scroller',\n        mixins: {\n            apis: ['overflow', 'dragCoordinates'],\n            styles: ['height', 'translateY'],\n            animations: {\n                translateY: 'spring',\n            },\n        },\n    });\n\n    var attrToggle = function attrToggle(element, name, state) {\n        var enabledValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n        if (state) {\n            attr(element, name, enabledValue);\n        } else {\n            element.removeAttribute(name);\n        }\n    };\n\n    var resetFileInput = function resetFileInput(input) {\n        // no value, no need to reset\n        if (!input || input.value === '') {\n            return;\n        }\n\n        try {\n            // for modern browsers\n            input.value = '';\n        } catch (err) {}\n\n        // for IE10\n        if (input.value) {\n            // quickly append input to temp form and reset form\n            var form = createElement$1('form');\n            var parentNode = input.parentNode;\n            var ref = input.nextSibling;\n            form.appendChild(input);\n            form.reset();\n\n            // re-inject input where it originally was\n            if (ref) {\n                parentNode.insertBefore(input, ref);\n            } else {\n                parentNode.appendChild(input);\n            }\n        }\n    };\n\n    var create$a = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // set id so can be referenced from outside labels\n        root.element.id = 'filepond--browser-' + props.id;\n\n        // set name of element (is removed when a value is set)\n        attr(root.element, 'name', root.query('GET_NAME'));\n\n        // we have to link this element to the status element\n        attr(root.element, 'aria-controls', 'filepond--assistant-' + props.id);\n\n        // set label, we use labelled by as otherwise the screenreader does not read the \"browse\" text in the label (as it has tabindex: 0)\n        attr(root.element, 'aria-labelledby', 'filepond--drop-label-' + props.id);\n\n        // set configurable props\n        setAcceptedFileTypes({\n            root: root,\n            action: { value: root.query('GET_ACCEPTED_FILE_TYPES') },\n        });\n        toggleAllowMultiple({ root: root, action: { value: root.query('GET_ALLOW_MULTIPLE') } });\n        toggleDirectoryFilter({\n            root: root,\n            action: { value: root.query('GET_ALLOW_DIRECTORIES_ONLY') },\n        });\n        toggleDisabled({ root: root });\n        toggleRequired({ root: root, action: { value: root.query('GET_REQUIRED') } });\n        setCaptureMethod({ root: root, action: { value: root.query('GET_CAPTURE_METHOD') } });\n\n        // handle changes to the input field\n        root.ref.handleChange = function(e) {\n            if (!root.element.value) {\n                return;\n            }\n\n            // extract files and move value of webkitRelativePath path to _relativePath\n            var files = Array.from(root.element.files).map(function(file) {\n                file._relativePath = file.webkitRelativePath;\n                return file;\n            });\n\n            // we add a little delay so the OS file select window can move out of the way before we add our file\n            setTimeout(function() {\n                // load files\n                props.onload(files);\n\n                // reset input, it's just for exposing a method to drop files, should not retain any state\n                resetFileInput(root.element);\n            }, 250);\n        };\n\n        root.element.addEventListener('change', root.ref.handleChange);\n    };\n\n    var setAcceptedFileTypes = function setAcceptedFileTypes(_ref2) {\n        var root = _ref2.root,\n            action = _ref2.action;\n        if (!root.query('GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE')) return;\n        attrToggle(\n            root.element,\n            'accept',\n            !!action.value,\n            action.value ? action.value.join(',') : ''\n        );\n    };\n\n    var toggleAllowMultiple = function toggleAllowMultiple(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action;\n        attrToggle(root.element, 'multiple', action.value);\n    };\n\n    var toggleDirectoryFilter = function toggleDirectoryFilter(_ref4) {\n        var root = _ref4.root,\n            action = _ref4.action;\n        attrToggle(root.element, 'webkitdirectory', action.value);\n    };\n\n    var toggleDisabled = function toggleDisabled(_ref5) {\n        var root = _ref5.root;\n        var isDisabled = root.query('GET_DISABLED');\n        var doesAllowBrowse = root.query('GET_ALLOW_BROWSE');\n        var disableField = isDisabled || !doesAllowBrowse;\n        attrToggle(root.element, 'disabled', disableField);\n    };\n\n    var toggleRequired = function toggleRequired(_ref6) {\n        var root = _ref6.root,\n            action = _ref6.action;\n        // want to remove required, always possible\n        if (!action.value) {\n            attrToggle(root.element, 'required', false);\n        }\n        // if want to make required, only possible when zero items\n        else if (root.query('GET_TOTAL_ITEMS') === 0) {\n            attrToggle(root.element, 'required', true);\n        }\n    };\n\n    var setCaptureMethod = function setCaptureMethod(_ref7) {\n        var root = _ref7.root,\n            action = _ref7.action;\n        attrToggle(\n            root.element,\n            'capture',\n            !!action.value,\n            action.value === true ? '' : action.value\n        );\n    };\n\n    var updateRequiredStatus = function updateRequiredStatus(_ref8) {\n        var root = _ref8.root;\n        var element = root.element;\n        // always remove the required attribute when more than zero items\n        if (root.query('GET_TOTAL_ITEMS') > 0) {\n            attrToggle(element, 'required', false);\n            attrToggle(element, 'name', false);\n\n            // still has items\n            var activeItems = root.query('GET_ACTIVE_ITEMS');\n            var hasInvalidField = false;\n            for (var i = 0; i < activeItems.length; i++) {\n                if (activeItems[i].status === ItemStatus.LOAD_ERROR) {\n                    hasInvalidField = true;\n                }\n            }\n            // set validity status\n            root.element.setCustomValidity(\n                hasInvalidField ? root.query('GET_LABEL_INVALID_FIELD') : ''\n            );\n        } else {\n            // add name attribute\n            attrToggle(element, 'name', true, root.query('GET_NAME'));\n\n            // remove any validation messages\n            var shouldCheckValidity = root.query('GET_CHECK_VALIDITY');\n            if (shouldCheckValidity) {\n                element.setCustomValidity('');\n            }\n\n            // we only add required if the field has been deemed required\n            if (root.query('GET_REQUIRED')) {\n                attrToggle(element, 'required', true);\n            }\n        }\n    };\n\n    var updateFieldValidityStatus = function updateFieldValidityStatus(_ref9) {\n        var root = _ref9.root;\n        var shouldCheckValidity = root.query('GET_CHECK_VALIDITY');\n        if (!shouldCheckValidity) return;\n        root.element.setCustomValidity(root.query('GET_LABEL_INVALID_FIELD'));\n    };\n\n    var browser = createView({\n        tag: 'input',\n        name: 'browser',\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        attributes: {\n            type: 'file',\n        },\n\n        create: create$a,\n        destroy: function destroy(_ref10) {\n            var root = _ref10.root;\n            root.element.removeEventListener('change', root.ref.handleChange);\n        },\n        write: createRoute({\n            DID_LOAD_ITEM: updateRequiredStatus,\n            DID_REMOVE_ITEM: updateRequiredStatus,\n            DID_THROW_ITEM_INVALID: updateFieldValidityStatus,\n\n            DID_SET_DISABLED: toggleDisabled,\n            DID_SET_ALLOW_BROWSE: toggleDisabled,\n            DID_SET_ALLOW_DIRECTORIES_ONLY: toggleDirectoryFilter,\n            DID_SET_ALLOW_MULTIPLE: toggleAllowMultiple,\n            DID_SET_ACCEPTED_FILE_TYPES: setAcceptedFileTypes,\n            DID_SET_CAPTURE_METHOD: setCaptureMethod,\n            DID_SET_REQUIRED: toggleRequired,\n        }),\n    });\n\n    var Key = {\n        ENTER: 13,\n        SPACE: 32,\n    };\n\n    var create$b = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // create the label and link it to the file browser\n        var label = createElement$1('label');\n        attr(label, 'for', 'filepond--browser-' + props.id);\n\n        // use for labeling file input (aria-labelledby on file input)\n        attr(label, 'id', 'filepond--drop-label-' + props.id);\n\n        // handle keys\n        root.ref.handleKeyDown = function(e) {\n            var isActivationKey = e.keyCode === Key.ENTER || e.keyCode === Key.SPACE;\n            if (!isActivationKey) return;\n            // stops from triggering the element a second time\n            e.preventDefault();\n\n            // click link (will then in turn activate file input)\n            root.ref.label.click();\n        };\n\n        root.ref.handleClick = function(e) {\n            var isLabelClick = e.target === label || label.contains(e.target);\n\n            // don't want to click twice\n            if (isLabelClick) return;\n\n            // click link (will then in turn activate file input)\n            root.ref.label.click();\n        };\n\n        // attach events\n        label.addEventListener('keydown', root.ref.handleKeyDown);\n        root.element.addEventListener('click', root.ref.handleClick);\n\n        // update\n        updateLabelValue(label, props.caption);\n\n        // add!\n        root.appendChild(label);\n        root.ref.label = label;\n    };\n\n    var updateLabelValue = function updateLabelValue(label, value) {\n        label.innerHTML = value;\n        var clickable = label.querySelector('.filepond--label-action');\n        if (clickable) {\n            attr(clickable, 'tabindex', '0');\n        }\n        return value;\n    };\n\n    var dropLabel = createView({\n        name: 'drop-label',\n        ignoreRect: true,\n        create: create$b,\n        destroy: function destroy(_ref2) {\n            var root = _ref2.root;\n            root.ref.label.addEventListener('keydown', root.ref.handleKeyDown);\n            root.element.removeEventListener('click', root.ref.handleClick);\n        },\n        write: createRoute({\n            DID_SET_LABEL_IDLE: function DID_SET_LABEL_IDLE(_ref3) {\n                var root = _ref3.root,\n                    action = _ref3.action;\n                updateLabelValue(root.ref.label, action.value);\n            },\n        }),\n\n        mixins: {\n            styles: ['opacity', 'translateX', 'translateY'],\n            animations: {\n                opacity: { type: 'tween', duration: 150 },\n                translateX: 'spring',\n                translateY: 'spring',\n            },\n        },\n    });\n\n    var blob = createView({\n        name: 'drip-blob',\n        ignoreRect: true,\n        mixins: {\n            styles: ['translateX', 'translateY', 'scaleX', 'scaleY', 'opacity'],\n            animations: {\n                scaleX: 'spring',\n                scaleY: 'spring',\n                translateX: 'spring',\n                translateY: 'spring',\n                opacity: { type: 'tween', duration: 250 },\n            },\n        },\n    });\n\n    var addBlob = function addBlob(_ref) {\n        var root = _ref.root;\n        var centerX = root.rect.element.width * 0.5;\n        var centerY = root.rect.element.height * 0.5;\n\n        root.ref.blob = root.appendChildView(\n            root.createChildView(blob, {\n                opacity: 0,\n                scaleX: 2.5,\n                scaleY: 2.5,\n                translateX: centerX,\n                translateY: centerY,\n            })\n        );\n    };\n\n    var moveBlob = function moveBlob(_ref2) {\n        var root = _ref2.root,\n            action = _ref2.action;\n        if (!root.ref.blob) {\n            addBlob({ root: root });\n            return;\n        }\n\n        root.ref.blob.translateX = action.position.scopeLeft;\n        root.ref.blob.translateY = action.position.scopeTop;\n        root.ref.blob.scaleX = 1;\n        root.ref.blob.scaleY = 1;\n        root.ref.blob.opacity = 1;\n    };\n\n    var hideBlob = function hideBlob(_ref3) {\n        var root = _ref3.root;\n        if (!root.ref.blob) {\n            return;\n        }\n        root.ref.blob.opacity = 0;\n    };\n\n    var explodeBlob = function explodeBlob(_ref4) {\n        var root = _ref4.root;\n        if (!root.ref.blob) {\n            return;\n        }\n        root.ref.blob.scaleX = 2.5;\n        root.ref.blob.scaleY = 2.5;\n        root.ref.blob.opacity = 0;\n    };\n\n    var write$7 = function write(_ref5) {\n        var root = _ref5.root,\n            props = _ref5.props,\n            actions = _ref5.actions;\n        route$4({ root: root, props: props, actions: actions });\n        var blob = root.ref.blob;\n\n        if (actions.length === 0 && blob && blob.opacity === 0) {\n            root.removeChildView(blob);\n            root.ref.blob = null;\n        }\n    };\n\n    var route$4 = createRoute({\n        DID_DRAG: moveBlob,\n        DID_DROP: explodeBlob,\n        DID_END_DRAG: hideBlob,\n    });\n\n    var drip = createView({\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        name: 'drip',\n        write: write$7,\n    });\n\n    var setInputFiles = function setInputFiles(element, files) {\n        try {\n            // Create a DataTransfer instance and add a newly created file\n            var dataTransfer = new DataTransfer();\n            files.forEach(function(file) {\n                if (file instanceof File) {\n                    dataTransfer.items.add(file);\n                } else {\n                    dataTransfer.items.add(\n                        new File([file], file.name, {\n                            type: file.type,\n                        })\n                    );\n                }\n            });\n\n            // Assign the DataTransfer files list to the file input\n            element.files = dataTransfer.files;\n        } catch (err) {\n            return false;\n        }\n        return true;\n    };\n\n    var create$c = function create(_ref) {\n        var root = _ref.root;\n        root.ref.fields = {};\n        var legend = document.createElement('legend');\n        legend.textContent = 'Files';\n        root.element.appendChild(legend);\n    };\n\n    var getField = function getField(root, id) {\n        return root.ref.fields[id];\n    };\n\n    var syncFieldPositionsWithItems = function syncFieldPositionsWithItems(root) {\n        root.query('GET_ACTIVE_ITEMS').forEach(function(item) {\n            if (!root.ref.fields[item.id]) return;\n            root.element.appendChild(root.ref.fields[item.id]);\n        });\n    };\n\n    var didReorderItems = function didReorderItems(_ref2) {\n        var root = _ref2.root;\n        return syncFieldPositionsWithItems(root);\n    };\n\n    var didAddItem = function didAddItem(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action;\n        var fileItem = root.query('GET_ITEM', action.id);\n        var isLocalFile = fileItem.origin === FileOrigin.LOCAL;\n        var shouldUseFileInput = !isLocalFile && root.query('SHOULD_UPDATE_FILE_INPUT');\n        var dataContainer = createElement$1('input');\n        dataContainer.type = shouldUseFileInput ? 'file' : 'hidden';\n        dataContainer.name = root.query('GET_NAME');\n        root.ref.fields[action.id] = dataContainer;\n        syncFieldPositionsWithItems(root);\n    };\n\n    var didLoadItem$1 = function didLoadItem(_ref4) {\n        var root = _ref4.root,\n            action = _ref4.action;\n        var field = getField(root, action.id);\n        if (!field) return;\n\n        // store server ref in hidden input\n        if (action.serverFileReference !== null) field.value = action.serverFileReference;\n\n        // store file item in file input\n        if (!root.query('SHOULD_UPDATE_FILE_INPUT')) return;\n\n        var fileItem = root.query('GET_ITEM', action.id);\n        setInputFiles(field, [fileItem.file]);\n    };\n\n    var didPrepareOutput = function didPrepareOutput(_ref5) {\n        var root = _ref5.root,\n            action = _ref5.action;\n        // this timeout pushes the handler after 'load'\n        if (!root.query('SHOULD_UPDATE_FILE_INPUT')) return;\n        setTimeout(function() {\n            var field = getField(root, action.id);\n            if (!field) return;\n            setInputFiles(field, [action.file]);\n        }, 0);\n    };\n\n    var didSetDisabled = function didSetDisabled(_ref6) {\n        var root = _ref6.root;\n        root.element.disabled = root.query('GET_DISABLED');\n    };\n\n    var didRemoveItem = function didRemoveItem(_ref7) {\n        var root = _ref7.root,\n            action = _ref7.action;\n        var field = getField(root, action.id);\n        if (!field) return;\n        if (field.parentNode) field.parentNode.removeChild(field);\n        delete root.ref.fields[action.id];\n    };\n\n    // only runs for server files. will refuse to update the value if the field\n    // is a file field\n    var didDefineValue = function didDefineValue(_ref8) {\n        var root = _ref8.root,\n            action = _ref8.action;\n        var field = getField(root, action.id);\n        if (!field) return;\n        if (action.value === null) {\n            // clear field value\n            field.removeAttribute('value');\n        } else {\n            // set field value\n            if (field.type != 'file') {\n                field.value = action.value;\n            }\n        }\n        syncFieldPositionsWithItems(root);\n    };\n\n    var write$8 = createRoute({\n        DID_SET_DISABLED: didSetDisabled,\n        DID_ADD_ITEM: didAddItem,\n        DID_LOAD_ITEM: didLoadItem$1,\n        DID_REMOVE_ITEM: didRemoveItem,\n        DID_DEFINE_VALUE: didDefineValue,\n        DID_PREPARE_OUTPUT: didPrepareOutput,\n        DID_REORDER_ITEMS: didReorderItems,\n        DID_SORT_ITEMS: didReorderItems,\n    });\n\n    var data = createView({\n        tag: 'fieldset',\n        name: 'data',\n        create: create$c,\n        write: write$8,\n        ignoreRect: true,\n    });\n\n    var getRootNode = function getRootNode(element) {\n        return 'getRootNode' in element ? element.getRootNode() : document;\n    };\n\n    var images = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg', 'tiff'];\n    var text$1 = ['css', 'csv', 'html', 'txt'];\n    var map = {\n        zip: 'zip|compressed',\n        epub: 'application/epub+zip',\n    };\n\n    var guesstimateMimeType = function guesstimateMimeType() {\n        var extension = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        extension = extension.toLowerCase();\n        if (images.includes(extension)) {\n            return (\n                'image/' +\n                (extension === 'jpg' ? 'jpeg' : extension === 'svg' ? 'svg+xml' : extension)\n            );\n        }\n        if (text$1.includes(extension)) {\n            return 'text/' + extension;\n        }\n\n        return map[extension] || '';\n    };\n\n    var requestDataTransferItems = function requestDataTransferItems(dataTransfer) {\n        return new Promise(function(resolve, reject) {\n            // try to get links from transfer, if found we'll exit immediately (unless a file is in the dataTransfer as well, this is because Firefox could represent the file as a URL and a file object at the same time)\n            var links = getLinks(dataTransfer);\n            if (links.length && !hasFiles(dataTransfer)) {\n                return resolve(links);\n            }\n            // try to get files from the transfer\n            getFiles(dataTransfer).then(resolve);\n        });\n    };\n\n    /**\n     * Test if datatransfer has files\n     */\n    var hasFiles = function hasFiles(dataTransfer) {\n        if (dataTransfer.files) return dataTransfer.files.length > 0;\n        return false;\n    };\n\n    /**\n     * Extracts files from a DataTransfer object\n     */\n    var getFiles = function getFiles(dataTransfer) {\n        return new Promise(function(resolve, reject) {\n            // get the transfer items as promises\n            var promisedFiles = (dataTransfer.items ? Array.from(dataTransfer.items) : [])\n                // only keep file system items (files and directories)\n                .filter(function(item) {\n                    return isFileSystemItem(item);\n                })\n\n                // map each item to promise\n                .map(function(item) {\n                    return getFilesFromItem(item);\n                });\n\n            // if is empty, see if we can extract some info from the files property as a fallback\n            if (!promisedFiles.length) {\n                // TODO: test for directories (should not be allowed)\n                // Use FileReader, problem is that the files property gets lost in the process\n                resolve(dataTransfer.files ? Array.from(dataTransfer.files) : []);\n                return;\n            }\n\n            // done!\n            Promise.all(promisedFiles)\n                .then(function(returnedFileGroups) {\n                    // flatten groups\n                    var files = [];\n                    returnedFileGroups.forEach(function(group) {\n                        files.push.apply(files, group);\n                    });\n\n                    // done (filter out empty files)!\n                    resolve(\n                        files\n                            .filter(function(file) {\n                                return file;\n                            })\n                            .map(function(file) {\n                                if (!file._relativePath)\n                                    file._relativePath = file.webkitRelativePath;\n                                return file;\n                            })\n                    );\n                })\n                .catch(console.error);\n        });\n    };\n\n    var isFileSystemItem = function isFileSystemItem(item) {\n        if (isEntry(item)) {\n            var entry = getAsEntry(item);\n            if (entry) {\n                return entry.isFile || entry.isDirectory;\n            }\n        }\n        return item.kind === 'file';\n    };\n\n    var getFilesFromItem = function getFilesFromItem(item) {\n        return new Promise(function(resolve, reject) {\n            if (isDirectoryEntry(item)) {\n                getFilesInDirectory(getAsEntry(item))\n                    .then(resolve)\n                    .catch(reject);\n                return;\n            }\n\n            resolve([item.getAsFile()]);\n        });\n    };\n\n    var getFilesInDirectory = function getFilesInDirectory(entry) {\n        return new Promise(function(resolve, reject) {\n            var files = [];\n\n            // the total entries to read\n            var dirCounter = 0;\n            var fileCounter = 0;\n\n            var resolveIfDone = function resolveIfDone() {\n                if (fileCounter === 0 && dirCounter === 0) {\n                    resolve(files);\n                }\n            };\n\n            // the recursive function\n            var readEntries = function readEntries(dirEntry) {\n                dirCounter++;\n\n                var directoryReader = dirEntry.createReader();\n\n                // directories are returned in batches, we need to process all batches before we're done\n                var readBatch = function readBatch() {\n                    directoryReader.readEntries(function(entries) {\n                        if (entries.length === 0) {\n                            dirCounter--;\n                            resolveIfDone();\n                            return;\n                        }\n\n                        entries.forEach(function(entry) {\n                            // recursively read more directories\n                            if (entry.isDirectory) {\n                                readEntries(entry);\n                            } else {\n                                // read as file\n                                fileCounter++;\n\n                                entry.file(function(file) {\n                                    var correctedFile = correctMissingFileType(file);\n                                    if (entry.fullPath)\n                                        correctedFile._relativePath = entry.fullPath;\n                                    files.push(correctedFile);\n                                    fileCounter--;\n                                    resolveIfDone();\n                                });\n                            }\n                        });\n\n                        // try to get next batch of files\n                        readBatch();\n                    }, reject);\n                };\n\n                // read first batch of files\n                readBatch();\n            };\n\n            // go!\n            readEntries(entry);\n        });\n    };\n\n    var correctMissingFileType = function correctMissingFileType(file) {\n        if (file.type.length) return file;\n        var date = file.lastModifiedDate;\n        var name = file.name;\n        var type = guesstimateMimeType(getExtensionFromFilename(file.name));\n        if (!type.length) return file;\n        file = file.slice(0, file.size, type);\n        file.name = name;\n        file.lastModifiedDate = date;\n        return file;\n    };\n\n    var isDirectoryEntry = function isDirectoryEntry(item) {\n        return isEntry(item) && (getAsEntry(item) || {}).isDirectory;\n    };\n\n    var isEntry = function isEntry(item) {\n        return 'webkitGetAsEntry' in item;\n    };\n\n    var getAsEntry = function getAsEntry(item) {\n        return item.webkitGetAsEntry();\n    };\n\n    /**\n     * Extracts links from a DataTransfer object\n     */\n    var getLinks = function getLinks(dataTransfer) {\n        var links = [];\n        try {\n            // look in meta data property\n            links = getLinksFromTransferMetaData(dataTransfer);\n            if (links.length) {\n                return links;\n            }\n            links = getLinksFromTransferURLData(dataTransfer);\n        } catch (e) {\n            // nope nope nope (probably IE trouble)\n        }\n        return links;\n    };\n\n    var getLinksFromTransferURLData = function getLinksFromTransferURLData(dataTransfer) {\n        var data = dataTransfer.getData('url');\n        if (typeof data === 'string' && data.length) {\n            return [data];\n        }\n        return [];\n    };\n\n    var getLinksFromTransferMetaData = function getLinksFromTransferMetaData(dataTransfer) {\n        var data = dataTransfer.getData('text/html');\n        if (typeof data === 'string' && data.length) {\n            var matches = data.match(/src\\s*=\\s*\"(.+?)\"/);\n            if (matches) {\n                return [matches[1]];\n            }\n        }\n        return [];\n    };\n\n    var dragNDropObservers = [];\n\n    var eventPosition = function eventPosition(e) {\n        return {\n            pageLeft: e.pageX,\n            pageTop: e.pageY,\n            scopeLeft: e.offsetX || e.layerX,\n            scopeTop: e.offsetY || e.layerY,\n        };\n    };\n\n    var createDragNDropClient = function createDragNDropClient(\n        element,\n        scopeToObserve,\n        filterElement\n    ) {\n        var observer = getDragNDropObserver(scopeToObserve);\n\n        var client = {\n            element: element,\n            filterElement: filterElement,\n            state: null,\n            ondrop: function ondrop() {},\n            onenter: function onenter() {},\n            ondrag: function ondrag() {},\n            onexit: function onexit() {},\n            onload: function onload() {},\n            allowdrop: function allowdrop() {},\n        };\n\n        client.destroy = observer.addListener(client);\n\n        return client;\n    };\n\n    var getDragNDropObserver = function getDragNDropObserver(element) {\n        // see if already exists, if so, return\n        var observer = dragNDropObservers.find(function(item) {\n            return item.element === element;\n        });\n        if (observer) {\n            return observer;\n        }\n\n        // create new observer, does not yet exist for this element\n        var newObserver = createDragNDropObserver(element);\n        dragNDropObservers.push(newObserver);\n        return newObserver;\n    };\n\n    var createDragNDropObserver = function createDragNDropObserver(element) {\n        var clients = [];\n\n        var routes = {\n            dragenter: dragenter,\n            dragover: dragover,\n            dragleave: dragleave,\n            drop: drop,\n        };\n\n        var handlers = {};\n\n        forin(routes, function(event, createHandler) {\n            handlers[event] = createHandler(element, clients);\n            element.addEventListener(event, handlers[event], false);\n        });\n\n        var observer = {\n            element: element,\n            addListener: function addListener(client) {\n                // add as client\n                clients.push(client);\n\n                // return removeListener function\n                return function() {\n                    // remove client\n                    clients.splice(clients.indexOf(client), 1);\n\n                    // if no more clients, clean up observer\n                    if (clients.length === 0) {\n                        dragNDropObservers.splice(dragNDropObservers.indexOf(observer), 1);\n\n                        forin(routes, function(event) {\n                            element.removeEventListener(event, handlers[event], false);\n                        });\n                    }\n                };\n            },\n        };\n\n        return observer;\n    };\n\n    var elementFromPoint = function elementFromPoint(root, point) {\n        if (!('elementFromPoint' in root)) {\n            root = document;\n        }\n        return root.elementFromPoint(point.x, point.y);\n    };\n\n    var isEventTarget = function isEventTarget(e, target) {\n        // get root\n        var root = getRootNode(target);\n\n        // get element at position\n        // if root is not actual shadow DOM and does not have elementFromPoint method, use the one on document\n        var elementAtPosition = elementFromPoint(root, {\n            x: e.pageX - window.pageXOffset,\n            y: e.pageY - window.pageYOffset,\n        });\n\n        // test if target is the element or if one of its children is\n        return elementAtPosition === target || target.contains(elementAtPosition);\n    };\n\n    var initialTarget = null;\n\n    var setDropEffect = function setDropEffect(dataTransfer, effect) {\n        // is in try catch as IE11 will throw error if not\n        try {\n            dataTransfer.dropEffect = effect;\n        } catch (e) {}\n    };\n\n    var dragenter = function dragenter(root, clients) {\n        return function(e) {\n            e.preventDefault();\n\n            initialTarget = e.target;\n\n            clients.forEach(function(client) {\n                var element = client.element,\n                    onenter = client.onenter;\n\n                if (isEventTarget(e, element)) {\n                    client.state = 'enter';\n\n                    // fire enter event\n                    onenter(eventPosition(e));\n                }\n            });\n        };\n    };\n\n    var dragover = function dragover(root, clients) {\n        return function(e) {\n            e.preventDefault();\n\n            var dataTransfer = e.dataTransfer;\n\n            requestDataTransferItems(dataTransfer).then(function(items) {\n                var overDropTarget = false;\n\n                clients.some(function(client) {\n                    var filterElement = client.filterElement,\n                        element = client.element,\n                        onenter = client.onenter,\n                        onexit = client.onexit,\n                        ondrag = client.ondrag,\n                        allowdrop = client.allowdrop;\n\n                    // by default we can drop\n                    setDropEffect(dataTransfer, 'copy');\n\n                    // allow transfer of these items\n                    var allowsTransfer = allowdrop(items);\n\n                    // only used when can be dropped on page\n                    if (!allowsTransfer) {\n                        setDropEffect(dataTransfer, 'none');\n                        return;\n                    }\n\n                    // targetting this client\n                    if (isEventTarget(e, element)) {\n                        overDropTarget = true;\n\n                        // had no previous state, means we are entering this client\n                        if (client.state === null) {\n                            client.state = 'enter';\n                            onenter(eventPosition(e));\n                            return;\n                        }\n\n                        // now over element (no matter if it allows the drop or not)\n                        client.state = 'over';\n\n                        // needs to allow transfer\n                        if (filterElement && !allowsTransfer) {\n                            setDropEffect(dataTransfer, 'none');\n                            return;\n                        }\n\n                        // dragging\n                        ondrag(eventPosition(e));\n                    } else {\n                        // should be over an element to drop\n                        if (filterElement && !overDropTarget) {\n                            setDropEffect(dataTransfer, 'none');\n                        }\n\n                        // might have just left this client?\n                        if (client.state) {\n                            client.state = null;\n                            onexit(eventPosition(e));\n                        }\n                    }\n                });\n            });\n        };\n    };\n\n    var drop = function drop(root, clients) {\n        return function(e) {\n            e.preventDefault();\n\n            var dataTransfer = e.dataTransfer;\n\n            requestDataTransferItems(dataTransfer).then(function(items) {\n                clients.forEach(function(client) {\n                    var filterElement = client.filterElement,\n                        element = client.element,\n                        ondrop = client.ondrop,\n                        onexit = client.onexit,\n                        allowdrop = client.allowdrop;\n\n                    client.state = null;\n\n                    // if we're filtering on element we need to be over the element to drop\n                    if (filterElement && !isEventTarget(e, element)) return;\n\n                    // no transfer for this client\n                    if (!allowdrop(items)) return onexit(eventPosition(e));\n\n                    // we can drop these items on this client\n                    ondrop(eventPosition(e), items);\n                });\n            });\n        };\n    };\n\n    var dragleave = function dragleave(root, clients) {\n        return function(e) {\n            if (initialTarget !== e.target) {\n                return;\n            }\n\n            clients.forEach(function(client) {\n                var onexit = client.onexit;\n\n                client.state = null;\n\n                onexit(eventPosition(e));\n            });\n        };\n    };\n\n    var createHopper = function createHopper(scope, validateItems, options) {\n        // is now hopper scope\n        scope.classList.add('filepond--hopper');\n\n        // shortcuts\n        var catchesDropsOnPage = options.catchesDropsOnPage,\n            requiresDropOnElement = options.requiresDropOnElement,\n            _options$filterItems = options.filterItems,\n            filterItems =\n                _options$filterItems === void 0\n                    ? function(items) {\n                          return items;\n                      }\n                    : _options$filterItems;\n\n        // create a dnd client\n        var client = createDragNDropClient(\n            scope,\n            catchesDropsOnPage ? document.documentElement : scope,\n            requiresDropOnElement\n        );\n\n        // current client state\n        var lastState = '';\n        var currentState = '';\n\n        // determines if a file may be dropped\n        client.allowdrop = function(items) {\n            // TODO: if we can, throw error to indicate the items cannot by dropped\n\n            return validateItems(filterItems(items));\n        };\n\n        client.ondrop = function(position, items) {\n            var filteredItems = filterItems(items);\n\n            if (!validateItems(filteredItems)) {\n                api.ondragend(position);\n                return;\n            }\n\n            currentState = 'drag-drop';\n\n            api.onload(filteredItems, position);\n        };\n\n        client.ondrag = function(position) {\n            api.ondrag(position);\n        };\n\n        client.onenter = function(position) {\n            currentState = 'drag-over';\n\n            api.ondragstart(position);\n        };\n\n        client.onexit = function(position) {\n            currentState = 'drag-exit';\n\n            api.ondragend(position);\n        };\n\n        var api = {\n            updateHopperState: function updateHopperState() {\n                if (lastState !== currentState) {\n                    scope.dataset.hopperState = currentState;\n                    lastState = currentState;\n                }\n            },\n            onload: function onload() {},\n            ondragstart: function ondragstart() {},\n            ondrag: function ondrag() {},\n            ondragend: function ondragend() {},\n            destroy: function destroy() {\n                // destroy client\n                client.destroy();\n            },\n        };\n\n        return api;\n    };\n\n    var listening = false;\n    var listeners$1 = [];\n\n    var handlePaste = function handlePaste(e) {\n        // if is pasting in input or textarea and the target is outside of a filepond scope, ignore\n        var activeEl = document.activeElement;\n        var isActiveElementEditable =\n            activeEl &&\n            (/textarea|input/i.test(activeEl.nodeName) ||\n                activeEl.getAttribute('contenteditable') === 'true');\n\n        if (isActiveElementEditable) {\n            // test textarea or input is contained in filepond root\n            var inScope = false;\n            var element = activeEl;\n            while (element !== document.body) {\n                if (element.classList.contains('filepond--root')) {\n                    inScope = true;\n                    break;\n                }\n                element = element.parentNode;\n            }\n\n            if (!inScope) return;\n        }\n\n        requestDataTransferItems(e.clipboardData).then(function(files) {\n            // no files received\n            if (!files.length) {\n                return;\n            }\n\n            // notify listeners of received files\n            listeners$1.forEach(function(listener) {\n                return listener(files);\n            });\n        });\n    };\n\n    var listen = function listen(cb) {\n        // can't add twice\n        if (listeners$1.includes(cb)) {\n            return;\n        }\n\n        // add initial listener\n        listeners$1.push(cb);\n\n        // setup paste listener for entire page\n        if (listening) {\n            return;\n        }\n\n        listening = true;\n        document.addEventListener('paste', handlePaste);\n    };\n\n    var unlisten = function unlisten(listener) {\n        arrayRemove(listeners$1, listeners$1.indexOf(listener));\n\n        // clean up\n        if (listeners$1.length === 0) {\n            document.removeEventListener('paste', handlePaste);\n            listening = false;\n        }\n    };\n\n    var createPaster = function createPaster() {\n        var cb = function cb(files) {\n            api.onload(files);\n        };\n\n        var api = {\n            destroy: function destroy() {\n                unlisten(cb);\n            },\n            onload: function onload() {},\n        };\n\n        listen(cb);\n\n        return api;\n    };\n\n    /**\n     * Creates the file view\n     */\n    var create$d = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        root.element.id = 'filepond--assistant-' + props.id;\n        attr(root.element, 'role', 'alert');\n        attr(root.element, 'aria-live', 'polite');\n        attr(root.element, 'aria-relevant', 'additions');\n    };\n\n    var addFilesNotificationTimeout = null;\n    var notificationClearTimeout = null;\n\n    var filenames = [];\n\n    var assist = function assist(root, message) {\n        root.element.textContent = message;\n    };\n\n    var clear$1 = function clear(root) {\n        root.element.textContent = '';\n    };\n\n    var listModified = function listModified(root, filename, label) {\n        var total = root.query('GET_TOTAL_ITEMS');\n        assist(\n            root,\n            label +\n                ' ' +\n                filename +\n                ', ' +\n                total +\n                ' ' +\n                (total === 1\n                    ? root.query('GET_LABEL_FILE_COUNT_SINGULAR')\n                    : root.query('GET_LABEL_FILE_COUNT_PLURAL'))\n        );\n\n        // clear group after set amount of time so the status is not read twice\n        clearTimeout(notificationClearTimeout);\n        notificationClearTimeout = setTimeout(function() {\n            clear$1(root);\n        }, 1500);\n    };\n\n    var isUsingFilePond = function isUsingFilePond(root) {\n        return root.element.parentNode.contains(document.activeElement);\n    };\n\n    var itemAdded = function itemAdded(_ref2) {\n        var root = _ref2.root,\n            action = _ref2.action;\n        if (!isUsingFilePond(root)) {\n            return;\n        }\n\n        root.element.textContent = '';\n        var item = root.query('GET_ITEM', action.id);\n        filenames.push(item.filename);\n\n        clearTimeout(addFilesNotificationTimeout);\n        addFilesNotificationTimeout = setTimeout(function() {\n            listModified(root, filenames.join(', '), root.query('GET_LABEL_FILE_ADDED'));\n            filenames.length = 0;\n        }, 750);\n    };\n\n    var itemRemoved = function itemRemoved(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action;\n        if (!isUsingFilePond(root)) {\n            return;\n        }\n\n        var item = action.item;\n        listModified(root, item.filename, root.query('GET_LABEL_FILE_REMOVED'));\n    };\n\n    var itemProcessed = function itemProcessed(_ref4) {\n        var root = _ref4.root,\n            action = _ref4.action;\n        // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n\n        var item = root.query('GET_ITEM', action.id);\n        var filename = item.filename;\n        var label = root.query('GET_LABEL_FILE_PROCESSING_COMPLETE');\n\n        assist(root, filename + ' ' + label);\n    };\n\n    var itemProcessedUndo = function itemProcessedUndo(_ref5) {\n        var root = _ref5.root,\n            action = _ref5.action;\n        var item = root.query('GET_ITEM', action.id);\n        var filename = item.filename;\n        var label = root.query('GET_LABEL_FILE_PROCESSING_ABORTED');\n\n        assist(root, filename + ' ' + label);\n    };\n\n    var itemError = function itemError(_ref6) {\n        var root = _ref6.root,\n            action = _ref6.action;\n        var item = root.query('GET_ITEM', action.id);\n        var filename = item.filename;\n\n        // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n\n        assist(root, action.status.main + ' ' + filename + ' ' + action.status.sub);\n    };\n\n    var assistant = createView({\n        create: create$d,\n        ignoreRect: true,\n        ignoreRectUpdate: true,\n        write: createRoute({\n            DID_LOAD_ITEM: itemAdded,\n            DID_REMOVE_ITEM: itemRemoved,\n            DID_COMPLETE_ITEM_PROCESSING: itemProcessed,\n\n            DID_ABORT_ITEM_PROCESSING: itemProcessedUndo,\n            DID_REVERT_ITEM_PROCESSING: itemProcessedUndo,\n\n            DID_THROW_ITEM_REMOVE_ERROR: itemError,\n            DID_THROW_ITEM_LOAD_ERROR: itemError,\n            DID_THROW_ITEM_INVALID: itemError,\n            DID_THROW_ITEM_PROCESSING_ERROR: itemError,\n        }),\n\n        tag: 'span',\n        name: 'assistant',\n    });\n\n    var toCamels = function toCamels(string) {\n        var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n        return string.replace(new RegExp(separator + '.', 'g'), function(sub) {\n            return sub.charAt(1).toUpperCase();\n        });\n    };\n\n    var debounce = function debounce(func) {\n        var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n        var immidiateOnly =\n            arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var last = Date.now();\n        var timeout = null;\n\n        return function() {\n            for (\n                var _len = arguments.length, args = new Array(_len), _key = 0;\n                _key < _len;\n                _key++\n            ) {\n                args[_key] = arguments[_key];\n            }\n            clearTimeout(timeout);\n\n            var dist = Date.now() - last;\n\n            var fn = function fn() {\n                last = Date.now();\n                func.apply(void 0, args);\n            };\n\n            if (dist < interval) {\n                // we need to delay by the difference between interval and dist\n                // for example: if distance is 10 ms and interval is 16 ms,\n                // we need to wait an additional 6ms before calling the function)\n                if (!immidiateOnly) {\n                    timeout = setTimeout(fn, interval - dist);\n                }\n            } else {\n                // go!\n                fn();\n            }\n        };\n    };\n\n    var MAX_FILES_LIMIT = 1000000;\n\n    var prevent = function prevent(e) {\n        return e.preventDefault();\n    };\n\n    var create$e = function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        // Add id\n        var id = root.query('GET_ID');\n        if (id) {\n            root.element.id = id;\n        }\n\n        // Add className\n        var className = root.query('GET_CLASS_NAME');\n        if (className) {\n            className\n                .split(' ')\n                .filter(function(name) {\n                    return name.length;\n                })\n                .forEach(function(name) {\n                    root.element.classList.add(name);\n                });\n        }\n\n        // Field label\n        root.ref.label = root.appendChildView(\n            root.createChildView(\n                dropLabel,\n                Object.assign({}, props, {\n                    translateY: null,\n                    caption: root.query('GET_LABEL_IDLE'),\n                })\n            )\n        );\n\n        // List of items\n        root.ref.list = root.appendChildView(\n            root.createChildView(listScroller, { translateY: null })\n        );\n\n        // Background panel\n        root.ref.panel = root.appendChildView(root.createChildView(panel, { name: 'panel-root' }));\n\n        // Assistant notifies assistive tech when content changes\n        root.ref.assistant = root.appendChildView(\n            root.createChildView(assistant, Object.assign({}, props))\n        );\n\n        // Data\n        root.ref.data = root.appendChildView(root.createChildView(data, Object.assign({}, props)));\n\n        // Measure (tests if fixed height was set)\n        // DOCTYPE needs to be set for this to work\n        root.ref.measure = createElement$1('div');\n        root.ref.measure.style.height = '100%';\n        root.element.appendChild(root.ref.measure);\n\n        // information on the root height or fixed height status\n        root.ref.bounds = null;\n\n        // apply initial style properties\n        root.query('GET_STYLES')\n            .filter(function(style) {\n                return !isEmpty(style.value);\n            })\n            .map(function(_ref2) {\n                var name = _ref2.name,\n                    value = _ref2.value;\n                root.element.dataset[name] = value;\n            });\n\n        // determine if width changed\n        root.ref.widthPrevious = null;\n        root.ref.widthUpdated = debounce(function() {\n            root.ref.updateHistory = [];\n            root.dispatch('DID_RESIZE_ROOT');\n        }, 250);\n\n        // history of updates\n        root.ref.previousAspectRatio = null;\n        root.ref.updateHistory = [];\n\n        // prevent scrolling and zooming on iOS (only if supports pointer events, for then we can enable reorder)\n        var canHover = window.matchMedia('(pointer: fine) and (hover: hover)').matches;\n        var hasPointerEvents = 'PointerEvent' in window;\n        if (root.query('GET_ALLOW_REORDER') && hasPointerEvents && !canHover) {\n            root.element.addEventListener('touchmove', prevent, { passive: false });\n            root.element.addEventListener('gesturestart', prevent);\n        }\n\n        // add credits\n        var credits = root.query('GET_CREDITS');\n        var hasCredits = credits.length === 2;\n        if (hasCredits) {\n            var frag = document.createElement('a');\n            frag.className = 'filepond--credits';\n            frag.href = credits[0];\n            frag.tabIndex = -1;\n            frag.target = '_blank';\n            frag.rel = 'noopener noreferrer nofollow';\n            frag.textContent = credits[1];\n            root.element.appendChild(frag);\n            root.ref.credits = frag;\n        }\n    };\n\n    var write$9 = function write(_ref3) {\n        var root = _ref3.root,\n            props = _ref3.props,\n            actions = _ref3.actions;\n        // route actions\n        route$5({ root: root, props: props, actions: actions });\n\n        // apply style properties\n        actions\n            .filter(function(action) {\n                return /^DID_SET_STYLE_/.test(action.type);\n            })\n            .filter(function(action) {\n                return !isEmpty(action.data.value);\n            })\n            .map(function(_ref4) {\n                var type = _ref4.type,\n                    data = _ref4.data;\n                var name = toCamels(type.substring(8).toLowerCase(), '_');\n                root.element.dataset[name] = data.value;\n                root.invalidateLayout();\n            });\n\n        if (root.rect.element.hidden) return;\n\n        if (root.rect.element.width !== root.ref.widthPrevious) {\n            root.ref.widthPrevious = root.rect.element.width;\n            root.ref.widthUpdated();\n        }\n\n        // get box bounds, we do this only once\n        var bounds = root.ref.bounds;\n        if (!bounds) {\n            bounds = root.ref.bounds = calculateRootBoundingBoxHeight(root);\n\n            // destroy measure element\n            root.element.removeChild(root.ref.measure);\n            root.ref.measure = null;\n        }\n\n        // get quick references to various high level parts of the upload tool\n        var _root$ref = root.ref,\n            hopper = _root$ref.hopper,\n            label = _root$ref.label,\n            list = _root$ref.list,\n            panel = _root$ref.panel;\n\n        // sets correct state to hopper scope\n        if (hopper) {\n            hopper.updateHopperState();\n        }\n\n        // bool to indicate if we're full or not\n        var aspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n        var isMultiItem = root.query('GET_ALLOW_MULTIPLE');\n        var totalItems = root.query('GET_TOTAL_ITEMS');\n        var maxItems = isMultiItem ? root.query('GET_MAX_FILES') || MAX_FILES_LIMIT : 1;\n        var atMaxCapacity = totalItems === maxItems;\n\n        // action used to add item\n        var addAction = actions.find(function(action) {\n            return action.type === 'DID_ADD_ITEM';\n        });\n\n        // if reached max capacity and we've just reached it\n        if (atMaxCapacity && addAction) {\n            // get interaction type\n            var interactionMethod = addAction.data.interactionMethod;\n\n            // hide label\n            label.opacity = 0;\n\n            if (isMultiItem) {\n                label.translateY = -40;\n            } else {\n                if (interactionMethod === InteractionMethod.API) {\n                    label.translateX = 40;\n                } else if (interactionMethod === InteractionMethod.BROWSE) {\n                    label.translateY = 40;\n                } else {\n                    label.translateY = 30;\n                }\n            }\n        } else if (!atMaxCapacity) {\n            label.opacity = 1;\n            label.translateX = 0;\n            label.translateY = 0;\n        }\n\n        var listItemMargin = calculateListItemMargin(root);\n\n        var listHeight = calculateListHeight(root);\n\n        var labelHeight = label.rect.element.height;\n        var currentLabelHeight = !isMultiItem || atMaxCapacity ? 0 : labelHeight;\n\n        var listMarginTop = atMaxCapacity ? list.rect.element.marginTop : 0;\n        var listMarginBottom = totalItems === 0 ? 0 : list.rect.element.marginBottom;\n\n        var visualHeight =\n            currentLabelHeight + listMarginTop + listHeight.visual + listMarginBottom;\n        var boundsHeight =\n            currentLabelHeight + listMarginTop + listHeight.bounds + listMarginBottom;\n\n        // link list to label bottom position\n        list.translateY =\n            Math.max(0, currentLabelHeight - list.rect.element.marginTop) - listItemMargin.top;\n\n        if (aspectRatio) {\n            // fixed aspect ratio\n\n            // calculate height based on width\n            var width = root.rect.element.width;\n            var height = width * aspectRatio;\n\n            // clear history if aspect ratio has changed\n            if (aspectRatio !== root.ref.previousAspectRatio) {\n                root.ref.previousAspectRatio = aspectRatio;\n                root.ref.updateHistory = [];\n            }\n\n            // remember this width\n            var history = root.ref.updateHistory;\n            history.push(width);\n\n            var MAX_BOUNCES = 2;\n            if (history.length > MAX_BOUNCES * 2) {\n                var l = history.length;\n                var bottom = l - 10;\n                var bounces = 0;\n                for (var i = l; i >= bottom; i--) {\n                    if (history[i] === history[i - 2]) {\n                        bounces++;\n                    }\n\n                    if (bounces >= MAX_BOUNCES) {\n                        // dont adjust height\n                        return;\n                    }\n                }\n            }\n\n            // fix height of panel so it adheres to aspect ratio\n            panel.scalable = false;\n            panel.height = height;\n\n            // available height for list\n            var listAvailableHeight =\n                // the height of the panel minus the label height\n                height -\n                currentLabelHeight -\n                // the room we leave open between the end of the list and the panel bottom\n                (listMarginBottom - listItemMargin.bottom) -\n                // if we're full we need to leave some room between the top of the panel and the list\n                (atMaxCapacity ? listMarginTop : 0);\n\n            if (listHeight.visual > listAvailableHeight) {\n                list.overflow = listAvailableHeight;\n            } else {\n                list.overflow = null;\n            }\n\n            // set container bounds (so pushes siblings downwards)\n            root.height = height;\n        } else if (bounds.fixedHeight) {\n            // fixed height\n\n            // fix height of panel\n            panel.scalable = false;\n\n            // available height for list\n            var _listAvailableHeight =\n                // the height of the panel minus the label height\n                bounds.fixedHeight -\n                currentLabelHeight -\n                // the room we leave open between the end of the list and the panel bottom\n                (listMarginBottom - listItemMargin.bottom) -\n                // if we're full we need to leave some room between the top of the panel and the list\n                (atMaxCapacity ? listMarginTop : 0);\n\n            // set list height\n            if (listHeight.visual > _listAvailableHeight) {\n                list.overflow = _listAvailableHeight;\n            } else {\n                list.overflow = null;\n            }\n\n            // no need to set container bounds as these are handles by CSS fixed height\n        } else if (bounds.cappedHeight) {\n            // max-height\n\n            // not a fixed height panel\n            var isCappedHeight = visualHeight >= bounds.cappedHeight;\n            var panelHeight = Math.min(bounds.cappedHeight, visualHeight);\n            panel.scalable = true;\n            panel.height = isCappedHeight\n                ? panelHeight\n                : panelHeight - listItemMargin.top - listItemMargin.bottom;\n\n            // available height for list\n            var _listAvailableHeight2 =\n                // the height of the panel minus the label height\n                panelHeight -\n                currentLabelHeight -\n                // the room we leave open between the end of the list and the panel bottom\n                (listMarginBottom - listItemMargin.bottom) -\n                // if we're full we need to leave some room between the top of the panel and the list\n                (atMaxCapacity ? listMarginTop : 0);\n\n            // set list height (if is overflowing)\n            if (visualHeight > bounds.cappedHeight && listHeight.visual > _listAvailableHeight2) {\n                list.overflow = _listAvailableHeight2;\n            } else {\n                list.overflow = null;\n            }\n\n            // set container bounds (so pushes siblings downwards)\n            root.height = Math.min(\n                bounds.cappedHeight,\n                boundsHeight - listItemMargin.top - listItemMargin.bottom\n            );\n        } else {\n            // flexible height\n\n            // not a fixed height panel\n            var itemMargin = totalItems > 0 ? listItemMargin.top + listItemMargin.bottom : 0;\n            panel.scalable = true;\n            panel.height = Math.max(labelHeight, visualHeight - itemMargin);\n\n            // set container bounds (so pushes siblings downwards)\n            root.height = Math.max(labelHeight, boundsHeight - itemMargin);\n        }\n\n        // move credits to bottom\n        if (root.ref.credits && panel.heightCurrent)\n            root.ref.credits.style.transform = 'translateY(' + panel.heightCurrent + 'px)';\n    };\n\n    var calculateListItemMargin = function calculateListItemMargin(root) {\n        var item = root.ref.list.childViews[0].childViews[0];\n        return item\n            ? {\n                  top: item.rect.element.marginTop,\n                  bottom: item.rect.element.marginBottom,\n              }\n            : {\n                  top: 0,\n                  bottom: 0,\n              };\n    };\n\n    var calculateListHeight = function calculateListHeight(root) {\n        var visual = 0;\n        var bounds = 0;\n\n        // get file list reference\n        var scrollList = root.ref.list;\n        var itemList = scrollList.childViews[0];\n        var visibleChildren = itemList.childViews.filter(function(child) {\n            return child.rect.element.height;\n        });\n        var children = root\n            .query('GET_ACTIVE_ITEMS')\n            .map(function(item) {\n                return visibleChildren.find(function(child) {\n                    return child.id === item.id;\n                });\n            })\n            .filter(function(item) {\n                return item;\n            });\n\n        // no children, done!\n        if (children.length === 0) return { visual: visual, bounds: bounds };\n\n        var horizontalSpace = itemList.rect.element.width;\n        var dragIndex = getItemIndexByPosition(itemList, children, scrollList.dragCoordinates);\n\n        var childRect = children[0].rect.element;\n\n        var itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n        var itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n\n        var itemWidth = childRect.width + itemHorizontalMargin;\n        var itemHeight = childRect.height + itemVerticalMargin;\n\n        var newItem = typeof dragIndex !== 'undefined' && dragIndex >= 0 ? 1 : 0;\n        var removedItem = children.find(function(child) {\n            return child.markedForRemoval && child.opacity < 0.45;\n        })\n            ? -1\n            : 0;\n        var verticalItemCount = children.length + newItem + removedItem;\n        var itemsPerRow = getItemsPerRow(horizontalSpace, itemWidth);\n\n        // stack\n        if (itemsPerRow === 1) {\n            children.forEach(function(item) {\n                var height = item.rect.element.height + itemVerticalMargin;\n                bounds += height;\n                visual += height * item.opacity;\n            });\n        }\n        // grid\n        else {\n            bounds = Math.ceil(verticalItemCount / itemsPerRow) * itemHeight;\n            visual = bounds;\n        }\n\n        return { visual: visual, bounds: bounds };\n    };\n\n    var calculateRootBoundingBoxHeight = function calculateRootBoundingBoxHeight(root) {\n        var height = root.ref.measureHeight || null;\n        var cappedHeight = parseInt(root.style.maxHeight, 10) || null;\n        var fixedHeight = height === 0 ? null : height;\n\n        return {\n            cappedHeight: cappedHeight,\n            fixedHeight: fixedHeight,\n        };\n    };\n\n    var exceedsMaxFiles = function exceedsMaxFiles(root, items) {\n        var allowReplace = root.query('GET_ALLOW_REPLACE');\n        var allowMultiple = root.query('GET_ALLOW_MULTIPLE');\n        var totalItems = root.query('GET_TOTAL_ITEMS');\n        var maxItems = root.query('GET_MAX_FILES');\n\n        // total amount of items being dragged\n        var totalBrowseItems = items.length;\n\n        // if does not allow multiple items and dragging more than one item\n        if (!allowMultiple && totalBrowseItems > 1) {\n            root.dispatch('DID_THROW_MAX_FILES', {\n                source: items,\n                error: createResponse('warning', 0, 'Max files'),\n            });\n\n            return true;\n        }\n\n        // limit max items to one if not allowed to drop multiple items\n        maxItems = allowMultiple ? maxItems : 1;\n\n        if (!allowMultiple && allowReplace) {\n            // There is only one item, so there is room to replace or add an item\n            return false;\n        }\n\n        // no more room?\n        var hasMaxItems = isInt(maxItems);\n        if (hasMaxItems && totalItems + totalBrowseItems > maxItems) {\n            root.dispatch('DID_THROW_MAX_FILES', {\n                source: items,\n                error: createResponse('warning', 0, 'Max files'),\n            });\n\n            return true;\n        }\n\n        return false;\n    };\n\n    var getDragIndex = function getDragIndex(list, children, position) {\n        var itemList = list.childViews[0];\n        return getItemIndexByPosition(itemList, children, {\n            left: position.scopeLeft - itemList.rect.element.left,\n            top:\n                position.scopeTop -\n                (list.rect.outer.top + list.rect.element.marginTop + list.rect.element.scrollTop),\n        });\n    };\n\n    /**\n     * Enable or disable file drop functionality\n     */\n    var toggleDrop = function toggleDrop(root) {\n        var isAllowed = root.query('GET_ALLOW_DROP');\n        var isDisabled = root.query('GET_DISABLED');\n        var enabled = isAllowed && !isDisabled;\n        if (enabled && !root.ref.hopper) {\n            var hopper = createHopper(\n                root.element,\n                function(items) {\n                    // allow quick validation of dropped items\n                    var beforeDropFile =\n                        root.query('GET_BEFORE_DROP_FILE') ||\n                        function() {\n                            return true;\n                        };\n\n                    // all items should be validated by all filters as valid\n                    var dropValidation = root.query('GET_DROP_VALIDATION');\n                    return dropValidation\n                        ? items.every(function(item) {\n                              return (\n                                  applyFilters('ALLOW_HOPPER_ITEM', item, {\n                                      query: root.query,\n                                  }).every(function(result) {\n                                      return result === true;\n                                  }) && beforeDropFile(item)\n                              );\n                          })\n                        : true;\n                },\n                {\n                    filterItems: function filterItems(items) {\n                        var ignoredFiles = root.query('GET_IGNORED_FILES');\n                        return items.filter(function(item) {\n                            if (isFile(item)) {\n                                return !ignoredFiles.includes(item.name.toLowerCase());\n                            }\n                            return true;\n                        });\n                    },\n                    catchesDropsOnPage: root.query('GET_DROP_ON_PAGE'),\n                    requiresDropOnElement: root.query('GET_DROP_ON_ELEMENT'),\n                }\n            );\n\n            hopper.onload = function(items, position) {\n                // get item children elements and sort based on list sort\n                var list = root.ref.list.childViews[0];\n                var visibleChildren = list.childViews.filter(function(child) {\n                    return child.rect.element.height;\n                });\n                var children = root\n                    .query('GET_ACTIVE_ITEMS')\n                    .map(function(item) {\n                        return visibleChildren.find(function(child) {\n                            return child.id === item.id;\n                        });\n                    })\n                    .filter(function(item) {\n                        return item;\n                    });\n\n                applyFilterChain('ADD_ITEMS', items, { dispatch: root.dispatch }).then(function(\n                    queue\n                ) {\n                    // these files don't fit so stop here\n                    if (exceedsMaxFiles(root, queue)) return false;\n\n                    // go\n                    root.dispatch('ADD_ITEMS', {\n                        items: queue,\n                        index: getDragIndex(root.ref.list, children, position),\n                        interactionMethod: InteractionMethod.DROP,\n                    });\n                });\n\n                root.dispatch('DID_DROP', { position: position });\n\n                root.dispatch('DID_END_DRAG', { position: position });\n            };\n\n            hopper.ondragstart = function(position) {\n                root.dispatch('DID_START_DRAG', { position: position });\n            };\n\n            hopper.ondrag = debounce(function(position) {\n                root.dispatch('DID_DRAG', { position: position });\n            });\n\n            hopper.ondragend = function(position) {\n                root.dispatch('DID_END_DRAG', { position: position });\n            };\n\n            root.ref.hopper = hopper;\n\n            root.ref.drip = root.appendChildView(root.createChildView(drip));\n        } else if (!enabled && root.ref.hopper) {\n            root.ref.hopper.destroy();\n            root.ref.hopper = null;\n            root.removeChildView(root.ref.drip);\n        }\n    };\n\n    /**\n     * Enable or disable browse functionality\n     */\n    var toggleBrowse = function toggleBrowse(root, props) {\n        var isAllowed = root.query('GET_ALLOW_BROWSE');\n        var isDisabled = root.query('GET_DISABLED');\n        var enabled = isAllowed && !isDisabled;\n        if (enabled && !root.ref.browser) {\n            root.ref.browser = root.appendChildView(\n                root.createChildView(\n                    browser,\n                    Object.assign({}, props, {\n                        onload: function onload(items) {\n                            applyFilterChain('ADD_ITEMS', items, {\n                                dispatch: root.dispatch,\n                            }).then(function(queue) {\n                                // these files don't fit so stop here\n                                if (exceedsMaxFiles(root, queue)) return false;\n\n                                // add items!\n                                root.dispatch('ADD_ITEMS', {\n                                    items: queue,\n                                    index: -1,\n                                    interactionMethod: InteractionMethod.BROWSE,\n                                });\n                            });\n                        },\n                    })\n                ),\n\n                0\n            );\n        } else if (!enabled && root.ref.browser) {\n            root.removeChildView(root.ref.browser);\n            root.ref.browser = null;\n        }\n    };\n\n    /**\n     * Enable or disable paste functionality\n     */\n    var togglePaste = function togglePaste(root) {\n        var isAllowed = root.query('GET_ALLOW_PASTE');\n        var isDisabled = root.query('GET_DISABLED');\n        var enabled = isAllowed && !isDisabled;\n        if (enabled && !root.ref.paster) {\n            root.ref.paster = createPaster();\n            root.ref.paster.onload = function(items) {\n                applyFilterChain('ADD_ITEMS', items, { dispatch: root.dispatch }).then(function(\n                    queue\n                ) {\n                    // these files don't fit so stop here\n                    if (exceedsMaxFiles(root, queue)) return false;\n\n                    // add items!\n                    root.dispatch('ADD_ITEMS', {\n                        items: queue,\n                        index: -1,\n                        interactionMethod: InteractionMethod.PASTE,\n                    });\n                });\n            };\n        } else if (!enabled && root.ref.paster) {\n            root.ref.paster.destroy();\n            root.ref.paster = null;\n        }\n    };\n\n    /**\n     * Route actions\n     */\n    var route$5 = createRoute({\n        DID_SET_ALLOW_BROWSE: function DID_SET_ALLOW_BROWSE(_ref5) {\n            var root = _ref5.root,\n                props = _ref5.props;\n            toggleBrowse(root, props);\n        },\n        DID_SET_ALLOW_DROP: function DID_SET_ALLOW_DROP(_ref6) {\n            var root = _ref6.root;\n            toggleDrop(root);\n        },\n        DID_SET_ALLOW_PASTE: function DID_SET_ALLOW_PASTE(_ref7) {\n            var root = _ref7.root;\n            togglePaste(root);\n        },\n        DID_SET_DISABLED: function DID_SET_DISABLED(_ref8) {\n            var root = _ref8.root,\n                props = _ref8.props;\n            toggleDrop(root);\n            togglePaste(root);\n            toggleBrowse(root, props);\n            var isDisabled = root.query('GET_DISABLED');\n            if (isDisabled) {\n                root.element.dataset.disabled = 'disabled';\n            } else {\n                // delete root.element.dataset.disabled; <= this does not work on iOS 10\n                root.element.removeAttribute('data-disabled');\n            }\n        },\n    });\n\n    var root = createView({\n        name: 'root',\n        read: function read(_ref9) {\n            var root = _ref9.root;\n            if (root.ref.measure) {\n                root.ref.measureHeight = root.ref.measure.offsetHeight;\n            }\n        },\n        create: create$e,\n        write: write$9,\n        destroy: function destroy(_ref10) {\n            var root = _ref10.root;\n            if (root.ref.paster) {\n                root.ref.paster.destroy();\n            }\n            if (root.ref.hopper) {\n                root.ref.hopper.destroy();\n            }\n            root.element.removeEventListener('touchmove', prevent);\n            root.element.removeEventListener('gesturestart', prevent);\n        },\n        mixins: {\n            styles: ['height'],\n        },\n    });\n\n    // creates the app\n    var createApp = function createApp() {\n        var initialOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // let element\n        var originalElement = null;\n\n        // get default options\n        var defaultOptions = getOptions();\n\n        // create the data store, this will contain all our app info\n        var store = createStore(\n            // initial state (should be serializable)\n            createInitialState(defaultOptions),\n\n            // queries\n            [queries, createOptionQueries(defaultOptions)],\n\n            // action handlers\n            [actions, createOptionActions(defaultOptions)]\n        );\n\n        // set initial options\n        store.dispatch('SET_OPTIONS', { options: initialOptions });\n\n        // kick thread if visibility changes\n        var visibilityHandler = function visibilityHandler() {\n            if (document.hidden) return;\n            store.dispatch('KICK');\n        };\n        document.addEventListener('visibilitychange', visibilityHandler);\n\n        // re-render on window resize start and finish\n        var resizeDoneTimer = null;\n        var isResizing = false;\n        var isResizingHorizontally = false;\n        var initialWindowWidth = null;\n        var currentWindowWidth = null;\n        var resizeHandler = function resizeHandler() {\n            if (!isResizing) {\n                isResizing = true;\n            }\n            clearTimeout(resizeDoneTimer);\n            resizeDoneTimer = setTimeout(function() {\n                isResizing = false;\n                initialWindowWidth = null;\n                currentWindowWidth = null;\n                if (isResizingHorizontally) {\n                    isResizingHorizontally = false;\n                    store.dispatch('DID_STOP_RESIZE');\n                }\n            }, 500);\n        };\n        window.addEventListener('resize', resizeHandler);\n\n        // render initial view\n        var view = root(store, { id: getUniqueId() });\n\n        //\n        // PRIVATE API -------------------------------------------------------------------------------------\n        //\n        var isResting = false;\n        var isHidden = false;\n\n        var readWriteApi = {\n            // necessary for update loop\n\n            /**\n             * Reads from dom (never call manually)\n             * @private\n             */\n            _read: function _read() {\n                // test if we're resizing horizontally\n                // TODO: see if we can optimize this by measuring root rect\n                if (isResizing) {\n                    currentWindowWidth = window.innerWidth;\n                    if (!initialWindowWidth) {\n                        initialWindowWidth = currentWindowWidth;\n                    }\n\n                    if (!isResizingHorizontally && currentWindowWidth !== initialWindowWidth) {\n                        store.dispatch('DID_START_RESIZE');\n                        isResizingHorizontally = true;\n                    }\n                }\n\n                if (isHidden && isResting) {\n                    // test if is no longer hidden\n                    isResting = view.element.offsetParent === null;\n                }\n\n                // if resting, no need to read as numbers will still all be correct\n                if (isResting) return;\n\n                // read view data\n                view._read();\n\n                // if is hidden we need to know so we exit rest mode when revealed\n                isHidden = view.rect.element.hidden;\n            },\n\n            /**\n             * Writes to dom (never call manually)\n             * @private\n             */\n            _write: function _write(ts) {\n                // get all actions from store\n                var actions = store\n                    .processActionQueue()\n\n                    // filter out set actions (these will automatically trigger DID_SET)\n                    .filter(function(action) {\n                        return !/^SET_/.test(action.type);\n                    });\n\n                // if was idling and no actions stop here\n                if (isResting && !actions.length) return;\n\n                // some actions might trigger events\n                routeActionsToEvents(actions);\n\n                // update the view\n                isResting = view._write(ts, actions, isResizingHorizontally);\n\n                // will clean up all archived items\n                removeReleasedItems(store.query('GET_ITEMS'));\n\n                // now idling\n                if (isResting) {\n                    store.processDispatchQueue();\n                }\n            },\n        };\n\n        //\n        // EXPOSE EVENTS -------------------------------------------------------------------------------------\n        //\n        var createEvent = function createEvent(name) {\n            return function(data) {\n                // create default event\n                var event = {\n                    type: name,\n                };\n\n                // no data to add\n                if (!data) {\n                    return event;\n                }\n\n                // copy relevant props\n                if (data.hasOwnProperty('error')) {\n                    event.error = data.error ? Object.assign({}, data.error) : null;\n                }\n\n                if (data.status) {\n                    event.status = Object.assign({}, data.status);\n                }\n\n                if (data.file) {\n                    event.output = data.file;\n                }\n\n                // only source is available, else add item if possible\n                if (data.source) {\n                    event.file = data.source;\n                } else if (data.item || data.id) {\n                    var item = data.item ? data.item : store.query('GET_ITEM', data.id);\n                    event.file = item ? createItemAPI(item) : null;\n                }\n\n                // map all items in a possible items array\n                if (data.items) {\n                    event.items = data.items.map(createItemAPI);\n                }\n\n                // if this is a progress event add the progress amount\n                if (/progress/.test(name)) {\n                    event.progress = data.progress;\n                }\n\n                // copy relevant props\n                if (data.hasOwnProperty('origin') && data.hasOwnProperty('target')) {\n                    event.origin = data.origin;\n                    event.target = data.target;\n                }\n\n                return event;\n            };\n        };\n\n        var eventRoutes = {\n            DID_DESTROY: createEvent('destroy'),\n\n            DID_INIT: createEvent('init'),\n\n            DID_THROW_MAX_FILES: createEvent('warning'),\n\n            DID_INIT_ITEM: createEvent('initfile'),\n            DID_START_ITEM_LOAD: createEvent('addfilestart'),\n            DID_UPDATE_ITEM_LOAD_PROGRESS: createEvent('addfileprogress'),\n            DID_LOAD_ITEM: createEvent('addfile'),\n\n            DID_THROW_ITEM_INVALID: [createEvent('error'), createEvent('addfile')],\n\n            DID_THROW_ITEM_LOAD_ERROR: [createEvent('error'), createEvent('addfile')],\n\n            DID_THROW_ITEM_REMOVE_ERROR: [createEvent('error'), createEvent('removefile')],\n\n            DID_PREPARE_OUTPUT: createEvent('preparefile'),\n\n            DID_START_ITEM_PROCESSING: createEvent('processfilestart'),\n            DID_UPDATE_ITEM_PROCESS_PROGRESS: createEvent('processfileprogress'),\n            DID_ABORT_ITEM_PROCESSING: createEvent('processfileabort'),\n            DID_COMPLETE_ITEM_PROCESSING: createEvent('processfile'),\n            DID_COMPLETE_ITEM_PROCESSING_ALL: createEvent('processfiles'),\n            DID_REVERT_ITEM_PROCESSING: createEvent('processfilerevert'),\n\n            DID_THROW_ITEM_PROCESSING_ERROR: [createEvent('error'), createEvent('processfile')],\n\n            DID_REMOVE_ITEM: createEvent('removefile'),\n\n            DID_UPDATE_ITEMS: createEvent('updatefiles'),\n\n            DID_ACTIVATE_ITEM: createEvent('activatefile'),\n\n            DID_REORDER_ITEMS: createEvent('reorderfiles'),\n        };\n\n        var exposeEvent = function exposeEvent(event) {\n            // create event object to be dispatched\n            var detail = Object.assign({ pond: exports }, event);\n            delete detail.type;\n            view.element.dispatchEvent(\n                new CustomEvent('FilePond:' + event.type, {\n                    // event info\n                    detail: detail,\n\n                    // event behaviour\n                    bubbles: true,\n                    cancelable: true,\n                    composed: true, // triggers listeners outside of shadow root\n                })\n            );\n\n            // event object to params used for `on()` event handlers and callbacks `oninit()`\n            var params = [];\n\n            // if is possible error event, make it the first param\n            if (event.hasOwnProperty('error')) {\n                params.push(event.error);\n            }\n\n            // file is always section\n            if (event.hasOwnProperty('file')) {\n                params.push(event.file);\n            }\n\n            // append other props\n            var filtered = ['type', 'error', 'file'];\n            Object.keys(event)\n                .filter(function(key) {\n                    return !filtered.includes(key);\n                })\n                .forEach(function(key) {\n                    return params.push(event[key]);\n                });\n\n            // on(type, () => { })\n            exports.fire.apply(exports, [event.type].concat(params));\n\n            // oninit = () => {}\n            var handler = store.query('GET_ON' + event.type.toUpperCase());\n            if (handler) {\n                handler.apply(void 0, params);\n            }\n        };\n\n        var routeActionsToEvents = function routeActionsToEvents(actions) {\n            if (!actions.length) return;\n            actions\n                .filter(function(action) {\n                    return eventRoutes[action.type];\n                })\n                .forEach(function(action) {\n                    var routes = eventRoutes[action.type];\n                    (Array.isArray(routes) ? routes : [routes]).forEach(function(route) {\n                        // this isn't fantastic, but because of the stacking of settimeouts plugins can handle the did_load before the did_init\n                        if (action.type === 'DID_INIT_ITEM') {\n                            exposeEvent(route(action.data));\n                        } else {\n                            setTimeout(function() {\n                                exposeEvent(route(action.data));\n                            }, 0);\n                        }\n                    });\n                });\n        };\n\n        //\n        // PUBLIC API -------------------------------------------------------------------------------------\n        //\n        var setOptions = function setOptions(options) {\n            return store.dispatch('SET_OPTIONS', { options: options });\n        };\n\n        var getFile = function getFile(query) {\n            return store.query('GET_ACTIVE_ITEM', query);\n        };\n\n        var prepareFile = function prepareFile(query) {\n            return new Promise(function(resolve, reject) {\n                store.dispatch('REQUEST_ITEM_PREPARE', {\n                    query: query,\n                    success: function success(item) {\n                        resolve(item);\n                    },\n                    failure: function failure(error) {\n                        reject(error);\n                    },\n                });\n            });\n        };\n\n        var addFile = function addFile(source) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            return new Promise(function(resolve, reject) {\n                addFiles([{ source: source, options: options }], { index: options.index })\n                    .then(function(items) {\n                        return resolve(items && items[0]);\n                    })\n                    .catch(reject);\n            });\n        };\n\n        var isFilePondFile = function isFilePondFile(obj) {\n            return obj.file && obj.id;\n        };\n\n        var removeFile = function removeFile(query, options) {\n            // if only passed options\n            if (typeof query === 'object' && !isFilePondFile(query) && !options) {\n                options = query;\n                query = undefined;\n            }\n\n            // request item removal\n            store.dispatch('REMOVE_ITEM', Object.assign({}, options, { query: query }));\n\n            // see if item has been removed\n            return store.query('GET_ACTIVE_ITEM', query) === null;\n        };\n\n        var addFiles = function addFiles() {\n            for (\n                var _len = arguments.length, args = new Array(_len), _key = 0;\n                _key < _len;\n                _key++\n            ) {\n                args[_key] = arguments[_key];\n            }\n            return new Promise(function(resolve, reject) {\n                var sources = [];\n                var options = {};\n\n                // user passed a sources array\n                if (isArray(args[0])) {\n                    sources.push.apply(sources, args[0]);\n                    Object.assign(options, args[1] || {});\n                } else {\n                    // user passed sources as arguments, last one might be options object\n                    var lastArgument = args[args.length - 1];\n                    if (typeof lastArgument === 'object' && !(lastArgument instanceof Blob)) {\n                        Object.assign(options, args.pop());\n                    }\n\n                    // add rest to sources\n                    sources.push.apply(sources, args);\n                }\n\n                store.dispatch('ADD_ITEMS', {\n                    items: sources,\n                    index: options.index,\n                    interactionMethod: InteractionMethod.API,\n                    success: resolve,\n                    failure: reject,\n                });\n            });\n        };\n\n        var getFiles = function getFiles() {\n            return store.query('GET_ACTIVE_ITEMS');\n        };\n\n        var processFile = function processFile(query) {\n            return new Promise(function(resolve, reject) {\n                store.dispatch('REQUEST_ITEM_PROCESSING', {\n                    query: query,\n                    success: function success(item) {\n                        resolve(item);\n                    },\n                    failure: function failure(error) {\n                        reject(error);\n                    },\n                });\n            });\n        };\n\n        var prepareFiles = function prepareFiles() {\n            for (\n                var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n                _key2 < _len2;\n                _key2++\n            ) {\n                args[_key2] = arguments[_key2];\n            }\n            var queries = Array.isArray(args[0]) ? args[0] : args;\n            var items = queries.length ? queries : getFiles();\n            return Promise.all(items.map(prepareFile));\n        };\n\n        var processFiles = function processFiles() {\n            for (\n                var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n                _key3 < _len3;\n                _key3++\n            ) {\n                args[_key3] = arguments[_key3];\n            }\n            var queries = Array.isArray(args[0]) ? args[0] : args;\n            if (!queries.length) {\n                var files = getFiles().filter(function(item) {\n                    return (\n                        !(item.status === ItemStatus.IDLE && item.origin === FileOrigin.LOCAL) &&\n                        item.status !== ItemStatus.PROCESSING &&\n                        item.status !== ItemStatus.PROCESSING_COMPLETE &&\n                        item.status !== ItemStatus.PROCESSING_REVERT_ERROR\n                    );\n                });\n\n                return Promise.all(files.map(processFile));\n            }\n            return Promise.all(queries.map(processFile));\n        };\n\n        var removeFiles = function removeFiles() {\n            for (\n                var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;\n                _key4 < _len4;\n                _key4++\n            ) {\n                args[_key4] = arguments[_key4];\n            }\n\n            var queries = Array.isArray(args[0]) ? args[0] : args;\n\n            var options;\n            if (typeof queries[queries.length - 1] === 'object') {\n                options = queries.pop();\n            } else if (Array.isArray(args[0])) {\n                options = args[1];\n            }\n\n            var files = getFiles();\n\n            if (!queries.length)\n                return Promise.all(\n                    files.map(function(file) {\n                        return removeFile(file, options);\n                    })\n                );\n\n            // when removing by index the indexes shift after each file removal so we need to convert indexes to ids\n            var mappedQueries = queries\n                .map(function(query) {\n                    return isNumber(query) ? (files[query] ? files[query].id : null) : query;\n                })\n                .filter(function(query) {\n                    return query;\n                });\n\n            return mappedQueries.map(function(q) {\n                return removeFile(q, options);\n            });\n        };\n\n        var exports = Object.assign(\n            {},\n\n            on(),\n            {},\n\n            readWriteApi,\n            {},\n\n            createOptionAPI(store, defaultOptions),\n            {\n                /**\n                 * Override options defined in options object\n                 * @param options\n                 */\n                setOptions: setOptions,\n\n                /**\n                 * Load the given file\n                 * @param source - the source of the file (either a File, base64 data uri or url)\n                 * @param options - object, { index: 0 }\n                 */\n                addFile: addFile,\n\n                /**\n                 * Load the given files\n                 * @param sources - the sources of the files to load\n                 * @param options - object, { index: 0 }\n                 */\n                addFiles: addFiles,\n\n                /**\n                 * Returns the file objects matching the given query\n                 * @param query { string, number, null }\n                 */\n                getFile: getFile,\n\n                /**\n                 * Upload file with given name\n                 * @param query { string, number, null  }\n                 */\n                processFile: processFile,\n\n                /**\n                 * Request prepare output for file with given name\n                 * @param query { string, number, null  }\n                 */\n                prepareFile: prepareFile,\n\n                /**\n                 * Removes a file by its name\n                 * @param query { string, number, null  }\n                 */\n                removeFile: removeFile,\n\n                /**\n                 * Moves a file to a new location in the files list\n                 */\n                moveFile: function moveFile(query, index) {\n                    return store.dispatch('MOVE_ITEM', { query: query, index: index });\n                },\n\n                /**\n                 * Returns all files (wrapped in public api)\n                 */\n                getFiles: getFiles,\n\n                /**\n                 * Starts uploading all files\n                 */\n                processFiles: processFiles,\n\n                /**\n                 * Clears all files from the files list\n                 */\n                removeFiles: removeFiles,\n\n                /**\n                 * Starts preparing output of all files\n                 */\n                prepareFiles: prepareFiles,\n\n                /**\n                 * Sort list of files\n                 */\n                sort: function sort(compare) {\n                    return store.dispatch('SORT', { compare: compare });\n                },\n\n                /**\n                 * Browse the file system for a file\n                 */\n                browse: function browse() {\n                    // needs to be trigger directly as user action needs to be traceable (is not traceable in requestAnimationFrame)\n                    var input = view.element.querySelector('input[type=file]');\n                    if (input) {\n                        input.click();\n                    }\n                },\n\n                /**\n                 * Destroys the app\n                 */\n                destroy: function destroy() {\n                    // request destruction\n                    exports.fire('destroy', view.element);\n\n                    // stop active processes (file uploads, fetches, stuff like that)\n                    // loop over items and depending on states call abort for ongoing processes\n                    store.dispatch('ABORT_ALL');\n\n                    // destroy view\n                    view._destroy();\n\n                    // stop listening to resize\n                    window.removeEventListener('resize', resizeHandler);\n\n                    // stop listening to the visiblitychange event\n                    document.removeEventListener('visibilitychange', visibilityHandler);\n\n                    // dispatch destroy\n                    store.dispatch('DID_DESTROY');\n                },\n\n                /**\n                 * Inserts the plugin before the target element\n                 */\n                insertBefore: function insertBefore$1(element) {\n                    return insertBefore(view.element, element);\n                },\n\n                /**\n                 * Inserts the plugin after the target element\n                 */\n                insertAfter: function insertAfter$1(element) {\n                    return insertAfter(view.element, element);\n                },\n\n                /**\n                 * Appends the plugin to the target element\n                 */\n                appendTo: function appendTo(element) {\n                    return element.appendChild(view.element);\n                },\n\n                /**\n                 * Replaces an element with the app\n                 */\n                replaceElement: function replaceElement(element) {\n                    // insert the app before the element\n                    insertBefore(view.element, element);\n\n                    // remove the original element\n                    element.parentNode.removeChild(element);\n\n                    // remember original element\n                    originalElement = element;\n                },\n\n                /**\n                 * Restores the original element\n                 */\n                restoreElement: function restoreElement() {\n                    if (!originalElement) {\n                        return; // no element to restore\n                    }\n\n                    // restore original element\n                    insertAfter(originalElement, view.element);\n\n                    // remove our element\n                    view.element.parentNode.removeChild(view.element);\n\n                    // remove reference\n                    originalElement = null;\n                },\n\n                /**\n                 * Returns true if the app root is attached to given element\n                 * @param element\n                 */\n                isAttachedTo: function isAttachedTo(element) {\n                    return view.element === element || originalElement === element;\n                },\n\n                /**\n                 * Returns the root element\n                 */\n                element: {\n                    get: function get() {\n                        return view.element;\n                    },\n                },\n\n                /**\n                 * Returns the current pond status\n                 */\n                status: {\n                    get: function get() {\n                        return store.query('GET_STATUS');\n                    },\n                },\n            }\n        );\n\n        // Done!\n        store.dispatch('DID_INIT');\n\n        // create actual api object\n        return createObject(exports);\n    };\n\n    var createAppObject = function createAppObject() {\n        var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // default options\n        var defaultOptions = {};\n        forin(getOptions(), function(key, value) {\n            defaultOptions[key] = value[0];\n        });\n\n        // set app options\n        var app = createApp(\n            Object.assign(\n                {},\n\n                defaultOptions,\n                {},\n\n                customOptions\n            )\n        );\n\n        // return the plugin instance\n        return app;\n    };\n\n    var lowerCaseFirstLetter = function lowerCaseFirstLetter(string) {\n        return string.charAt(0).toLowerCase() + string.slice(1);\n    };\n\n    var attributeNameToPropertyName = function attributeNameToPropertyName(attributeName) {\n        return toCamels(attributeName.replace(/^data-/, ''));\n    };\n\n    var mapObject = function mapObject(object, propertyMap) {\n        // remove unwanted\n        forin(propertyMap, function(selector, mapping) {\n            forin(object, function(property, value) {\n                // create regexp shortcut\n                var selectorRegExp = new RegExp(selector);\n\n                // tests if\n                var matches = selectorRegExp.test(property);\n\n                // no match, skip\n                if (!matches) {\n                    return;\n                }\n\n                // if there's a mapping, the original property is always removed\n                delete object[property];\n\n                // should only remove, we done!\n                if (mapping === false) {\n                    return;\n                }\n\n                // move value to new property\n                if (isString(mapping)) {\n                    object[mapping] = value;\n                    return;\n                }\n\n                // move to group\n                var group = mapping.group;\n                if (isObject(mapping) && !object[group]) {\n                    object[group] = {};\n                }\n\n                object[group][lowerCaseFirstLetter(property.replace(selectorRegExp, ''))] = value;\n            });\n\n            // do submapping\n            if (mapping.mapping) {\n                mapObject(object[mapping.group], mapping.mapping);\n            }\n        });\n    };\n\n    var getAttributesAsObject = function getAttributesAsObject(node) {\n        var attributeMapping =\n            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        // turn attributes into object\n        var attributes = [];\n        forin(node.attributes, function(index) {\n            attributes.push(node.attributes[index]);\n        });\n\n        var output = attributes\n            .filter(function(attribute) {\n                return attribute.name;\n            })\n            .reduce(function(obj, attribute) {\n                var value = attr(node, attribute.name);\n\n                obj[attributeNameToPropertyName(attribute.name)] =\n                    value === attribute.name ? true : value;\n                return obj;\n            }, {});\n\n        // do mapping of object properties\n        mapObject(output, attributeMapping);\n\n        return output;\n    };\n\n    var createAppAtElement = function createAppAtElement(element) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // how attributes of the input element are mapped to the options for the plugin\n        var attributeMapping = {\n            // translate to other name\n            '^class$': 'className',\n            '^multiple$': 'allowMultiple',\n            '^capture$': 'captureMethod',\n            '^webkitdirectory$': 'allowDirectoriesOnly',\n\n            // group under single property\n            '^server': {\n                group: 'server',\n                mapping: {\n                    '^process': {\n                        group: 'process',\n                    },\n\n                    '^revert': {\n                        group: 'revert',\n                    },\n\n                    '^fetch': {\n                        group: 'fetch',\n                    },\n\n                    '^restore': {\n                        group: 'restore',\n                    },\n\n                    '^load': {\n                        group: 'load',\n                    },\n                },\n            },\n\n            // don't include in object\n            '^type$': false,\n            '^files$': false,\n        };\n\n        // add additional option translators\n        applyFilters('SET_ATTRIBUTE_TO_OPTION_MAP', attributeMapping);\n\n        // create final options object by setting options object and then overriding options supplied on element\n        var mergedOptions = Object.assign({}, options);\n\n        var attributeOptions = getAttributesAsObject(\n            element.nodeName === 'FIELDSET' ? element.querySelector('input[type=file]') : element,\n            attributeMapping\n        );\n\n        // merge with options object\n        Object.keys(attributeOptions).forEach(function(key) {\n            if (isObject(attributeOptions[key])) {\n                if (!isObject(mergedOptions[key])) {\n                    mergedOptions[key] = {};\n                }\n                Object.assign(mergedOptions[key], attributeOptions[key]);\n            } else {\n                mergedOptions[key] = attributeOptions[key];\n            }\n        });\n\n        // if parent is a fieldset, get files from parent by selecting all input fields that are not file upload fields\n        // these will then be automatically set to the initial files\n        mergedOptions.files = (options.files || []).concat(\n            Array.from(element.querySelectorAll('input:not([type=file])')).map(function(input) {\n                return {\n                    source: input.value,\n                    options: {\n                        type: input.dataset.type,\n                    },\n                };\n            })\n        );\n\n        // build plugin\n        var app = createAppObject(mergedOptions);\n\n        // add already selected files\n        if (element.files) {\n            Array.from(element.files).forEach(function(file) {\n                app.addFile(file);\n            });\n        }\n\n        // replace the target element\n        app.replaceElement(element);\n\n        // expose\n        return app;\n    };\n\n    // if an element is passed, we create the instance at that element, if not, we just create an up object\n    var createApp$1 = function createApp() {\n        return isNode(arguments.length <= 0 ? undefined : arguments[0])\n            ? createAppAtElement.apply(void 0, arguments)\n            : createAppObject.apply(void 0, arguments);\n    };\n\n    var PRIVATE_METHODS = ['fire', '_read', '_write'];\n\n    var createAppAPI = function createAppAPI(app) {\n        var api = {};\n\n        copyObjectPropertiesToObject(app, api, PRIVATE_METHODS);\n\n        return api;\n    };\n\n    /**\n     * Replaces placeholders in given string with replacements\n     * @param string - \"Foo {bar}\"\"\n     * @param replacements - { \"bar\": 10 }\n     */\n    var replaceInString = function replaceInString(string, replacements) {\n        return string.replace(/(?:{([a-zA-Z]+)})/g, function(match, group) {\n            return replacements[group];\n        });\n    };\n\n    var createWorker = function createWorker(fn) {\n        var workerBlob = new Blob(['(', fn.toString(), ')()'], {\n            type: 'application/javascript',\n        });\n\n        var workerURL = URL.createObjectURL(workerBlob);\n        var worker = new Worker(workerURL);\n\n        return {\n            transfer: function transfer(message, cb) {},\n            post: function post(message, cb, transferList) {\n                var id = getUniqueId();\n\n                worker.onmessage = function(e) {\n                    if (e.data.id === id) {\n                        cb(e.data.message);\n                    }\n                };\n\n                worker.postMessage(\n                    {\n                        id: id,\n                        message: message,\n                    },\n\n                    transferList\n                );\n            },\n            terminate: function terminate() {\n                worker.terminate();\n                URL.revokeObjectURL(workerURL);\n            },\n        };\n    };\n\n    var loadImage = function loadImage(url) {\n        return new Promise(function(resolve, reject) {\n            var img = new Image();\n            img.onload = function() {\n                resolve(img);\n            };\n            img.onerror = function(e) {\n                reject(e);\n            };\n            img.src = url;\n        });\n    };\n\n    var renameFile = function renameFile(file, name) {\n        var renamedFile = file.slice(0, file.size, file.type);\n        renamedFile.lastModifiedDate = file.lastModifiedDate;\n        renamedFile.name = name;\n        return renamedFile;\n    };\n\n    var copyFile = function copyFile(file) {\n        return renameFile(file, file.name);\n    };\n\n    // already registered plugins (can't register twice)\n    var registeredPlugins = [];\n\n    // pass utils to plugin\n    var createAppPlugin = function createAppPlugin(plugin) {\n        // already registered\n        if (registeredPlugins.includes(plugin)) {\n            return;\n        }\n\n        // remember this plugin\n        registeredPlugins.push(plugin);\n\n        // setup!\n        var pluginOutline = plugin({\n            addFilter: addFilter,\n            utils: {\n                Type: Type,\n                forin: forin,\n                isString: isString,\n                isFile: isFile,\n                toNaturalFileSize: toNaturalFileSize,\n                replaceInString: replaceInString,\n                getExtensionFromFilename: getExtensionFromFilename,\n                getFilenameWithoutExtension: getFilenameWithoutExtension,\n                guesstimateMimeType: guesstimateMimeType,\n                getFileFromBlob: getFileFromBlob,\n                getFilenameFromURL: getFilenameFromURL,\n                createRoute: createRoute,\n                createWorker: createWorker,\n                createView: createView,\n                createItemAPI: createItemAPI,\n                loadImage: loadImage,\n                copyFile: copyFile,\n                renameFile: renameFile,\n                createBlob: createBlob,\n                applyFilterChain: applyFilterChain,\n                text: text,\n                getNumericAspectRatioFromString: getNumericAspectRatioFromString,\n            },\n\n            views: {\n                fileActionButton: fileActionButton,\n            },\n        });\n\n        // add plugin options to default options\n        extendDefaultOptions(pluginOutline.options);\n    };\n\n    // feature detection used by supported() method\n    var isOperaMini = function isOperaMini() {\n        return Object.prototype.toString.call(window.operamini) === '[object OperaMini]';\n    };\n    var hasPromises = function hasPromises() {\n        return 'Promise' in window;\n    };\n    var hasBlobSlice = function hasBlobSlice() {\n        return 'slice' in Blob.prototype;\n    };\n    var hasCreateObjectURL = function hasCreateObjectURL() {\n        return 'URL' in window && 'createObjectURL' in window.URL;\n    };\n    var hasVisibility = function hasVisibility() {\n        return 'visibilityState' in document;\n    };\n    var hasTiming = function hasTiming() {\n        return 'performance' in window;\n    }; // iOS 8.x\n    var hasCSSSupports = function hasCSSSupports() {\n        return 'supports' in (window.CSS || {});\n    }; // use to detect Safari 9+\n    var isIE11 = function isIE11() {\n        return /MSIE|Trident/.test(window.navigator.userAgent);\n    };\n\n    var supported = (function() {\n        // Runs immediately and then remembers result for subsequent calls\n        var isSupported =\n            // Has to be a browser\n            isBrowser() &&\n            // Can't run on Opera Mini due to lack of everything\n            !isOperaMini() &&\n            // Require these APIs to feature detect a modern browser\n            hasVisibility() &&\n            hasPromises() &&\n            hasBlobSlice() &&\n            hasCreateObjectURL() &&\n            hasTiming() &&\n            // doesn't need CSSSupports but is a good way to detect Safari 9+ (we do want to support IE11 though)\n            (hasCSSSupports() || isIE11());\n\n        return function() {\n            return isSupported;\n        };\n    })();\n\n    /**\n     * Plugin internal state (over all instances)\n     */\n    var state = {\n        // active app instances, used to redraw the apps and to find the later\n        apps: [],\n    };\n\n    // plugin name\n    var name = 'filepond';\n\n    /**\n     * Public Plugin methods\n     */\n    var fn = function fn() {};\n    exports.Status = {};\n    exports.FileStatus = {};\n    exports.FileOrigin = {};\n    exports.OptionTypes = {};\n    exports.create = fn;\n    exports.destroy = fn;\n    exports.parse = fn;\n    exports.find = fn;\n    exports.registerPlugin = fn;\n    exports.getOptions = fn;\n    exports.setOptions = fn;\n\n    // if not supported, no API\n    if (supported()) {\n        // start painter and fire load event\n        createPainter(\n            function() {\n                state.apps.forEach(function(app) {\n                    return app._read();\n                });\n            },\n            function(ts) {\n                state.apps.forEach(function(app) {\n                    return app._write(ts);\n                });\n            }\n        );\n\n        // fire loaded event so we know when FilePond is available\n        var dispatch = function dispatch() {\n            // let others know we have area ready\n            document.dispatchEvent(\n                new CustomEvent('FilePond:loaded', {\n                    detail: {\n                        supported: supported,\n                        create: exports.create,\n                        destroy: exports.destroy,\n                        parse: exports.parse,\n                        find: exports.find,\n                        registerPlugin: exports.registerPlugin,\n                        setOptions: exports.setOptions,\n                    },\n                })\n            );\n\n            // clean up event\n            document.removeEventListener('DOMContentLoaded', dispatch);\n        };\n\n        if (document.readyState !== 'loading') {\n            // move to back of execution queue, FilePond should have been exported by then\n            setTimeout(function() {\n                return dispatch();\n            }, 0);\n        } else {\n            document.addEventListener('DOMContentLoaded', dispatch);\n        }\n\n        // updates the OptionTypes object based on the current options\n        var updateOptionTypes = function updateOptionTypes() {\n            return forin(getOptions(), function(key, value) {\n                exports.OptionTypes[key] = value[1];\n            });\n        };\n\n        exports.Status = Object.assign({}, Status);\n        exports.FileOrigin = Object.assign({}, FileOrigin);\n        exports.FileStatus = Object.assign({}, ItemStatus);\n\n        exports.OptionTypes = {};\n        updateOptionTypes();\n\n        // create method, creates apps and adds them to the app array\n        exports.create = function create() {\n            var app = createApp$1.apply(void 0, arguments);\n            app.on('destroy', exports.destroy);\n            state.apps.push(app);\n            return createAppAPI(app);\n        };\n\n        // destroys apps and removes them from the app array\n        exports.destroy = function destroy(hook) {\n            // returns true if the app was destroyed successfully\n            var indexToRemove = state.apps.findIndex(function(app) {\n                return app.isAttachedTo(hook);\n            });\n            if (indexToRemove >= 0) {\n                // remove from apps\n                var app = state.apps.splice(indexToRemove, 1)[0];\n\n                // restore original dom element\n                app.restoreElement();\n\n                return true;\n            }\n\n            return false;\n        };\n\n        // parses the given context for plugins (does not include the context element itself)\n        exports.parse = function parse(context) {\n            // get all possible hooks\n            var matchedHooks = Array.from(context.querySelectorAll('.' + name));\n\n            // filter out already active hooks\n            var newHooks = matchedHooks.filter(function(newHook) {\n                return !state.apps.find(function(app) {\n                    return app.isAttachedTo(newHook);\n                });\n            });\n\n            // create new instance for each hook\n            return newHooks.map(function(hook) {\n                return exports.create(hook);\n            });\n        };\n\n        // returns an app based on the given element hook\n        exports.find = function find(hook) {\n            var app = state.apps.find(function(app) {\n                return app.isAttachedTo(hook);\n            });\n            if (!app) {\n                return null;\n            }\n            return createAppAPI(app);\n        };\n\n        // adds a plugin extension\n        exports.registerPlugin = function registerPlugin() {\n            for (\n                var _len = arguments.length, plugins = new Array(_len), _key = 0;\n                _key < _len;\n                _key++\n            ) {\n                plugins[_key] = arguments[_key];\n            }\n\n            // register plugins\n            plugins.forEach(createAppPlugin);\n\n            // update OptionTypes, each plugin might have extended the default options\n            updateOptionTypes();\n        };\n\n        exports.getOptions = function getOptions$1() {\n            var opts = {};\n            forin(getOptions(), function(key, value) {\n                opts[key] = value[0];\n            });\n            return opts;\n        };\n\n        exports.setOptions = function setOptions$1(opts) {\n            if (isObject(opts)) {\n                // update existing plugins\n                state.apps.forEach(function(app) {\n                    app.setOptions(opts);\n                });\n\n                // override defaults\n                setOptions(opts);\n            }\n\n            // return new options\n            return exports.getOptions();\n        };\n    }\n\n    exports.supported = supported;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/filepond/dist/filepond.js\n");

/***/ }),

/***/ "./node_modules/filepond/dist/filepond.min.css":
/*!*****************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.min.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./filepond.min.css */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/filepond/dist/filepond.min.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_min_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_filepond_min_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5taW4uY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0U7QUFDL0UsWUFBdUs7O0FBRXZLOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSw2RkFBRyxDQUFDLHlKQUFPOzs7O0FBSXhCLGlFQUFlLHlKQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5taW4uY3NzPzhiNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTExLnVzZVsxXSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xMS51c2VbMl0hLi9maWxlcG9uZC5taW4uY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/filepond/dist/filepond.min.css\n");

/***/ }),

/***/ "./node_modules/qalendar/dist/qalendar.es.js":
/*!***************************************************!*\
  !*** ./node_modules/qalendar/dist/qalendar.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatePicker: () => (/* binding */ ks),\n/* harmony export */   Qalendar: () => (/* binding */ Jl)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\nvar er = Object.defineProperty;\nvar tr = (e, t, n) => t in e ? er(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;\nvar F = (e, t, n) => (tr(e, typeof t != \"symbol\" ? t + \"\" : t, n), n);\n\nvar Q = /* @__PURE__ */ ((e) => (e.SINGLE_DAY_TIMED = \"SINGLE_DAY_TIMED\", e.SINGLE_DAY_FULL_DAY = \"SINGLE_DAY_FULL_DAY\", e.SINGLE_HYBRID_DAY_TIMED = \"SINGLE_HYBRID_DAY_TIMED\", e.MULTI_DAY_TIMED = \"MULTI_DAY_TIMED\", e.MULTI_DAY_FULL_DAY = \"MULTI_DAY_FULL_DAY\", e))(Q || {});\nconst xe = {\n  yellow: \"rgb(244, 180, 0)\",\n  blue: \"rgb(38, 132, 255)\",\n  green: \"rgb(51, 182, 121)\",\n  red: \"rgb(255, 84, 86)\",\n  pink: \"rgb(239, 139, 239)\",\n  purple: \"rgb(157, 114, 245)\",\n  turquoise: \"rgb(64, 190, 190)\",\n  brown: \"rgb(169, 99, 30)\"\n}, Le = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/, ft = /^\\d{4}-\\d{2}-\\d{2}$/;\nvar q = /* @__PURE__ */ ((e) => (e.REGULAR = \"regular\", e.SHORTENED = \"shortened\", e.FLEXIBLE = \"flexible\", e))(q || {});\nclass Ee {\n  /**\n   * If navigator.languages is present (correlating to the browser's Accept-Language header), then use it\n   * otherwise just use navigator.language\n   * */\n  static getBrowserNavigatorLocale() {\n    return typeof navigator != \"object\" ? \"en-US\" : navigator.languages && navigator.languages.length ? navigator.languages[0] : navigator.language;\n  }\n  /**\n   * Solution from https://github.com/vuejs/core/issues/4733#issuecomment-1024816095\n   * */\n  static hasSlotContent(t) {\n    return t ? t().some((n) => n.type === vue__WEBPACK_IMPORTED_MODULE_0__.Comment || Array.isArray(n.children) && !n.children.length ? !1 : n.type !== vue__WEBPACK_IMPORTED_MODULE_0__.Text || typeof n.children == \"string\" && n.children.trim() !== \"\") : !1;\n  }\n  static getEventType(t, n) {\n    const a = Le.test(t.time.start) && Le.test(t.time.end), r = ft.test(t.time.start) && ft.test(t.time.end);\n    if (a)\n      return this.getTimedEventType(t, n);\n    if (r)\n      return this.getFullDayEventType(t, n);\n    throw new Error(\"Event has invalid type\");\n  }\n  static getTimedEventType(t, n) {\n    if (n.dateStringsHaveEqualDates(t.time.start, t.time.end))\n      return Q.SINGLE_DAY_TIMED;\n    if (n.dayMode === q.FLEXIBLE) {\n      const a = n.setHourInDateTimeString(\n        n.addDaysToDateTimeString(\n          1,\n          n.dateStringFrom(t.time.start)\n        ),\n        se.getHourFromTimePoints(n.DAY_END)\n      );\n      if (t.time.end < a)\n        return Q.SINGLE_HYBRID_DAY_TIMED;\n    }\n    return Q.MULTI_DAY_TIMED;\n  }\n  static getFullDayEventType(t, n) {\n    return n.dateStringsHaveEqualDates(t.time.start, t.time.end) ? Q.SINGLE_DAY_FULL_DAY : Q.MULTI_DAY_FULL_DAY;\n  }\n  static isUIEventTouchEvent(t) {\n    return \"touches\" in t && typeof t.touches == \"object\";\n  }\n}\nvar _t = /* @__PURE__ */ ((e) => (e[e.MIDNIGHT = 0] = \"MIDNIGHT\", e[e.ONE_AM = 100] = \"ONE_AM\", e[e.TWO_AM = 200] = \"TWO_AM\", e[e.THREE_AM = 300] = \"THREE_AM\", e[e.FOUR_AM = 400] = \"FOUR_AM\", e[e.FIVE_AM = 500] = \"FIVE_AM\", e[e.SIX_AM = 600] = \"SIX_AM\", e[e.SEVEN_AM = 700] = \"SEVEN_AM\", e[e.EIGHT_AM = 800] = \"EIGHT_AM\", e[e.NINE_AM = 900] = \"NINE_AM\", e[e.TEN_AM = 1e3] = \"TEN_AM\", e[e.ELEVEN_AM = 1100] = \"ELEVEN_AM\", e[e.TWELVE_PM = 1200] = \"TWELVE_PM\", e[e.ONE_PM = 1300] = \"ONE_PM\", e[e.TWO_PM = 1400] = \"TWO_PM\", e[e.THREE_PM = 1500] = \"THREE_PM\", e[e.FOUR_PM = 1600] = \"FOUR_PM\", e[e.FIVE_PM = 1700] = \"FIVE_PM\", e[e.SIX_PM = 1800] = \"SIX_PM\", e[e.SEVEN_PM = 1900] = \"SEVEN_PM\", e[e.EIGHT_PM = 2e3] = \"EIGHT_PM\", e[e.NINE_PM = 2100] = \"NINE_PM\", e[e.TEN_PM = 2200] = \"TEN_PM\", e[e.ELEVEN_PM = 2300] = \"ELEVEN_PM\", e[e.TWELVE_AM = 2400] = \"TWELVE_AM\", e))(_t || {});\nclass Ne extends Date {\n  get fullYear() {\n    return this.getFullYear();\n  }\n  get month() {\n    return this.getMonth();\n  }\n  get date() {\n    return this.getDate();\n  }\n}\nvar Mt = /* @__PURE__ */ ((e) => (e.SUNDAY = \"sunday\", e.MONDAY = \"monday\", e))(Mt || {});\nclass se {\n  constructor(t = \"monday\", n = null, a = { start: 0, end: 2400 }) {\n    F(this, \"FIRST_DAY_OF_WEEK\");\n    F(this, \"CALENDAR_LOCALE\");\n    F(this, \"ALL_HOURS\", [\n      0,\n      100,\n      200,\n      300,\n      400,\n      500,\n      600,\n      700,\n      800,\n      900,\n      1e3,\n      1100,\n      1200,\n      1300,\n      1400,\n      1500,\n      1600,\n      1700,\n      1800,\n      1900,\n      2e3,\n      2100,\n      2200,\n      2300\n    ]);\n    F(this, \"DAY_START\");\n    F(this, \"DAY_END\");\n    F(this, \"HOURS_PER_DAY\", 24);\n    F(this, \"MS_PER_DAY\");\n    this.FIRST_DAY_OF_WEEK = t, this.CALENDAR_LOCALE = n || Ee.getBrowserNavigatorLocale(), this.DAY_START = a.start, this.DAY_END = a.end, this.HOURS_PER_DAY = (() => {\n      const r = se.getHourFromTimePoints(this.DAY_END), s = se.getHourFromTimePoints(this.DAY_START);\n      return r > s ? r - s : this.HOURS_PER_DAY - s + r;\n    })(), this.MS_PER_DAY = 864e5;\n  }\n  get dayMode() {\n    return this.DAY_START === 0 && this.DAY_END === 2400 ? q.REGULAR : this.DAY_START >= this.DAY_END ? q.FLEXIBLE : q.SHORTENED;\n  }\n  getDatesBetweenTwoDates(t, n) {\n    for (var a = [], r = new Date(t); r <= n; r.setDate(r.getDate() + 1))\n      a.push(new Date(r.getFullYear(), r.getMonth(), r.getDate()));\n    return a;\n  }\n  getCalendarWeekDateObjects(t) {\n    let n;\n    this.FIRST_DAY_OF_WEEK === \"sunday\" ? n = t.getDay() : n = t.getDay() === 0 ? 6 : t.getDay() - 1;\n    const a = t.getDate() - n, r = new Date(\n      t.getFullYear(),\n      t.getMonth(),\n      a\n    );\n    return this.getDatesBetweenTwoDates(\n      r,\n      new Date(\n        r.getFullYear(),\n        r.getMonth(),\n        r.getDate() + 6\n      )\n    );\n  }\n  /**\n   * Returns an array of the weeks that comprise a month\n   *\n   * @param {number} yyyy\n   * @param {number} mm - zero indexed (January === 0)\n   * */\n  getCalendarMonthSplitInWeeks(t, n) {\n    const a = [], r = new Date(t, n, 1), s = new Date(\n      r.getFullYear(),\n      r.getMonth(),\n      1\n    ), i = this.getCalendarWeekDateObjects(s);\n    a.push(i);\n    let o = !0, l = i[0];\n    const c = r.getMonth();\n    for (; o; ) {\n      const d = new Date(\n        l.getFullYear(),\n        l.getMonth(),\n        l.getDate() + 7\n      );\n      d.getMonth() === c ? (a.push(this.getCalendarWeekDateObjects(d)), l = d) : o = !1;\n    }\n    return a;\n  }\n  /**\n   * Returns an array with the length of 12 dates,\n   * one date for the first day of each month of the year\n   * */\n  getCalendarYearMonths(t) {\n    const n = [];\n    let a = 0;\n    for (; a <= 11; )\n      n.push(new Date(t, a, 1)), a++;\n    return n;\n  }\n  getHourAndMinutesFromTimePoints(t) {\n    const n = t.toString();\n    let a = \"0\", r = \"0\";\n    return n.length === 4 ? (a = n[0] + n[1], r = n[2] + n[3]) : n.length === 3 && (a = n[0], r = n[1] + n[2]), {\n      hour: +a,\n      minutes: +r\n    };\n  }\n  /**\n   * Given timePoints (0, 100, 200 etc.), this function returns\n   * a localized string with the respective hour\n   * (in en-US for example: 0 => 12 AM, 1600 => 4 PM )\n   * */\n  getHourLocaleStringFromHourDigits(t) {\n    const { hour: n, minutes: a } = this.getHourAndMinutesFromTimePoints(t), r = new Date(\n      2100,\n      0,\n      1,\n      +n,\n      +a,\n      0\n    ).toLocaleTimeString(this.CALENDAR_LOCALE, {\n      hour: \"2-digit\"\n    });\n    return r[0] === \"0\" ? r.substring(1) : r;\n  }\n  getLocalizedNameOfWeekday(t, n = \"short\") {\n    return t.toLocaleDateString(this.CALENDAR_LOCALE, {\n      weekday: n\n    });\n  }\n  getLocalizedNameOfMonth(t, n = \"short\") {\n    return t.toLocaleDateString(this.CALENDAR_LOCALE, {\n      month: n\n    });\n  }\n  getLocalizedDateString(t) {\n    return t.toLocaleDateString(this.CALENDAR_LOCALE);\n  }\n  /**\n   * Takes a date object, and creates a time string from it, in the format of\n   * YYYY-MM-DD hh:mm\n   * */\n  getDateTimeStringFromDate(t, n) {\n    const a = t.getFullYear(), r = t.getMonth() + 1, s = t.getDate(), i = `${a}-${r >= 10 ? r : \"0\" + r}-${s >= 10 ? s : \"0\" + s}`;\n    if (!n) {\n      const l = t.getHours(), c = t.getMinutes();\n      return `${i} ${l >= 10 ? l : \"0\" + l}:${c >= 10 ? c : \"0\" + c}`;\n    }\n    return `${i} ${n === \"start\" ? \"00:00\" : \"23:59\"}`;\n  }\n  getLocalizedTime(t) {\n    const {\n      year: n,\n      month: a,\n      date: r,\n      hour: s,\n      minutes: i\n    } = this.getAllVariablesFromDateTimeString(t);\n    return new Date(n, a, r, s, i).toLocaleTimeString(this.CALENDAR_LOCALE, {\n      hour: \"numeric\",\n      minute: \"numeric\"\n    });\n  }\n  getLocalizedHour(t) {\n    return t.toLocaleTimeString(this.CALENDAR_LOCALE, { hour: \"2-digit\" });\n  }\n  getLocalizedTimeRange(t, n) {\n    return `${this.getLocalizedTime(t)} - ${this.getLocalizedTime(n)}`;\n  }\n  /**\n   * Returns numeric values for year, month, date, hour and minutes, given a dateTimeString\n   * All variables are Date-Object compatible, meaning \"month\" is zero-indexed\n   * */\n  getAllVariablesFromDateTimeString(t) {\n    return {\n      year: +t.substring(0, 4),\n      month: +t.substring(5, 7) - 1,\n      date: +t.substring(8, 10),\n      hour: this.hourFrom(t),\n      minutes: this.minutesFrom(t)\n    };\n  }\n  dateIsToday(t) {\n    const {\n      fullYear: n,\n      month: a,\n      date: r\n    } = new Ne(), {\n      fullYear: s,\n      month: i,\n      date: o\n    } = new Ne(t);\n    return n === s && a === i && r === o;\n  }\n  dateIsInWeek(t, n) {\n    const { date: a, month: r, fullYear: s } = new Ne(t);\n    for (const i of n) {\n      const o = a === i.getDate(), l = r === i.getMonth(), c = s === i.getFullYear();\n      if (o && l && c)\n        return !0;\n    }\n    return !1;\n  }\n  getDateStringFromDate(t) {\n    const n = t.getFullYear(), a = t.getMonth() + 1, r = t.getDate();\n    return `${n}-${a >= 10 ? a : \"0\" + a}-${r >= 10 ? r : \"0\" + r}`;\n  }\n  addMinutesToDateTimeString(t, n) {\n    const {\n      year: a,\n      month: r,\n      date: s,\n      hour: i,\n      minutes: o\n    } = this.getAllVariablesFromDateTimeString(n), l = new Date(a, r, s, i, o), c = new Date(l.getTime() + t * 6e4);\n    return this.getDateTimeStringFromDate(c);\n  }\n  addDaysToDateTimeString(t, n) {\n    return this.addMinutesToDateTimeString(t * 1440, n);\n  }\n  dateStringsHaveEqualDates(t, n) {\n    const { year: a, month: r, date: s } = this.getAllVariablesFromDateTimeString(t), { year: i, month: o, date: l } = this.getAllVariablesFromDateTimeString(n);\n    return a === i && r === o && s === l;\n  }\n  setDateToEndOfDay(t) {\n    return new Date(\n      t.getFullYear(),\n      t.getMonth(),\n      t.getDate(),\n      23,\n      59,\n      59,\n      999\n    );\n  }\n  turnMinutesIntoPercentageOfHour(t) {\n    const a = 1.6666666666666667 * t;\n    return a < 10 ? \"0\" + a : a.toString();\n  }\n  /**\n   * Every hour between 'dayStart' and 'dayEnd' is 100, in this function referred to as 100 points\n   * If an event starts 30 minutes after 'dayStart', it should have 50 pointsIntoDay\n   * If a day consists of 4 hours (400 points), we then have to count\n   * (50 / 400) * 100 = 12.5 => event starts after 12.5 percent of the day\n   *\n   * Result is supposed to be a number between 0 and 100, and is used for setting the CSS- top- and height-attributes for events\n   * */\n  getPercentageOfDayFromDateTimeString(t, n, a) {\n    const s = this.hourFrom(t) * 100, i = +t.substring(14, 16), o = +this.turnMinutesIntoPercentageOfHour(+i);\n    if (a > n) {\n      const g = a - n;\n      return (s + o - n) / g * 100;\n    }\n    const l = _t.TWELVE_AM - n, c = l + a, d = s + o;\n    return (d >= n ? d - n : l + d) / c * 100;\n  }\n  getTimeFromClick(t, n) {\n    if (n <= 0)\n      throw new Error(\"weekHeight cannot be a negative number\");\n    if (t < 0)\n      throw new Error(\"clickOffsetY cannot be a negative number\");\n    const a = this.DAY_START / 100, r = n / this.HOURS_PER_DAY, s = Math.floor(t % r / (r / 60));\n    if (this.DAY_END <= this.DAY_START) {\n      const l = this.DAY_END / 100 * r, c = n - l;\n      if (t > c) {\n        const d = Math.floor((t - c) / r);\n        return `${this.doubleDigit(d)}:${this.doubleDigit(s)}`;\n      }\n    }\n    const i = Math.floor(t / r) + a;\n    return `${this.doubleDigit(i)}:${this.doubleDigit(s)}`;\n  }\n  setSegmentOfDateTimeString(t, n) {\n    if (n.hour < 0 || n.hour > 23)\n      throw new Error(\"Invalid hour\");\n    const a = this.doubleDigit(n.hour);\n    return t = t.replace(/\\d{2}:/, a + \":\"), t;\n  }\n  isTrailingOrLeadingDate(t, n) {\n    const { month: a } = new Ne(t);\n    return n !== a;\n  }\n  static getTimePointsFromHour(t) {\n    if (t < 0 || t > 24 || t % 1 !== 0)\n      throw new Error(\"Invalid day boundary\");\n    return t === 0 ? t : t * 100;\n  }\n  static getHourFromTimePoints(t) {\n    if (t < 0 || t > 2400 || t % 100 !== 0)\n      throw new Error(\"Invalid time points\");\n    return t === 0 ? t : t / 100;\n  }\n  getTimelineHours() {\n    return this.dayMode !== q.FLEXIBLE ? this.ALL_HOURS.filter((t) => t >= this.DAY_START && t < this.DAY_END) : [\n      ...this.ALL_HOURS.filter((t) => t >= this.DAY_START),\n      ...this.ALL_HOURS.filter((t) => t < this.DAY_END)\n    ];\n  }\n  dateStringFrom(t) {\n    return t.substring(0, 10);\n  }\n  timeStringFrom(t) {\n    return t.substring(11, 16);\n  }\n  hourFrom(t) {\n    return +t.substring(11, 13);\n  }\n  minutesFrom(t) {\n    return +t.substring(14, 16);\n  }\n  areDaysConsecutive(t, n) {\n    return this.dateStringFrom(this.addDaysToDateTimeString(1, t)) === this.dateStringFrom(n);\n  }\n  setHourInDateTimeString(t, n) {\n    const a = this.doubleDigit(n);\n    return t = t.replace(/\\d{2}:/, a + \":\"), t;\n  }\n  setMinutesInDateTimeString(t, n) {\n    const a = this.doubleDigit(n);\n    return t = t.replace(/:\\d{2}/, \":\" + a), t;\n  }\n  getDateTimeStringDayBoundariesFrom(t) {\n    if (this.DAY_END <= this.DAY_START) {\n      const r = this.addDaysToDateTimeString(1, t), s = this.setHourInDateTimeString(r, this.getHourAndMinutesFromTimePoints(this.DAY_END).hour);\n      return { start: this.setHourInDateTimeString(t, this.getHourAndMinutesFromTimePoints(this.DAY_START).hour), end: s };\n    }\n    const n = this.setHourInDateTimeString(t, this.getHourAndMinutesFromTimePoints(this.DAY_START).hour);\n    let a;\n    return this.DAY_END === _t.TWELVE_AM ? (a = this.setHourInDateTimeString(t, 23), a = this.setMinutesInDateTimeString(a, 59)) : a = this.setHourInDateTimeString(t, this.getHourAndMinutesFromTimePoints(this.DAY_END).hour), { start: n, end: a };\n  }\n  doubleDigit(t) {\n    if (t < 0 || t > 60)\n      throw new Error(\"Invalid number. This is not a valid hour or minute\");\n    return t < 10 ? \"0\" + t : String(t);\n  }\n}\nfunction vn(e, t) {\n  var n = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var a = Object.getOwnPropertySymbols(e);\n    t && (a = a.filter(function(r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), n.push.apply(n, a);\n  }\n  return n;\n}\nfunction p(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = arguments[t] != null ? arguments[t] : {};\n    t % 2 ? vn(Object(n), !0).forEach(function(a) {\n      W(e, a, n[a]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : vn(Object(n)).forEach(function(a) {\n      Object.defineProperty(e, a, Object.getOwnPropertyDescriptor(n, a));\n    });\n  }\n  return e;\n}\nfunction mt(e) {\n  return mt = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(t) {\n    return typeof t;\n  } : function(t) {\n    return t && typeof Symbol == \"function\" && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n  }, mt(e);\n}\nfunction sr(e, t) {\n  if (!(e instanceof t))\n    throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction gn(e, t) {\n  for (var n = 0; n < t.length; n++) {\n    var a = t[n];\n    a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);\n  }\n}\nfunction or(e, t, n) {\n  return t && gn(e.prototype, t), n && gn(e, n), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction W(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\nfunction Ut(e, t) {\n  return cr(e) || ur(e, t) || da(e, t) || mr();\n}\nfunction qe(e) {\n  return lr(e) || dr(e) || da(e) || fr();\n}\nfunction lr(e) {\n  if (Array.isArray(e))\n    return Pt(e);\n}\nfunction cr(e) {\n  if (Array.isArray(e))\n    return e;\n}\nfunction dr(e) {\n  if (typeof Symbol < \"u\" && e[Symbol.iterator] != null || e[\"@@iterator\"] != null)\n    return Array.from(e);\n}\nfunction ur(e, t) {\n  var n = e == null ? null : typeof Symbol < \"u\" && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (n != null) {\n    var a = [], r = !0, s = !1, i, o;\n    try {\n      for (n = n.call(e); !(r = (i = n.next()).done) && (a.push(i.value), !(t && a.length === t)); r = !0)\n        ;\n    } catch (l) {\n      s = !0, o = l;\n    } finally {\n      try {\n        !r && n.return != null && n.return();\n      } finally {\n        if (s)\n          throw o;\n      }\n    }\n    return a;\n  }\n}\nfunction da(e, t) {\n  if (e) {\n    if (typeof e == \"string\")\n      return Pt(e, t);\n    var n = Object.prototype.toString.call(e).slice(8, -1);\n    if (n === \"Object\" && e.constructor && (n = e.constructor.name), n === \"Map\" || n === \"Set\")\n      return Array.from(e);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n      return Pt(e, t);\n  }\n}\nfunction Pt(e, t) {\n  (t == null || t > e.length) && (t = e.length);\n  for (var n = 0, a = new Array(t); n < t; n++)\n    a[n] = e[n];\n  return a;\n}\nfunction fr() {\n  throw new TypeError(`Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n}\nfunction mr() {\n  throw new TypeError(`Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n}\nvar pn = function() {\n}, Xt = {}, ua = {}, fa = null, ma = {\n  mark: pn,\n  measure: pn\n};\ntry {\n  typeof window < \"u\" && (Xt = window), typeof document < \"u\" && (ua = document), typeof MutationObserver < \"u\" && (fa = MutationObserver), typeof performance < \"u\" && (ma = performance);\n} catch {\n}\nvar hr = Xt.navigator || {}, yn = hr.userAgent, bn = yn === void 0 ? \"\" : yn, ye = Xt, M = ua, Dn = fa, Ze = ma;\nye.document;\nvar he = !!M.documentElement && !!M.head && typeof M.addEventListener == \"function\" && typeof M.createElement == \"function\", ha = ~bn.indexOf(\"MSIE\") || ~bn.indexOf(\"Trident/\"), et, tt, nt, at, rt, de = \"___FONT_AWESOME___\", Lt = 16, va = \"fa\", ga = \"svg-inline--fa\", Se = \"data-fa-i2svg\", It = \"data-fa-pseudo-element\", vr = \"data-fa-pseudo-element-pending\", Vt = \"data-prefix\", xt = \"data-icon\", kn = \"fontawesome-i2svg\", gr = \"async\", pr = [\"HTML\", \"HEAD\", \"STYLE\", \"SCRIPT\"], pa = function() {\n  try {\n    return \"development\" === \"production\";\n  } catch {\n    return !1;\n  }\n}(), _ = \"classic\", O = \"sharp\", qt = [_, O];\nfunction Ge(e) {\n  return new Proxy(e, {\n    get: function(n, a) {\n      return a in n ? n[a] : n[_];\n    }\n  });\n}\nvar je = Ge((et = {}, W(et, _, {\n  fa: \"solid\",\n  fas: \"solid\",\n  \"fa-solid\": \"solid\",\n  far: \"regular\",\n  \"fa-regular\": \"regular\",\n  fal: \"light\",\n  \"fa-light\": \"light\",\n  fat: \"thin\",\n  \"fa-thin\": \"thin\",\n  fad: \"duotone\",\n  \"fa-duotone\": \"duotone\",\n  fab: \"brands\",\n  \"fa-brands\": \"brands\",\n  fak: \"kit\",\n  \"fa-kit\": \"kit\"\n}), W(et, O, {\n  fa: \"solid\",\n  fass: \"solid\",\n  \"fa-solid\": \"solid\",\n  fasr: \"regular\",\n  \"fa-regular\": \"regular\"\n}), et)), Be = Ge((tt = {}, W(tt, _, {\n  solid: \"fas\",\n  regular: \"far\",\n  light: \"fal\",\n  thin: \"fat\",\n  duotone: \"fad\",\n  brands: \"fab\",\n  kit: \"fak\"\n}), W(tt, O, {\n  solid: \"fass\",\n  regular: \"fasr\"\n}), tt)), Ue = Ge((nt = {}, W(nt, _, {\n  fab: \"fa-brands\",\n  fad: \"fa-duotone\",\n  fak: \"fa-kit\",\n  fal: \"fa-light\",\n  far: \"fa-regular\",\n  fas: \"fa-solid\",\n  fat: \"fa-thin\"\n}), W(nt, O, {\n  fass: \"fa-solid\",\n  fasr: \"fa-regular\"\n}), nt)), yr = Ge((at = {}, W(at, _, {\n  \"fa-brands\": \"fab\",\n  \"fa-duotone\": \"fad\",\n  \"fa-kit\": \"fak\",\n  \"fa-light\": \"fal\",\n  \"fa-regular\": \"far\",\n  \"fa-solid\": \"fas\",\n  \"fa-thin\": \"fat\"\n}), W(at, O, {\n  \"fa-solid\": \"fass\",\n  \"fa-regular\": \"fasr\"\n}), at)), br = /fa(s|r|l|t|d|b|k|ss|sr)?[\\-\\ ]/, ya = \"fa-layers-text\", Dr = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i, kr = Ge((rt = {}, W(rt, _, {\n  900: \"fas\",\n  400: \"far\",\n  normal: \"far\",\n  300: \"fal\",\n  100: \"fat\"\n}), W(rt, O, {\n  900: \"fass\",\n  400: \"fasr\"\n}), rt)), ba = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], wr = ba.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), Er = [\"class\", \"data-prefix\", \"data-icon\", \"data-fa-transform\", \"data-fa-mask\"], ke = {\n  GROUP: \"duotone-group\",\n  SWAP_OPACITY: \"swap-opacity\",\n  PRIMARY: \"primary\",\n  SECONDARY: \"secondary\"\n}, Xe = /* @__PURE__ */ new Set();\nObject.keys(Be[_]).map(Xe.add.bind(Xe));\nObject.keys(Be[O]).map(Xe.add.bind(Xe));\nvar Sr = [].concat(qt, qe(Xe), [\"2xs\", \"xs\", \"sm\", \"lg\", \"xl\", \"2xl\", \"beat\", \"border\", \"fade\", \"beat-fade\", \"bounce\", \"flip-both\", \"flip-horizontal\", \"flip-vertical\", \"flip\", \"fw\", \"inverse\", \"layers-counter\", \"layers-text\", \"layers\", \"li\", \"pull-left\", \"pull-right\", \"pulse\", \"rotate-180\", \"rotate-270\", \"rotate-90\", \"rotate-by\", \"shake\", \"spin-pulse\", \"spin-reverse\", \"spin\", \"stack-1x\", \"stack-2x\", \"stack\", \"ul\", ke.GROUP, ke.SWAP_OPACITY, ke.PRIMARY, ke.SECONDARY]).concat(ba.map(function(e) {\n  return \"\".concat(e, \"x\");\n})).concat(wr.map(function(e) {\n  return \"w-\".concat(e);\n})), He = ye.FontAwesomeConfig || {};\nfunction Tr(e) {\n  var t = M.querySelector(\"script[\" + e + \"]\");\n  if (t)\n    return t.getAttribute(e);\n}\nfunction Cr(e) {\n  return e === \"\" ? !0 : e === \"false\" ? !1 : e === \"true\" ? !0 : e;\n}\nif (M && typeof M.querySelector == \"function\") {\n  var Ar = [[\"data-family-prefix\", \"familyPrefix\"], [\"data-css-prefix\", \"cssPrefix\"], [\"data-family-default\", \"familyDefault\"], [\"data-style-default\", \"styleDefault\"], [\"data-replacement-class\", \"replacementClass\"], [\"data-auto-replace-svg\", \"autoReplaceSvg\"], [\"data-auto-add-css\", \"autoAddCss\"], [\"data-auto-a11y\", \"autoA11y\"], [\"data-search-pseudo-elements\", \"searchPseudoElements\"], [\"data-observe-mutations\", \"observeMutations\"], [\"data-mutate-approach\", \"mutateApproach\"], [\"data-keep-original-source\", \"keepOriginalSource\"], [\"data-measure-performance\", \"measurePerformance\"], [\"data-show-missing-icons\", \"showMissingIcons\"]];\n  Ar.forEach(function(e) {\n    var t = Ut(e, 2), n = t[0], a = t[1], r = Cr(Tr(n));\n    r != null && (He[a] = r);\n  });\n}\nvar Da = {\n  styleDefault: \"solid\",\n  familyDefault: \"classic\",\n  cssPrefix: va,\n  replacementClass: ga,\n  autoReplaceSvg: !0,\n  autoAddCss: !0,\n  autoA11y: !0,\n  searchPseudoElements: !1,\n  observeMutations: !0,\n  mutateApproach: \"async\",\n  keepOriginalSource: !0,\n  measurePerformance: !1,\n  showMissingIcons: !0\n};\nHe.familyPrefix && (He.cssPrefix = He.familyPrefix);\nvar Ie = p(p({}, Da), He);\nIe.autoReplaceSvg || (Ie.observeMutations = !1);\nvar b = {};\nObject.keys(Da).forEach(function(e) {\n  Object.defineProperty(b, e, {\n    enumerable: !0,\n    set: function(n) {\n      Ie[e] = n, Ye.forEach(function(a) {\n        return a(b);\n      });\n    },\n    get: function() {\n      return Ie[e];\n    }\n  });\n});\nObject.defineProperty(b, \"familyPrefix\", {\n  enumerable: !0,\n  set: function(t) {\n    Ie.cssPrefix = t, Ye.forEach(function(n) {\n      return n(b);\n    });\n  },\n  get: function() {\n    return Ie.cssPrefix;\n  }\n});\nye.FontAwesomeConfig = b;\nvar Ye = [];\nfunction _r(e) {\n  return Ye.push(e), function() {\n    Ye.splice(Ye.indexOf(e), 1);\n  };\n}\nvar ge = Lt, re = {\n  size: 16,\n  x: 0,\n  y: 0,\n  rotate: 0,\n  flipX: !1,\n  flipY: !1\n};\nfunction Mr(e) {\n  if (!(!e || !he)) {\n    var t = M.createElement(\"style\");\n    t.setAttribute(\"type\", \"text/css\"), t.innerHTML = e;\n    for (var n = M.head.childNodes, a = null, r = n.length - 1; r > -1; r--) {\n      var s = n[r], i = (s.tagName || \"\").toUpperCase();\n      [\"STYLE\", \"LINK\"].indexOf(i) > -1 && (a = s);\n    }\n    return M.head.insertBefore(t, a), e;\n  }\n}\nvar Pr = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction Ve() {\n  for (var e = 12, t = \"\"; e-- > 0; )\n    t += Pr[Math.random() * 62 | 0];\n  return t;\n}\nfunction $e(e) {\n  for (var t = [], n = (e || []).length >>> 0; n--; )\n    t[n] = e[n];\n  return t;\n}\nfunction Gt(e) {\n  return e.classList ? $e(e.classList) : (e.getAttribute(\"class\") || \"\").split(\" \").filter(function(t) {\n    return t;\n  });\n}\nfunction ka(e) {\n  return \"\".concat(e).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction Lr(e) {\n  return Object.keys(e || {}).reduce(function(t, n) {\n    return t + \"\".concat(n, '=\"').concat(ka(e[n]), '\" ');\n  }, \"\").trim();\n}\nfunction bt(e) {\n  return Object.keys(e || {}).reduce(function(t, n) {\n    return t + \"\".concat(n, \": \").concat(e[n].trim(), \";\");\n  }, \"\");\n}\nfunction Kt(e) {\n  return e.size !== re.size || e.x !== re.x || e.y !== re.y || e.rotate !== re.rotate || e.flipX || e.flipY;\n}\nfunction Ir(e) {\n  var t = e.transform, n = e.containerWidth, a = e.iconWidth, r = {\n    transform: \"translate(\".concat(n / 2, \" 256)\")\n  }, s = \"translate(\".concat(t.x * 32, \", \").concat(t.y * 32, \") \"), i = \"scale(\".concat(t.size / 16 * (t.flipX ? -1 : 1), \", \").concat(t.size / 16 * (t.flipY ? -1 : 1), \") \"), o = \"rotate(\".concat(t.rotate, \" 0 0)\"), l = {\n    transform: \"\".concat(s, \" \").concat(i, \" \").concat(o)\n  }, c = {\n    transform: \"translate(\".concat(a / 2 * -1, \" -256)\")\n  };\n  return {\n    outer: r,\n    inner: l,\n    path: c\n  };\n}\nfunction Or(e) {\n  var t = e.transform, n = e.width, a = n === void 0 ? Lt : n, r = e.height, s = r === void 0 ? Lt : r, i = e.startCentered, o = i === void 0 ? !1 : i, l = \"\";\n  return o && ha ? l += \"translate(\".concat(t.x / ge - a / 2, \"em, \").concat(t.y / ge - s / 2, \"em) \") : o ? l += \"translate(calc(-50% + \".concat(t.x / ge, \"em), calc(-50% + \").concat(t.y / ge, \"em)) \") : l += \"translate(\".concat(t.x / ge, \"em, \").concat(t.y / ge, \"em) \"), l += \"scale(\".concat(t.size / ge * (t.flipX ? -1 : 1), \", \").concat(t.size / ge * (t.flipY ? -1 : 1), \") \"), l += \"rotate(\".concat(t.rotate, \"deg) \"), l;\n}\nvar $r = `:root, :host {\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    -webkit-transition-delay: 0s;\n            transition-delay: 0s;\n    -webkit-transition-duration: 0s;\n            transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}`;\nfunction wa() {\n  var e = va, t = ga, n = b.cssPrefix, a = b.replacementClass, r = $r;\n  if (n !== e || a !== t) {\n    var s = new RegExp(\"\\\\.\".concat(e, \"\\\\-\"), \"g\"), i = new RegExp(\"\\\\--\".concat(e, \"\\\\-\"), \"g\"), o = new RegExp(\"\\\\.\".concat(t), \"g\");\n    r = r.replace(s, \".\".concat(n, \"-\")).replace(i, \"--\".concat(n, \"-\")).replace(o, \".\".concat(a));\n  }\n  return r;\n}\nvar wn = !1;\nfunction St() {\n  b.autoAddCss && !wn && (Mr(wa()), wn = !0);\n}\nvar Fr = {\n  mixout: function() {\n    return {\n      dom: {\n        css: wa,\n        insertCss: St\n      }\n    };\n  },\n  hooks: function() {\n    return {\n      beforeDOMElementCreation: function() {\n        St();\n      },\n      beforeI2svg: function() {\n        St();\n      }\n    };\n  }\n}, ue = ye || {};\nue[de] || (ue[de] = {});\nue[de].styles || (ue[de].styles = {});\nue[de].hooks || (ue[de].hooks = {});\nue[de].shims || (ue[de].shims = []);\nvar te = ue[de], Ea = [], Rr = function e() {\n  M.removeEventListener(\"DOMContentLoaded\", e), ht = 1, Ea.map(function(t) {\n    return t();\n  });\n}, ht = !1;\nhe && (ht = (M.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(M.readyState), ht || M.addEventListener(\"DOMContentLoaded\", Rr));\nfunction Nr(e) {\n  he && (ht ? setTimeout(e, 0) : Ea.push(e));\n}\nfunction Ke(e) {\n  var t = e.tag, n = e.attributes, a = n === void 0 ? {} : n, r = e.children, s = r === void 0 ? [] : r;\n  return typeof e == \"string\" ? ka(e) : \"<\".concat(t, \" \").concat(Lr(a), \">\").concat(s.map(Ke).join(\"\"), \"</\").concat(t, \">\");\n}\nfunction En(e, t, n) {\n  if (e && e[t] && e[t][n])\n    return {\n      prefix: t,\n      iconName: n,\n      icon: e[t][n]\n    };\n}\nvar Wr = function(t, n) {\n  return function(a, r, s, i) {\n    return t.call(n, a, r, s, i);\n  };\n}, Tt = function(t, n, a, r) {\n  var s = Object.keys(t), i = s.length, o = r !== void 0 ? Wr(n, r) : n, l, c, d;\n  for (a === void 0 ? (l = 1, d = t[s[0]]) : (l = 0, d = a); l < i; l++)\n    c = s[l], d = o(d, t[c], c, t);\n  return d;\n};\nfunction Hr(e) {\n  for (var t = [], n = 0, a = e.length; n < a; ) {\n    var r = e.charCodeAt(n++);\n    if (r >= 55296 && r <= 56319 && n < a) {\n      var s = e.charCodeAt(n++);\n      (s & 64512) == 56320 ? t.push(((r & 1023) << 10) + (s & 1023) + 65536) : (t.push(r), n--);\n    } else\n      t.push(r);\n  }\n  return t;\n}\nfunction Ot(e) {\n  var t = Hr(e);\n  return t.length === 1 ? t[0].toString(16) : null;\n}\nfunction Yr(e, t) {\n  var n = e.length, a = e.charCodeAt(t), r;\n  return a >= 55296 && a <= 56319 && n > t + 1 && (r = e.charCodeAt(t + 1), r >= 56320 && r <= 57343) ? (a - 55296) * 1024 + r - 56320 + 65536 : a;\n}\nfunction Sn(e) {\n  return Object.keys(e).reduce(function(t, n) {\n    var a = e[n], r = !!a.icon;\n    return r ? t[a.iconName] = a.icon : t[n] = a, t;\n  }, {});\n}\nfunction $t(e, t) {\n  var n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, a = n.skipHooks, r = a === void 0 ? !1 : a, s = Sn(t);\n  typeof te.hooks.addPack == \"function\" && !r ? te.hooks.addPack(e, Sn(t)) : te.styles[e] = p(p({}, te.styles[e] || {}), s), e === \"fas\" && $t(\"fa\", t);\n}\nvar it, st, ot, Ae = te.styles, zr = te.shims, jr = (it = {}, W(it, _, Object.values(Ue[_])), W(it, O, Object.values(Ue[O])), it), Qt = null, Sa = {}, Ta = {}, Ca = {}, Aa = {}, _a = {}, Br = (st = {}, W(st, _, Object.keys(je[_])), W(st, O, Object.keys(je[O])), st);\nfunction Ur(e) {\n  return ~Sr.indexOf(e);\n}\nfunction Xr(e, t) {\n  var n = t.split(\"-\"), a = n[0], r = n.slice(1).join(\"-\");\n  return a === e && r !== \"\" && !Ur(r) ? r : null;\n}\nvar Ma = function() {\n  var t = function(s) {\n    return Tt(Ae, function(i, o, l) {\n      return i[l] = Tt(o, s, {}), i;\n    }, {});\n  };\n  Sa = t(function(r, s, i) {\n    if (s[3] && (r[s[3]] = i), s[2]) {\n      var o = s[2].filter(function(l) {\n        return typeof l == \"number\";\n      });\n      o.forEach(function(l) {\n        r[l.toString(16)] = i;\n      });\n    }\n    return r;\n  }), Ta = t(function(r, s, i) {\n    if (r[i] = i, s[2]) {\n      var o = s[2].filter(function(l) {\n        return typeof l == \"string\";\n      });\n      o.forEach(function(l) {\n        r[l] = i;\n      });\n    }\n    return r;\n  }), _a = t(function(r, s, i) {\n    var o = s[2];\n    return r[i] = i, o.forEach(function(l) {\n      r[l] = i;\n    }), r;\n  });\n  var n = \"far\" in Ae || b.autoFetchSvg, a = Tt(zr, function(r, s) {\n    var i = s[0], o = s[1], l = s[2];\n    return o === \"far\" && !n && (o = \"fas\"), typeof i == \"string\" && (r.names[i] = {\n      prefix: o,\n      iconName: l\n    }), typeof i == \"number\" && (r.unicodes[i.toString(16)] = {\n      prefix: o,\n      iconName: l\n    }), r;\n  }, {\n    names: {},\n    unicodes: {}\n  });\n  Ca = a.names, Aa = a.unicodes, Qt = Dt(b.styleDefault, {\n    family: b.familyDefault\n  });\n};\n_r(function(e) {\n  Qt = Dt(e.styleDefault, {\n    family: b.familyDefault\n  });\n});\nMa();\nfunction Jt(e, t) {\n  return (Sa[e] || {})[t];\n}\nfunction Vr(e, t) {\n  return (Ta[e] || {})[t];\n}\nfunction we(e, t) {\n  return (_a[e] || {})[t];\n}\nfunction Pa(e) {\n  return Ca[e] || {\n    prefix: null,\n    iconName: null\n  };\n}\nfunction xr(e) {\n  var t = Aa[e], n = Jt(\"fas\", e);\n  return t || (n ? {\n    prefix: \"fas\",\n    iconName: n\n  } : null) || {\n    prefix: null,\n    iconName: null\n  };\n}\nfunction be() {\n  return Qt;\n}\nvar Zt = function() {\n  return {\n    prefix: null,\n    iconName: null,\n    rest: []\n  };\n};\nfunction Dt(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = t.family, a = n === void 0 ? _ : n, r = je[a][e], s = Be[a][e] || Be[a][r], i = e in te.styles ? e : null;\n  return s || i || null;\n}\nvar Tn = (ot = {}, W(ot, _, Object.keys(Ue[_])), W(ot, O, Object.keys(Ue[O])), ot);\nfunction kt(e) {\n  var t, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = n.skipLookups, r = a === void 0 ? !1 : a, s = (t = {}, W(t, _, \"\".concat(b.cssPrefix, \"-\").concat(_)), W(t, O, \"\".concat(b.cssPrefix, \"-\").concat(O)), t), i = null, o = _;\n  (e.includes(s[_]) || e.some(function(c) {\n    return Tn[_].includes(c);\n  })) && (o = _), (e.includes(s[O]) || e.some(function(c) {\n    return Tn[O].includes(c);\n  })) && (o = O);\n  var l = e.reduce(function(c, d) {\n    var u = Xr(b.cssPrefix, d);\n    if (Ae[d] ? (d = jr[o].includes(d) ? yr[o][d] : d, i = d, c.prefix = d) : Br[o].indexOf(d) > -1 ? (i = d, c.prefix = Dt(d, {\n      family: o\n    })) : u ? c.iconName = u : d !== b.replacementClass && d !== s[_] && d !== s[O] && c.rest.push(d), !r && c.prefix && c.iconName) {\n      var g = i === \"fa\" ? Pa(c.iconName) : {}, D = we(c.prefix, c.iconName);\n      g.prefix && (i = null), c.iconName = g.iconName || D || c.iconName, c.prefix = g.prefix || c.prefix, c.prefix === \"far\" && !Ae.far && Ae.fas && !b.autoFetchSvg && (c.prefix = \"fas\");\n    }\n    return c;\n  }, Zt());\n  return (e.includes(\"fa-brands\") || e.includes(\"fab\")) && (l.prefix = \"fab\"), (e.includes(\"fa-duotone\") || e.includes(\"fad\")) && (l.prefix = \"fad\"), !l.prefix && o === O && (Ae.fass || b.autoFetchSvg) && (l.prefix = \"fass\", l.iconName = we(l.prefix, l.iconName) || l.iconName), (l.prefix === \"fa\" || i === \"fa\") && (l.prefix = be() || \"fas\"), l;\n}\nvar qr = /* @__PURE__ */ function() {\n  function e() {\n    sr(this, e), this.definitions = {};\n  }\n  return or(e, [{\n    key: \"add\",\n    value: function() {\n      for (var n = this, a = arguments.length, r = new Array(a), s = 0; s < a; s++)\n        r[s] = arguments[s];\n      var i = r.reduce(this._pullDefinitions, {});\n      Object.keys(i).forEach(function(o) {\n        n.definitions[o] = p(p({}, n.definitions[o] || {}), i[o]), $t(o, i[o]);\n        var l = Ue[_][o];\n        l && $t(l, i[o]), Ma();\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function() {\n      this.definitions = {};\n    }\n  }, {\n    key: \"_pullDefinitions\",\n    value: function(n, a) {\n      var r = a.prefix && a.iconName && a.icon ? {\n        0: a\n      } : a;\n      return Object.keys(r).map(function(s) {\n        var i = r[s], o = i.prefix, l = i.iconName, c = i.icon, d = c[2];\n        n[o] || (n[o] = {}), d.length > 0 && d.forEach(function(u) {\n          typeof u == \"string\" && (n[o][u] = c);\n        }), n[o][l] = c;\n      }), n;\n    }\n  }]), e;\n}(), Cn = [], _e = {}, Pe = {}, Gr = Object.keys(Pe);\nfunction Kr(e, t) {\n  var n = t.mixoutsTo;\n  return Cn = e, _e = {}, Object.keys(Pe).forEach(function(a) {\n    Gr.indexOf(a) === -1 && delete Pe[a];\n  }), Cn.forEach(function(a) {\n    var r = a.mixout ? a.mixout() : {};\n    if (Object.keys(r).forEach(function(i) {\n      typeof r[i] == \"function\" && (n[i] = r[i]), mt(r[i]) === \"object\" && Object.keys(r[i]).forEach(function(o) {\n        n[i] || (n[i] = {}), n[i][o] = r[i][o];\n      });\n    }), a.hooks) {\n      var s = a.hooks();\n      Object.keys(s).forEach(function(i) {\n        _e[i] || (_e[i] = []), _e[i].push(s[i]);\n      });\n    }\n    a.provides && a.provides(Pe);\n  }), n;\n}\nfunction Ft(e, t) {\n  for (var n = arguments.length, a = new Array(n > 2 ? n - 2 : 0), r = 2; r < n; r++)\n    a[r - 2] = arguments[r];\n  var s = _e[e] || [];\n  return s.forEach(function(i) {\n    t = i.apply(null, [t].concat(a));\n  }), t;\n}\nfunction Te(e) {\n  for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++)\n    n[a - 1] = arguments[a];\n  var r = _e[e] || [];\n  r.forEach(function(s) {\n    s.apply(null, n);\n  });\n}\nfunction fe() {\n  var e = arguments[0], t = Array.prototype.slice.call(arguments, 1);\n  return Pe[e] ? Pe[e].apply(null, t) : void 0;\n}\nfunction Rt(e) {\n  e.prefix === \"fa\" && (e.prefix = \"fas\");\n  var t = e.iconName, n = e.prefix || be();\n  if (t)\n    return t = we(n, t) || t, En(La.definitions, n, t) || En(te.styles, n, t);\n}\nvar La = new qr(), Qr = function() {\n  b.autoReplaceSvg = !1, b.observeMutations = !1, Te(\"noAuto\");\n}, Jr = {\n  i2svg: function() {\n    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return he ? (Te(\"beforeI2svg\", t), fe(\"pseudoElements2svg\", t), fe(\"i2svg\", t)) : Promise.reject(\"Operation requires a DOM of some kind.\");\n  },\n  watch: function() {\n    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = t.autoReplaceSvgRoot;\n    b.autoReplaceSvg === !1 && (b.autoReplaceSvg = !0), b.observeMutations = !0, Nr(function() {\n      ei({\n        autoReplaceSvgRoot: n\n      }), Te(\"watch\", t);\n    });\n  }\n}, Zr = {\n  icon: function(t) {\n    if (t === null)\n      return null;\n    if (mt(t) === \"object\" && t.prefix && t.iconName)\n      return {\n        prefix: t.prefix,\n        iconName: we(t.prefix, t.iconName) || t.iconName\n      };\n    if (Array.isArray(t) && t.length === 2) {\n      var n = t[1].indexOf(\"fa-\") === 0 ? t[1].slice(3) : t[1], a = Dt(t[0]);\n      return {\n        prefix: a,\n        iconName: we(a, n) || n\n      };\n    }\n    if (typeof t == \"string\" && (t.indexOf(\"\".concat(b.cssPrefix, \"-\")) > -1 || t.match(br))) {\n      var r = kt(t.split(\" \"), {\n        skipLookups: !0\n      });\n      return {\n        prefix: r.prefix || be(),\n        iconName: we(r.prefix, r.iconName) || r.iconName\n      };\n    }\n    if (typeof t == \"string\") {\n      var s = be();\n      return {\n        prefix: s,\n        iconName: we(s, t) || t\n      };\n    }\n  }\n}, G = {\n  noAuto: Qr,\n  config: b,\n  dom: Jr,\n  parse: Zr,\n  library: La,\n  findIconDefinition: Rt,\n  toHtml: Ke\n}, ei = function() {\n  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = t.autoReplaceSvgRoot, a = n === void 0 ? M : n;\n  (Object.keys(te.styles).length > 0 || b.autoFetchSvg) && he && b.autoReplaceSvg && G.dom.i2svg({\n    node: a\n  });\n};\nfunction wt(e, t) {\n  return Object.defineProperty(e, \"abstract\", {\n    get: t\n  }), Object.defineProperty(e, \"html\", {\n    get: function() {\n      return e.abstract.map(function(a) {\n        return Ke(a);\n      });\n    }\n  }), Object.defineProperty(e, \"node\", {\n    get: function() {\n      if (he) {\n        var a = M.createElement(\"div\");\n        return a.innerHTML = e.html, a.children;\n      }\n    }\n  }), e;\n}\nfunction ti(e) {\n  var t = e.children, n = e.main, a = e.mask, r = e.attributes, s = e.styles, i = e.transform;\n  if (Kt(i) && n.found && !a.found) {\n    var o = n.width, l = n.height, c = {\n      x: o / l / 2,\n      y: 0.5\n    };\n    r.style = bt(p(p({}, s), {}, {\n      \"transform-origin\": \"\".concat(c.x + i.x / 16, \"em \").concat(c.y + i.y / 16, \"em\")\n    }));\n  }\n  return [{\n    tag: \"svg\",\n    attributes: r,\n    children: t\n  }];\n}\nfunction ni(e) {\n  var t = e.prefix, n = e.iconName, a = e.children, r = e.attributes, s = e.symbol, i = s === !0 ? \"\".concat(t, \"-\").concat(b.cssPrefix, \"-\").concat(n) : s;\n  return [{\n    tag: \"svg\",\n    attributes: {\n      style: \"display: none;\"\n    },\n    children: [{\n      tag: \"symbol\",\n      attributes: p(p({}, r), {}, {\n        id: i\n      }),\n      children: a\n    }]\n  }];\n}\nfunction en(e) {\n  var t = e.icons, n = t.main, a = t.mask, r = e.prefix, s = e.iconName, i = e.transform, o = e.symbol, l = e.title, c = e.maskId, d = e.titleId, u = e.extra, g = e.watchable, D = g === void 0 ? !1 : g, y = a.found ? a : n, k = y.width, w = y.height, h = r === \"fak\", v = [b.replacementClass, s ? \"\".concat(b.cssPrefix, \"-\").concat(s) : \"\"].filter(function(ve) {\n    return u.classes.indexOf(ve) === -1;\n  }).filter(function(ve) {\n    return ve !== \"\" || !!ve;\n  }).concat(u.classes).join(\" \"), E = {\n    children: [],\n    attributes: p(p({}, u.attributes), {}, {\n      \"data-prefix\": r,\n      \"data-icon\": s,\n      class: v,\n      role: u.attributes.role || \"img\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 \".concat(k, \" \").concat(w)\n    })\n  }, A = h && !~u.classes.indexOf(\"fa-fw\") ? {\n    width: \"\".concat(k / w * 16 * 0.0625, \"em\")\n  } : {};\n  D && (E.attributes[Se] = \"\"), l && (E.children.push({\n    tag: \"title\",\n    attributes: {\n      id: E.attributes[\"aria-labelledby\"] || \"title-\".concat(d || Ve())\n    },\n    children: [l]\n  }), delete E.attributes.title);\n  var N = p(p({}, E), {}, {\n    prefix: r,\n    iconName: s,\n    main: n,\n    mask: a,\n    maskId: c,\n    transform: i,\n    symbol: o,\n    styles: p(p({}, A), u.styles)\n  }), ne = a.found && n.found ? fe(\"generateAbstractMask\", N) || {\n    children: [],\n    attributes: {}\n  } : fe(\"generateAbstractIcon\", N) || {\n    children: [],\n    attributes: {}\n  }, J = ne.children, Et = ne.attributes;\n  return N.children = J, N.attributes = Et, o ? ni(N) : ti(N);\n}\nfunction An(e) {\n  var t = e.content, n = e.width, a = e.height, r = e.transform, s = e.title, i = e.extra, o = e.watchable, l = o === void 0 ? !1 : o, c = p(p(p({}, i.attributes), s ? {\n    title: s\n  } : {}), {}, {\n    class: i.classes.join(\" \")\n  });\n  l && (c[Se] = \"\");\n  var d = p({}, i.styles);\n  Kt(r) && (d.transform = Or({\n    transform: r,\n    startCentered: !0,\n    width: n,\n    height: a\n  }), d[\"-webkit-transform\"] = d.transform);\n  var u = bt(d);\n  u.length > 0 && (c.style = u);\n  var g = [];\n  return g.push({\n    tag: \"span\",\n    attributes: c,\n    children: [t]\n  }), s && g.push({\n    tag: \"span\",\n    attributes: {\n      class: \"sr-only\"\n    },\n    children: [s]\n  }), g;\n}\nfunction ai(e) {\n  var t = e.content, n = e.title, a = e.extra, r = p(p(p({}, a.attributes), n ? {\n    title: n\n  } : {}), {}, {\n    class: a.classes.join(\" \")\n  }), s = bt(a.styles);\n  s.length > 0 && (r.style = s);\n  var i = [];\n  return i.push({\n    tag: \"span\",\n    attributes: r,\n    children: [t]\n  }), n && i.push({\n    tag: \"span\",\n    attributes: {\n      class: \"sr-only\"\n    },\n    children: [n]\n  }), i;\n}\nvar Ct = te.styles;\nfunction Nt(e) {\n  var t = e[0], n = e[1], a = e.slice(4), r = Ut(a, 1), s = r[0], i = null;\n  return Array.isArray(s) ? i = {\n    tag: \"g\",\n    attributes: {\n      class: \"\".concat(b.cssPrefix, \"-\").concat(ke.GROUP)\n    },\n    children: [{\n      tag: \"path\",\n      attributes: {\n        class: \"\".concat(b.cssPrefix, \"-\").concat(ke.SECONDARY),\n        fill: \"currentColor\",\n        d: s[0]\n      }\n    }, {\n      tag: \"path\",\n      attributes: {\n        class: \"\".concat(b.cssPrefix, \"-\").concat(ke.PRIMARY),\n        fill: \"currentColor\",\n        d: s[1]\n      }\n    }]\n  } : i = {\n    tag: \"path\",\n    attributes: {\n      fill: \"currentColor\",\n      d: s\n    }\n  }, {\n    found: !0,\n    width: t,\n    height: n,\n    icon: i\n  };\n}\nvar ri = {\n  found: !1,\n  width: 512,\n  height: 512\n};\nfunction ii(e, t) {\n  !pa && !b.showMissingIcons && e && console.error('Icon with name \"'.concat(e, '\" and prefix \"').concat(t, '\" is missing.'));\n}\nfunction Wt(e, t) {\n  var n = t;\n  return t === \"fa\" && b.styleDefault !== null && (t = be()), new Promise(function(a, r) {\n    if (fe(\"missingIconAbstract\"), n === \"fa\") {\n      var s = Pa(e) || {};\n      e = s.iconName || e, t = s.prefix || t;\n    }\n    if (e && t && Ct[t] && Ct[t][e]) {\n      var i = Ct[t][e];\n      return a(Nt(i));\n    }\n    ii(e, t), a(p(p({}, ri), {}, {\n      icon: b.showMissingIcons && e ? fe(\"missingIconAbstract\") || {} : {}\n    }));\n  });\n}\nvar _n = function() {\n}, Ht = b.measurePerformance && Ze && Ze.mark && Ze.measure ? Ze : {\n  mark: _n,\n  measure: _n\n}, We = 'FA \"6.3.0\"', si = function(t) {\n  return Ht.mark(\"\".concat(We, \" \").concat(t, \" begins\")), function() {\n    return Ia(t);\n  };\n}, Ia = function(t) {\n  Ht.mark(\"\".concat(We, \" \").concat(t, \" ends\")), Ht.measure(\"\".concat(We, \" \").concat(t), \"\".concat(We, \" \").concat(t, \" begins\"), \"\".concat(We, \" \").concat(t, \" ends\"));\n}, tn = {\n  begin: si,\n  end: Ia\n}, dt = function() {\n};\nfunction Mn(e) {\n  var t = e.getAttribute ? e.getAttribute(Se) : null;\n  return typeof t == \"string\";\n}\nfunction oi(e) {\n  var t = e.getAttribute ? e.getAttribute(Vt) : null, n = e.getAttribute ? e.getAttribute(xt) : null;\n  return t && n;\n}\nfunction li(e) {\n  return e && e.classList && e.classList.contains && e.classList.contains(b.replacementClass);\n}\nfunction ci() {\n  if (b.autoReplaceSvg === !0)\n    return ut.replace;\n  var e = ut[b.autoReplaceSvg];\n  return e || ut.replace;\n}\nfunction di(e) {\n  return M.createElementNS(\"http://www.w3.org/2000/svg\", e);\n}\nfunction ui(e) {\n  return M.createElement(e);\n}\nfunction Oa(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = t.ceFn, a = n === void 0 ? e.tag === \"svg\" ? di : ui : n;\n  if (typeof e == \"string\")\n    return M.createTextNode(e);\n  var r = a(e.tag);\n  Object.keys(e.attributes || []).forEach(function(i) {\n    r.setAttribute(i, e.attributes[i]);\n  });\n  var s = e.children || [];\n  return s.forEach(function(i) {\n    r.appendChild(Oa(i, {\n      ceFn: a\n    }));\n  }), r;\n}\nfunction fi(e) {\n  var t = \" \".concat(e.outerHTML, \" \");\n  return t = \"\".concat(t, \"Font Awesome fontawesome.com \"), t;\n}\nvar ut = {\n  replace: function(t) {\n    var n = t[0];\n    if (n.parentNode)\n      if (t[1].forEach(function(r) {\n        n.parentNode.insertBefore(Oa(r), n);\n      }), n.getAttribute(Se) === null && b.keepOriginalSource) {\n        var a = M.createComment(fi(n));\n        n.parentNode.replaceChild(a, n);\n      } else\n        n.remove();\n  },\n  nest: function(t) {\n    var n = t[0], a = t[1];\n    if (~Gt(n).indexOf(b.replacementClass))\n      return ut.replace(t);\n    var r = new RegExp(\"\".concat(b.cssPrefix, \"-.*\"));\n    if (delete a[0].attributes.id, a[0].attributes.class) {\n      var s = a[0].attributes.class.split(\" \").reduce(function(o, l) {\n        return l === b.replacementClass || l.match(r) ? o.toSvg.push(l) : o.toNode.push(l), o;\n      }, {\n        toNode: [],\n        toSvg: []\n      });\n      a[0].attributes.class = s.toSvg.join(\" \"), s.toNode.length === 0 ? n.removeAttribute(\"class\") : n.setAttribute(\"class\", s.toNode.join(\" \"));\n    }\n    var i = a.map(function(o) {\n      return Ke(o);\n    }).join(`\n`);\n    n.setAttribute(Se, \"\"), n.innerHTML = i;\n  }\n};\nfunction Pn(e) {\n  e();\n}\nfunction $a(e, t) {\n  var n = typeof t == \"function\" ? t : dt;\n  if (e.length === 0)\n    n();\n  else {\n    var a = Pn;\n    b.mutateApproach === gr && (a = ye.requestAnimationFrame || Pn), a(function() {\n      var r = ci(), s = tn.begin(\"mutate\");\n      e.map(r), s(), n();\n    });\n  }\n}\nvar nn = !1;\nfunction Fa() {\n  nn = !0;\n}\nfunction Yt() {\n  nn = !1;\n}\nvar vt = null;\nfunction Ln(e) {\n  if (Dn && b.observeMutations) {\n    var t = e.treeCallback, n = t === void 0 ? dt : t, a = e.nodeCallback, r = a === void 0 ? dt : a, s = e.pseudoElementsCallback, i = s === void 0 ? dt : s, o = e.observeMutationsRoot, l = o === void 0 ? M : o;\n    vt = new Dn(function(c) {\n      if (!nn) {\n        var d = be();\n        $e(c).forEach(function(u) {\n          if (u.type === \"childList\" && u.addedNodes.length > 0 && !Mn(u.addedNodes[0]) && (b.searchPseudoElements && i(u.target), n(u.target)), u.type === \"attributes\" && u.target.parentNode && b.searchPseudoElements && i(u.target.parentNode), u.type === \"attributes\" && Mn(u.target) && ~Er.indexOf(u.attributeName))\n            if (u.attributeName === \"class\" && oi(u.target)) {\n              var g = kt(Gt(u.target)), D = g.prefix, y = g.iconName;\n              u.target.setAttribute(Vt, D || d), y && u.target.setAttribute(xt, y);\n            } else\n              li(u.target) && r(u.target);\n        });\n      }\n    }), he && vt.observe(l, {\n      childList: !0,\n      attributes: !0,\n      characterData: !0,\n      subtree: !0\n    });\n  }\n}\nfunction mi() {\n  vt && vt.disconnect();\n}\nfunction hi(e) {\n  var t = e.getAttribute(\"style\"), n = [];\n  return t && (n = t.split(\";\").reduce(function(a, r) {\n    var s = r.split(\":\"), i = s[0], o = s.slice(1);\n    return i && o.length > 0 && (a[i] = o.join(\":\").trim()), a;\n  }, {})), n;\n}\nfunction vi(e) {\n  var t = e.getAttribute(\"data-prefix\"), n = e.getAttribute(\"data-icon\"), a = e.innerText !== void 0 ? e.innerText.trim() : \"\", r = kt(Gt(e));\n  return r.prefix || (r.prefix = be()), t && n && (r.prefix = t, r.iconName = n), r.iconName && r.prefix || (r.prefix && a.length > 0 && (r.iconName = Vr(r.prefix, e.innerText) || Jt(r.prefix, Ot(e.innerText))), !r.iconName && b.autoFetchSvg && e.firstChild && e.firstChild.nodeType === Node.TEXT_NODE && (r.iconName = e.firstChild.data)), r;\n}\nfunction gi(e) {\n  var t = $e(e.attributes).reduce(function(r, s) {\n    return r.name !== \"class\" && r.name !== \"style\" && (r[s.name] = s.value), r;\n  }, {}), n = e.getAttribute(\"title\"), a = e.getAttribute(\"data-fa-title-id\");\n  return b.autoA11y && (n ? t[\"aria-labelledby\"] = \"\".concat(b.replacementClass, \"-title-\").concat(a || Ve()) : (t[\"aria-hidden\"] = \"true\", t.focusable = \"false\")), t;\n}\nfunction pi() {\n  return {\n    iconName: null,\n    title: null,\n    titleId: null,\n    prefix: null,\n    transform: re,\n    symbol: !1,\n    mask: {\n      iconName: null,\n      prefix: null,\n      rest: []\n    },\n    maskId: null,\n    extra: {\n      classes: [],\n      styles: {},\n      attributes: {}\n    }\n  };\n}\nfunction In(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n    styleParser: !0\n  }, n = vi(e), a = n.iconName, r = n.prefix, s = n.rest, i = gi(e), o = Ft(\"parseNodeAttributes\", {}, e), l = t.styleParser ? hi(e) : [];\n  return p({\n    iconName: a,\n    title: e.getAttribute(\"title\"),\n    titleId: e.getAttribute(\"data-fa-title-id\"),\n    prefix: r,\n    transform: re,\n    mask: {\n      iconName: null,\n      prefix: null,\n      rest: []\n    },\n    maskId: null,\n    symbol: !1,\n    extra: {\n      classes: s,\n      styles: l,\n      attributes: i\n    }\n  }, o);\n}\nvar yi = te.styles;\nfunction Ra(e) {\n  var t = b.autoReplaceSvg === \"nest\" ? In(e, {\n    styleParser: !1\n  }) : In(e);\n  return ~t.extra.classes.indexOf(ya) ? fe(\"generateLayersText\", e, t) : fe(\"generateSvgReplacementMutation\", e, t);\n}\nvar De = /* @__PURE__ */ new Set();\nqt.map(function(e) {\n  De.add(\"fa-\".concat(e));\n});\nObject.keys(je[_]).map(De.add.bind(De));\nObject.keys(je[O]).map(De.add.bind(De));\nDe = qe(De);\nfunction On(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n  if (!he)\n    return Promise.resolve();\n  var n = M.documentElement.classList, a = function(u) {\n    return n.add(\"\".concat(kn, \"-\").concat(u));\n  }, r = function(u) {\n    return n.remove(\"\".concat(kn, \"-\").concat(u));\n  }, s = b.autoFetchSvg ? De : qt.map(function(d) {\n    return \"fa-\".concat(d);\n  }).concat(Object.keys(yi));\n  s.includes(\"fa\") || s.push(\"fa\");\n  var i = [\".\".concat(ya, \":not([\").concat(Se, \"])\")].concat(s.map(function(d) {\n    return \".\".concat(d, \":not([\").concat(Se, \"])\");\n  })).join(\", \");\n  if (i.length === 0)\n    return Promise.resolve();\n  var o = [];\n  try {\n    o = $e(e.querySelectorAll(i));\n  } catch {\n  }\n  if (o.length > 0)\n    a(\"pending\"), r(\"complete\");\n  else\n    return Promise.resolve();\n  var l = tn.begin(\"onTree\"), c = o.reduce(function(d, u) {\n    try {\n      var g = Ra(u);\n      g && d.push(g);\n    } catch (D) {\n      pa || D.name === \"MissingIcon\" && console.error(D);\n    }\n    return d;\n  }, []);\n  return new Promise(function(d, u) {\n    Promise.all(c).then(function(g) {\n      $a(g, function() {\n        a(\"active\"), a(\"complete\"), r(\"pending\"), typeof t == \"function\" && t(), l(), d();\n      });\n    }).catch(function(g) {\n      l(), u(g);\n    });\n  });\n}\nfunction bi(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n  Ra(e).then(function(n) {\n    n && $a([n], t);\n  });\n}\nfunction Di(e) {\n  return function(t) {\n    var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = (t || {}).icon ? t : Rt(t || {}), r = n.mask;\n    return r && (r = (r || {}).icon ? r : Rt(r || {})), e(a, p(p({}, n), {}, {\n      mask: r\n    }));\n  };\n}\nvar ki = function(t) {\n  var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = n.transform, r = a === void 0 ? re : a, s = n.symbol, i = s === void 0 ? !1 : s, o = n.mask, l = o === void 0 ? null : o, c = n.maskId, d = c === void 0 ? null : c, u = n.title, g = u === void 0 ? null : u, D = n.titleId, y = D === void 0 ? null : D, k = n.classes, w = k === void 0 ? [] : k, h = n.attributes, v = h === void 0 ? {} : h, E = n.styles, A = E === void 0 ? {} : E;\n  if (t) {\n    var N = t.prefix, ne = t.iconName, J = t.icon;\n    return wt(p({\n      type: \"icon\"\n    }, t), function() {\n      return Te(\"beforeDOMElementCreation\", {\n        iconDefinition: t,\n        params: n\n      }), b.autoA11y && (g ? v[\"aria-labelledby\"] = \"\".concat(b.replacementClass, \"-title-\").concat(y || Ve()) : (v[\"aria-hidden\"] = \"true\", v.focusable = \"false\")), en({\n        icons: {\n          main: Nt(J),\n          mask: l ? Nt(l.icon) : {\n            found: !1,\n            width: null,\n            height: null,\n            icon: {}\n          }\n        },\n        prefix: N,\n        iconName: ne,\n        transform: p(p({}, re), r),\n        symbol: i,\n        title: g,\n        maskId: d,\n        titleId: y,\n        extra: {\n          attributes: v,\n          styles: A,\n          classes: w\n        }\n      });\n    });\n  }\n}, wi = {\n  mixout: function() {\n    return {\n      icon: Di(ki)\n    };\n  },\n  hooks: function() {\n    return {\n      mutationObserverCallbacks: function(n) {\n        return n.treeCallback = On, n.nodeCallback = bi, n;\n      }\n    };\n  },\n  provides: function(t) {\n    t.i2svg = function(n) {\n      var a = n.node, r = a === void 0 ? M : a, s = n.callback, i = s === void 0 ? function() {\n      } : s;\n      return On(r, i);\n    }, t.generateSvgReplacementMutation = function(n, a) {\n      var r = a.iconName, s = a.title, i = a.titleId, o = a.prefix, l = a.transform, c = a.symbol, d = a.mask, u = a.maskId, g = a.extra;\n      return new Promise(function(D, y) {\n        Promise.all([Wt(r, o), d.iconName ? Wt(d.iconName, d.prefix) : Promise.resolve({\n          found: !1,\n          width: 512,\n          height: 512,\n          icon: {}\n        })]).then(function(k) {\n          var w = Ut(k, 2), h = w[0], v = w[1];\n          D([n, en({\n            icons: {\n              main: h,\n              mask: v\n            },\n            prefix: o,\n            iconName: r,\n            transform: l,\n            symbol: c,\n            maskId: u,\n            title: s,\n            titleId: i,\n            extra: g,\n            watchable: !0\n          })]);\n        }).catch(y);\n      });\n    }, t.generateAbstractIcon = function(n) {\n      var a = n.children, r = n.attributes, s = n.main, i = n.transform, o = n.styles, l = bt(o);\n      l.length > 0 && (r.style = l);\n      var c;\n      return Kt(i) && (c = fe(\"generateAbstractTransformGrouping\", {\n        main: s,\n        transform: i,\n        containerWidth: s.width,\n        iconWidth: s.width\n      })), a.push(c || s.icon), {\n        children: a,\n        attributes: r\n      };\n    };\n  }\n}, Ei = {\n  mixout: function() {\n    return {\n      layer: function(n) {\n        var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = a.classes, s = r === void 0 ? [] : r;\n        return wt({\n          type: \"layer\"\n        }, function() {\n          Te(\"beforeDOMElementCreation\", {\n            assembler: n,\n            params: a\n          });\n          var i = [];\n          return n(function(o) {\n            Array.isArray(o) ? o.map(function(l) {\n              i = i.concat(l.abstract);\n            }) : i = i.concat(o.abstract);\n          }), [{\n            tag: \"span\",\n            attributes: {\n              class: [\"\".concat(b.cssPrefix, \"-layers\")].concat(qe(s)).join(\" \")\n            },\n            children: i\n          }];\n        });\n      }\n    };\n  }\n}, Si = {\n  mixout: function() {\n    return {\n      counter: function(n) {\n        var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = a.title, s = r === void 0 ? null : r, i = a.classes, o = i === void 0 ? [] : i, l = a.attributes, c = l === void 0 ? {} : l, d = a.styles, u = d === void 0 ? {} : d;\n        return wt({\n          type: \"counter\",\n          content: n\n        }, function() {\n          return Te(\"beforeDOMElementCreation\", {\n            content: n,\n            params: a\n          }), ai({\n            content: n.toString(),\n            title: s,\n            extra: {\n              attributes: c,\n              styles: u,\n              classes: [\"\".concat(b.cssPrefix, \"-layers-counter\")].concat(qe(o))\n            }\n          });\n        });\n      }\n    };\n  }\n}, Ti = {\n  mixout: function() {\n    return {\n      text: function(n) {\n        var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = a.transform, s = r === void 0 ? re : r, i = a.title, o = i === void 0 ? null : i, l = a.classes, c = l === void 0 ? [] : l, d = a.attributes, u = d === void 0 ? {} : d, g = a.styles, D = g === void 0 ? {} : g;\n        return wt({\n          type: \"text\",\n          content: n\n        }, function() {\n          return Te(\"beforeDOMElementCreation\", {\n            content: n,\n            params: a\n          }), An({\n            content: n,\n            transform: p(p({}, re), s),\n            title: o,\n            extra: {\n              attributes: u,\n              styles: D,\n              classes: [\"\".concat(b.cssPrefix, \"-layers-text\")].concat(qe(c))\n            }\n          });\n        });\n      }\n    };\n  },\n  provides: function(t) {\n    t.generateLayersText = function(n, a) {\n      var r = a.title, s = a.transform, i = a.extra, o = null, l = null;\n      if (ha) {\n        var c = parseInt(getComputedStyle(n).fontSize, 10), d = n.getBoundingClientRect();\n        o = d.width / c, l = d.height / c;\n      }\n      return b.autoA11y && !r && (i.attributes[\"aria-hidden\"] = \"true\"), Promise.resolve([n, An({\n        content: n.innerHTML,\n        width: o,\n        height: l,\n        transform: s,\n        title: r,\n        extra: i,\n        watchable: !0\n      })]);\n    };\n  }\n}, Ci = new RegExp('\"', \"ug\"), $n = [1105920, 1112319];\nfunction Ai(e) {\n  var t = e.replace(Ci, \"\"), n = Yr(t, 0), a = n >= $n[0] && n <= $n[1], r = t.length === 2 ? t[0] === t[1] : !1;\n  return {\n    value: Ot(r ? t[0] : t),\n    isSecondary: a || r\n  };\n}\nfunction Fn(e, t) {\n  var n = \"\".concat(vr).concat(t.replace(\":\", \"-\"));\n  return new Promise(function(a, r) {\n    if (e.getAttribute(n) !== null)\n      return a();\n    var s = $e(e.children), i = s.filter(function(J) {\n      return J.getAttribute(It) === t;\n    })[0], o = ye.getComputedStyle(e, t), l = o.getPropertyValue(\"font-family\").match(Dr), c = o.getPropertyValue(\"font-weight\"), d = o.getPropertyValue(\"content\");\n    if (i && !l)\n      return e.removeChild(i), a();\n    if (l && d !== \"none\" && d !== \"\") {\n      var u = o.getPropertyValue(\"content\"), g = ~[\"Sharp\"].indexOf(l[2]) ? O : _, D = ~[\"Solid\", \"Regular\", \"Light\", \"Thin\", \"Duotone\", \"Brands\", \"Kit\"].indexOf(l[2]) ? Be[g][l[2].toLowerCase()] : kr[g][c], y = Ai(u), k = y.value, w = y.isSecondary, h = l[0].startsWith(\"FontAwesome\"), v = Jt(D, k), E = v;\n      if (h) {\n        var A = xr(k);\n        A.iconName && A.prefix && (v = A.iconName, D = A.prefix);\n      }\n      if (v && !w && (!i || i.getAttribute(Vt) !== D || i.getAttribute(xt) !== E)) {\n        e.setAttribute(n, E), i && e.removeChild(i);\n        var N = pi(), ne = N.extra;\n        ne.attributes[It] = t, Wt(v, D).then(function(J) {\n          var Et = en(p(p({}, N), {}, {\n            icons: {\n              main: J,\n              mask: Zt()\n            },\n            prefix: D,\n            iconName: E,\n            extra: ne,\n            watchable: !0\n          })), ve = M.createElement(\"svg\");\n          t === \"::before\" ? e.insertBefore(ve, e.firstChild) : e.appendChild(ve), ve.outerHTML = Et.map(function(Za) {\n            return Ke(Za);\n          }).join(`\n`), e.removeAttribute(n), a();\n        }).catch(r);\n      } else\n        a();\n    } else\n      a();\n  });\n}\nfunction _i(e) {\n  return Promise.all([Fn(e, \"::before\"), Fn(e, \"::after\")]);\n}\nfunction Mi(e) {\n  return e.parentNode !== document.head && !~pr.indexOf(e.tagName.toUpperCase()) && !e.getAttribute(It) && (!e.parentNode || e.parentNode.tagName !== \"svg\");\n}\nfunction Rn(e) {\n  if (he)\n    return new Promise(function(t, n) {\n      var a = $e(e.querySelectorAll(\"*\")).filter(Mi).map(_i), r = tn.begin(\"searchPseudoElements\");\n      Fa(), Promise.all(a).then(function() {\n        r(), Yt(), t();\n      }).catch(function() {\n        r(), Yt(), n();\n      });\n    });\n}\nvar Pi = {\n  hooks: function() {\n    return {\n      mutationObserverCallbacks: function(n) {\n        return n.pseudoElementsCallback = Rn, n;\n      }\n    };\n  },\n  provides: function(t) {\n    t.pseudoElements2svg = function(n) {\n      var a = n.node, r = a === void 0 ? M : a;\n      b.searchPseudoElements && Rn(r);\n    };\n  }\n}, Nn = !1, Li = {\n  mixout: function() {\n    return {\n      dom: {\n        unwatch: function() {\n          Fa(), Nn = !0;\n        }\n      }\n    };\n  },\n  hooks: function() {\n    return {\n      bootstrap: function() {\n        Ln(Ft(\"mutationObserverCallbacks\", {}));\n      },\n      noAuto: function() {\n        mi();\n      },\n      watch: function(n) {\n        var a = n.observeMutationsRoot;\n        Nn ? Yt() : Ln(Ft(\"mutationObserverCallbacks\", {\n          observeMutationsRoot: a\n        }));\n      }\n    };\n  }\n}, Wn = function(t) {\n  var n = {\n    size: 16,\n    x: 0,\n    y: 0,\n    flipX: !1,\n    flipY: !1,\n    rotate: 0\n  };\n  return t.toLowerCase().split(\" \").reduce(function(a, r) {\n    var s = r.toLowerCase().split(\"-\"), i = s[0], o = s.slice(1).join(\"-\");\n    if (i && o === \"h\")\n      return a.flipX = !0, a;\n    if (i && o === \"v\")\n      return a.flipY = !0, a;\n    if (o = parseFloat(o), isNaN(o))\n      return a;\n    switch (i) {\n      case \"grow\":\n        a.size = a.size + o;\n        break;\n      case \"shrink\":\n        a.size = a.size - o;\n        break;\n      case \"left\":\n        a.x = a.x - o;\n        break;\n      case \"right\":\n        a.x = a.x + o;\n        break;\n      case \"up\":\n        a.y = a.y - o;\n        break;\n      case \"down\":\n        a.y = a.y + o;\n        break;\n      case \"rotate\":\n        a.rotate = a.rotate + o;\n        break;\n    }\n    return a;\n  }, n);\n}, Ii = {\n  mixout: function() {\n    return {\n      parse: {\n        transform: function(n) {\n          return Wn(n);\n        }\n      }\n    };\n  },\n  hooks: function() {\n    return {\n      parseNodeAttributes: function(n, a) {\n        var r = a.getAttribute(\"data-fa-transform\");\n        return r && (n.transform = Wn(r)), n;\n      }\n    };\n  },\n  provides: function(t) {\n    t.generateAbstractTransformGrouping = function(n) {\n      var a = n.main, r = n.transform, s = n.containerWidth, i = n.iconWidth, o = {\n        transform: \"translate(\".concat(s / 2, \" 256)\")\n      }, l = \"translate(\".concat(r.x * 32, \", \").concat(r.y * 32, \") \"), c = \"scale(\".concat(r.size / 16 * (r.flipX ? -1 : 1), \", \").concat(r.size / 16 * (r.flipY ? -1 : 1), \") \"), d = \"rotate(\".concat(r.rotate, \" 0 0)\"), u = {\n        transform: \"\".concat(l, \" \").concat(c, \" \").concat(d)\n      }, g = {\n        transform: \"translate(\".concat(i / 2 * -1, \" -256)\")\n      }, D = {\n        outer: o,\n        inner: u,\n        path: g\n      };\n      return {\n        tag: \"g\",\n        attributes: p({}, D.outer),\n        children: [{\n          tag: \"g\",\n          attributes: p({}, D.inner),\n          children: [{\n            tag: a.icon.tag,\n            children: a.icon.children,\n            attributes: p(p({}, a.icon.attributes), D.path)\n          }]\n        }]\n      };\n    };\n  }\n}, At = {\n  x: 0,\n  y: 0,\n  width: \"100%\",\n  height: \"100%\"\n};\nfunction Hn(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n  return e.attributes && (e.attributes.fill || t) && (e.attributes.fill = \"black\"), e;\n}\nfunction Oi(e) {\n  return e.tag === \"g\" ? e.children : [e];\n}\nvar $i = {\n  hooks: function() {\n    return {\n      parseNodeAttributes: function(n, a) {\n        var r = a.getAttribute(\"data-fa-mask\"), s = r ? kt(r.split(\" \").map(function(i) {\n          return i.trim();\n        })) : Zt();\n        return s.prefix || (s.prefix = be()), n.mask = s, n.maskId = a.getAttribute(\"data-fa-mask-id\"), n;\n      }\n    };\n  },\n  provides: function(t) {\n    t.generateAbstractMask = function(n) {\n      var a = n.children, r = n.attributes, s = n.main, i = n.mask, o = n.maskId, l = n.transform, c = s.width, d = s.icon, u = i.width, g = i.icon, D = Ir({\n        transform: l,\n        containerWidth: u,\n        iconWidth: c\n      }), y = {\n        tag: \"rect\",\n        attributes: p(p({}, At), {}, {\n          fill: \"white\"\n        })\n      }, k = d.children ? {\n        children: d.children.map(Hn)\n      } : {}, w = {\n        tag: \"g\",\n        attributes: p({}, D.inner),\n        children: [Hn(p({\n          tag: d.tag,\n          attributes: p(p({}, d.attributes), D.path)\n        }, k))]\n      }, h = {\n        tag: \"g\",\n        attributes: p({}, D.outer),\n        children: [w]\n      }, v = \"mask-\".concat(o || Ve()), E = \"clip-\".concat(o || Ve()), A = {\n        tag: \"mask\",\n        attributes: p(p({}, At), {}, {\n          id: v,\n          maskUnits: \"userSpaceOnUse\",\n          maskContentUnits: \"userSpaceOnUse\"\n        }),\n        children: [y, h]\n      }, N = {\n        tag: \"defs\",\n        children: [{\n          tag: \"clipPath\",\n          attributes: {\n            id: E\n          },\n          children: Oi(g)\n        }, A]\n      };\n      return a.push(N, {\n        tag: \"rect\",\n        attributes: p({\n          fill: \"currentColor\",\n          \"clip-path\": \"url(#\".concat(E, \")\"),\n          mask: \"url(#\".concat(v, \")\")\n        }, At)\n      }), {\n        children: a,\n        attributes: r\n      };\n    };\n  }\n}, Fi = {\n  provides: function(t) {\n    var n = !1;\n    ye.matchMedia && (n = ye.matchMedia(\"(prefers-reduced-motion: reduce)\").matches), t.missingIconAbstract = function() {\n      var a = [], r = {\n        fill: \"currentColor\"\n      }, s = {\n        attributeType: \"XML\",\n        repeatCount: \"indefinite\",\n        dur: \"2s\"\n      };\n      a.push({\n        tag: \"path\",\n        attributes: p(p({}, r), {}, {\n          d: \"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z\"\n        })\n      });\n      var i = p(p({}, s), {}, {\n        attributeName: \"opacity\"\n      }), o = {\n        tag: \"circle\",\n        attributes: p(p({}, r), {}, {\n          cx: \"256\",\n          cy: \"364\",\n          r: \"28\"\n        }),\n        children: []\n      };\n      return n || o.children.push({\n        tag: \"animate\",\n        attributes: p(p({}, s), {}, {\n          attributeName: \"r\",\n          values: \"28;14;28;28;14;28;\"\n        })\n      }, {\n        tag: \"animate\",\n        attributes: p(p({}, i), {}, {\n          values: \"1;0;1;1;0;1;\"\n        })\n      }), a.push(o), a.push({\n        tag: \"path\",\n        attributes: p(p({}, r), {}, {\n          opacity: \"1\",\n          d: \"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z\"\n        }),\n        children: n ? [] : [{\n          tag: \"animate\",\n          attributes: p(p({}, i), {}, {\n            values: \"1;0;0;0;0;1;\"\n          })\n        }]\n      }), n || a.push({\n        tag: \"path\",\n        attributes: p(p({}, r), {}, {\n          opacity: \"0\",\n          d: \"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z\"\n        }),\n        children: [{\n          tag: \"animate\",\n          attributes: p(p({}, i), {}, {\n            values: \"0;0;1;1;0;0;\"\n          })\n        }]\n      }), {\n        tag: \"g\",\n        attributes: {\n          class: \"missing\"\n        },\n        children: a\n      };\n    };\n  }\n}, Ri = {\n  hooks: function() {\n    return {\n      parseNodeAttributes: function(n, a) {\n        var r = a.getAttribute(\"data-fa-symbol\"), s = r === null ? !1 : r === \"\" ? !0 : r;\n        return n.symbol = s, n;\n      }\n    };\n  }\n}, Ni = [Fr, wi, Ei, Si, Ti, Pi, Li, Ii, $i, Fi, Ri];\nKr(Ni, {\n  mixoutsTo: G\n});\nG.noAuto;\nvar Na = G.config;\nG.library;\nG.dom;\nvar gt = G.parse;\nG.findIconDefinition;\nG.toHtml;\nvar Wi = G.icon;\nG.layer;\nvar Hi = G.text;\nG.counter;\nfunction Yn(e, t) {\n  var n = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var a = Object.getOwnPropertySymbols(e);\n    t && (a = a.filter(function(r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), n.push.apply(n, a);\n  }\n  return n;\n}\nfunction ee(e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var n = arguments[t] != null ? arguments[t] : {};\n    t % 2 ? Yn(Object(n), !0).forEach(function(a) {\n      B(e, a, n[a]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : Yn(Object(n)).forEach(function(a) {\n      Object.defineProperty(e, a, Object.getOwnPropertyDescriptor(n, a));\n    });\n  }\n  return e;\n}\nfunction pt(e) {\n  return pt = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(t) {\n    return typeof t;\n  } : function(t) {\n    return t && typeof Symbol == \"function\" && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n  }, pt(e);\n}\nfunction B(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\nfunction Yi(e, t) {\n  if (e == null)\n    return {};\n  var n = {}, a = Object.keys(e), r, s;\n  for (s = 0; s < a.length; s++)\n    r = a[s], !(t.indexOf(r) >= 0) && (n[r] = e[r]);\n  return n;\n}\nfunction zi(e, t) {\n  if (e == null)\n    return {};\n  var n = Yi(e, t), a, r;\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++)\n      a = s[r], !(t.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(e, a) && (n[a] = e[a]);\n  }\n  return n;\n}\nfunction zt(e) {\n  return ji(e) || Bi(e) || Ui(e) || Xi();\n}\nfunction ji(e) {\n  if (Array.isArray(e))\n    return jt(e);\n}\nfunction Bi(e) {\n  if (typeof Symbol < \"u\" && e[Symbol.iterator] != null || e[\"@@iterator\"] != null)\n    return Array.from(e);\n}\nfunction Ui(e, t) {\n  if (e) {\n    if (typeof e == \"string\")\n      return jt(e, t);\n    var n = Object.prototype.toString.call(e).slice(8, -1);\n    if (n === \"Object\" && e.constructor && (n = e.constructor.name), n === \"Map\" || n === \"Set\")\n      return Array.from(e);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n      return jt(e, t);\n  }\n}\nfunction jt(e, t) {\n  (t == null || t > e.length) && (t = e.length);\n  for (var n = 0, a = new Array(t); n < t; n++)\n    a[n] = e[n];\n  return a;\n}\nfunction Xi() {\n  throw new TypeError(`Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n}\nvar Vi = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof __webpack_require__.g < \"u\" ? __webpack_require__.g : typeof self < \"u\" ? self : {}, Wa = { exports: {} };\n(function(e) {\n  (function(t) {\n    var n = function(h, v, E) {\n      if (!c(v) || u(v) || g(v) || D(v) || l(v))\n        return v;\n      var A, N = 0, ne = 0;\n      if (d(v))\n        for (A = [], ne = v.length; N < ne; N++)\n          A.push(n(h, v[N], E));\n      else {\n        A = {};\n        for (var J in v)\n          Object.prototype.hasOwnProperty.call(v, J) && (A[h(J, E)] = n(h, v[J], E));\n      }\n      return A;\n    }, a = function(h, v) {\n      v = v || {};\n      var E = v.separator || \"_\", A = v.split || /(?=[A-Z])/;\n      return h.split(A).join(E);\n    }, r = function(h) {\n      return y(h) ? h : (h = h.replace(/[\\-_\\s]+(.)?/g, function(v, E) {\n        return E ? E.toUpperCase() : \"\";\n      }), h.substr(0, 1).toLowerCase() + h.substr(1));\n    }, s = function(h) {\n      var v = r(h);\n      return v.substr(0, 1).toUpperCase() + v.substr(1);\n    }, i = function(h, v) {\n      return a(h, v).toLowerCase();\n    }, o = Object.prototype.toString, l = function(h) {\n      return typeof h == \"function\";\n    }, c = function(h) {\n      return h === Object(h);\n    }, d = function(h) {\n      return o.call(h) == \"[object Array]\";\n    }, u = function(h) {\n      return o.call(h) == \"[object Date]\";\n    }, g = function(h) {\n      return o.call(h) == \"[object RegExp]\";\n    }, D = function(h) {\n      return o.call(h) == \"[object Boolean]\";\n    }, y = function(h) {\n      return h = h - 0, h === h;\n    }, k = function(h, v) {\n      var E = v && \"process\" in v ? v.process : v;\n      return typeof E != \"function\" ? h : function(A, N) {\n        return E(A, h, N);\n      };\n    }, w = {\n      camelize: r,\n      decamelize: i,\n      pascalize: s,\n      depascalize: i,\n      camelizeKeys: function(h, v) {\n        return n(k(r, v), h);\n      },\n      decamelizeKeys: function(h, v) {\n        return n(k(i, v), h, v);\n      },\n      pascalizeKeys: function(h, v) {\n        return n(k(s, v), h);\n      },\n      depascalizeKeys: function() {\n        return this.decamelizeKeys.apply(this, arguments);\n      }\n    };\n    e.exports ? e.exports = w : t.humps = w;\n  })(Vi);\n})(Wa);\nvar xi = Wa.exports, qi = [\"class\", \"style\"];\nfunction Gi(e) {\n  return e.split(\";\").map(function(t) {\n    return t.trim();\n  }).filter(function(t) {\n    return t;\n  }).reduce(function(t, n) {\n    var a = n.indexOf(\":\"), r = xi.camelize(n.slice(0, a)), s = n.slice(a + 1).trim();\n    return t[r] = s, t;\n  }, {});\n}\nfunction Ki(e) {\n  return e.split(/\\s+/).reduce(function(t, n) {\n    return t[n] = !0, t;\n  }, {});\n}\nfunction an(e) {\n  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  if (typeof e == \"string\")\n    return e;\n  var a = (e.children || []).map(function(l) {\n    return an(l);\n  }), r = Object.keys(e.attributes || {}).reduce(function(l, c) {\n    var d = e.attributes[c];\n    switch (c) {\n      case \"class\":\n        l.class = Ki(d);\n        break;\n      case \"style\":\n        l.style = Gi(d);\n        break;\n      default:\n        l.attrs[c] = d;\n    }\n    return l;\n  }, {\n    attrs: {},\n    class: {},\n    style: {}\n  });\n  n.class;\n  var s = n.style, i = s === void 0 ? {} : s, o = zi(n, qi);\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(e.tag, ee(ee(ee({}, t), {}, {\n    class: r.class,\n    style: ee(ee({}, r.style), i)\n  }, r.attrs), o), a);\n}\nvar Ha = !1;\ntry {\n  Ha = \"development\" === \"production\";\n} catch {\n}\nfunction Qi() {\n  if (!Ha && console && typeof console.error == \"function\") {\n    var e;\n    (e = console).error.apply(e, arguments);\n  }\n}\nfunction ze(e, t) {\n  return Array.isArray(t) && t.length > 0 || !Array.isArray(t) && t ? B({}, e, t) : {};\n}\nfunction Ji(e) {\n  var t, n = (t = {\n    \"fa-spin\": e.spin,\n    \"fa-pulse\": e.pulse,\n    \"fa-fw\": e.fixedWidth,\n    \"fa-border\": e.border,\n    \"fa-li\": e.listItem,\n    \"fa-inverse\": e.inverse,\n    \"fa-flip\": e.flip === !0,\n    \"fa-flip-horizontal\": e.flip === \"horizontal\" || e.flip === \"both\",\n    \"fa-flip-vertical\": e.flip === \"vertical\" || e.flip === \"both\"\n  }, B(t, \"fa-\".concat(e.size), e.size !== null), B(t, \"fa-rotate-\".concat(e.rotation), e.rotation !== null), B(t, \"fa-pull-\".concat(e.pull), e.pull !== null), B(t, \"fa-swap-opacity\", e.swapOpacity), B(t, \"fa-bounce\", e.bounce), B(t, \"fa-shake\", e.shake), B(t, \"fa-beat\", e.beat), B(t, \"fa-fade\", e.fade), B(t, \"fa-beat-fade\", e.beatFade), B(t, \"fa-flash\", e.flash), B(t, \"fa-spin-pulse\", e.spinPulse), B(t, \"fa-spin-reverse\", e.spinReverse), t);\n  return Object.keys(n).map(function(a) {\n    return n[a] ? a : null;\n  }).filter(function(a) {\n    return a;\n  });\n}\nfunction zn(e) {\n  if (e && pt(e) === \"object\" && e.prefix && e.iconName && e.icon)\n    return e;\n  if (gt.icon)\n    return gt.icon(e);\n  if (e === null)\n    return null;\n  if (pt(e) === \"object\" && e.prefix && e.iconName)\n    return e;\n  if (Array.isArray(e) && e.length === 2)\n    return {\n      prefix: e[0],\n      iconName: e[1]\n    };\n  if (typeof e == \"string\")\n    return {\n      prefix: \"fas\",\n      iconName: e\n    };\n}\nvar Qe = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"FontAwesomeIcon\",\n  props: {\n    border: {\n      type: Boolean,\n      default: !1\n    },\n    fixedWidth: {\n      type: Boolean,\n      default: !1\n    },\n    flip: {\n      type: [Boolean, String],\n      default: !1,\n      validator: function(t) {\n        return [!0, !1, \"horizontal\", \"vertical\", \"both\"].indexOf(t) > -1;\n      }\n    },\n    icon: {\n      type: [Object, Array, String],\n      required: !0\n    },\n    mask: {\n      type: [Object, Array, String],\n      default: null\n    },\n    listItem: {\n      type: Boolean,\n      default: !1\n    },\n    pull: {\n      type: String,\n      default: null,\n      validator: function(t) {\n        return [\"right\", \"left\"].indexOf(t) > -1;\n      }\n    },\n    pulse: {\n      type: Boolean,\n      default: !1\n    },\n    rotation: {\n      type: [String, Number],\n      default: null,\n      validator: function(t) {\n        return [90, 180, 270].indexOf(Number.parseInt(t, 10)) > -1;\n      }\n    },\n    swapOpacity: {\n      type: Boolean,\n      default: !1\n    },\n    size: {\n      type: String,\n      default: null,\n      validator: function(t) {\n        return [\"2xs\", \"xs\", \"sm\", \"lg\", \"xl\", \"2xl\", \"1x\", \"2x\", \"3x\", \"4x\", \"5x\", \"6x\", \"7x\", \"8x\", \"9x\", \"10x\"].indexOf(t) > -1;\n      }\n    },\n    spin: {\n      type: Boolean,\n      default: !1\n    },\n    transform: {\n      type: [String, Object],\n      default: null\n    },\n    symbol: {\n      type: [Boolean, String],\n      default: !1\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    inverse: {\n      type: Boolean,\n      default: !1\n    },\n    bounce: {\n      type: Boolean,\n      default: !1\n    },\n    shake: {\n      type: Boolean,\n      default: !1\n    },\n    beat: {\n      type: Boolean,\n      default: !1\n    },\n    fade: {\n      type: Boolean,\n      default: !1\n    },\n    beatFade: {\n      type: Boolean,\n      default: !1\n    },\n    flash: {\n      type: Boolean,\n      default: !1\n    },\n    spinPulse: {\n      type: Boolean,\n      default: !1\n    },\n    spinReverse: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  setup: function(t, n) {\n    var a = n.attrs, r = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return zn(t.icon);\n    }), s = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return ze(\"classes\", Ji(t));\n    }), i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return ze(\"transform\", typeof t.transform == \"string\" ? gt.transform(t.transform) : t.transform);\n    }), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return ze(\"mask\", zn(t.mask));\n    }), l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return Wi(r.value, ee(ee(ee(ee({}, s.value), i.value), o.value), {}, {\n        symbol: t.symbol,\n        title: t.title\n      }));\n    });\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(l, function(d) {\n      if (!d)\n        return Qi(\"Could not find one or more icon(s)\", r.value, o.value);\n    }, {\n      immediate: !0\n    });\n    var c = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return l.value ? an(l.value.abstract[0], {}, a) : null;\n    });\n    return function() {\n      return c.value;\n    };\n  }\n});\n(0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"FontAwesomeLayers\",\n  props: {\n    fixedWidth: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  setup: function(t, n) {\n    var a = n.slots, r = Na.familyPrefix, s = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return [\"\".concat(r, \"-layers\")].concat(zt(t.fixedWidth ? [\"\".concat(r, \"-fw\")] : []));\n    });\n    return function() {\n      return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(\"div\", {\n        class: s.value\n      }, a.default ? a.default() : []);\n    };\n  }\n});\n(0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"FontAwesomeLayersText\",\n  props: {\n    value: {\n      type: [String, Number],\n      default: \"\"\n    },\n    transform: {\n      type: [String, Object],\n      default: null\n    },\n    counter: {\n      type: Boolean,\n      default: !1\n    },\n    position: {\n      type: String,\n      default: null,\n      validator: function(t) {\n        return [\"bottom-left\", \"bottom-right\", \"top-left\", \"top-right\"].indexOf(t) > -1;\n      }\n    }\n  },\n  setup: function(t, n) {\n    var a = n.attrs, r = Na.familyPrefix, s = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return ze(\"classes\", [].concat(zt(t.counter ? [\"\".concat(r, \"-layers-counter\")] : []), zt(t.position ? [\"\".concat(r, \"-layers-\").concat(t.position)] : [])));\n    }), i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return ze(\"transform\", typeof t.transform == \"string\" ? gt.transform(t.transform) : t.transform);\n    }), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      var c = Hi(t.value.toString(), ee(ee({}, i.value), s.value)), d = c.abstract;\n      return t.counter && (d[0].attributes.class = d[0].attributes.class.replace(\"fa-layers-text\", \"\")), d[0];\n    }), l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function() {\n      return an(o.value, {}, a);\n    });\n    return function() {\n      return l.value;\n    };\n  }\n});\nvar Zi = {\n  prefix: \"fas\",\n  iconName: \"circle-chevron-right\",\n  icon: [512, 512, [\"chevron-circle-right\"], \"f138\", \"M0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM241 377c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l87-87-87-87c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L345 239c9.4 9.4 9.4 24.6 0 33.9L241 377z\"]\n}, es = Zi, ts = {\n  prefix: \"fas\",\n  iconName: \"user\",\n  icon: [448, 512, [128100, 62144], \"f007\", \"M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z\"]\n}, ns = {\n  prefix: \"fas\",\n  iconName: \"circle-question\",\n  icon: [512, 512, [62108, \"question-circle\"], \"f059\", \"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"]\n}, as = ns, rs = {\n  prefix: \"fas\",\n  iconName: \"comment\",\n  icon: [512, 512, [128489, 61669], \"f075\", \"M512 240c0 114.9-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4l0 0 0 0 0 0 0 0 .3-.3c.3-.3 .7-.7 1.3-1.4c1.1-1.2 2.8-3.1 4.9-5.7c4.1-5 9.6-12.4 15.2-21.6c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208z\"]\n}, is = {\n  prefix: \"fas\",\n  iconName: \"clock\",\n  icon: [512, 512, [128339, \"clock-four\"], \"f017\", \"M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\"]\n}, ss = {\n  prefix: \"fas\",\n  iconName: \"location-dot\",\n  icon: [384, 512, [\"map-marker-alt\"], \"f3c5\", \"M215.7 499.2C267 435 384 279.4 384 192C384 86 298 0 192 0S0 86 0 192c0 87.4 117 243 168.3 307.2c12.3 15.3 35.1 15.3 47.4 0zM192 128a64 64 0 1 1 0 128 64 64 0 1 1 0-128z\"]\n}, rn = ss, os = {\n  prefix: \"fas\",\n  iconName: \"xmark\",\n  icon: [320, 512, [128473, 10005, 10006, 10060, 215, \"close\", \"multiply\", \"remove\", \"times\"], \"f00d\", \"M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z\"]\n}, Ya = os, ls = {\n  prefix: \"fas\",\n  iconName: \"chevron-left\",\n  icon: [320, 512, [9001], \"f053\", \"M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z\"]\n}, cs = {\n  prefix: \"fas\",\n  iconName: \"chevron-right\",\n  icon: [320, 512, [9002], \"f054\", \"M310.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L242.7 256 73.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z\"]\n}, ds = {\n  prefix: \"fas\",\n  iconName: \"circle-chevron-left\",\n  icon: [512, 512, [\"chevron-circle-left\"], \"f137\", \"M512 256A256 256 0 1 0 0 256a256 256 0 1 0 512 0zM271 135c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-87 87 87 87c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L167 273c-9.4-9.4-9.4-24.6 0-33.9L271 135z\"]\n}, us = ds, fs = {\n  prefix: \"fas\",\n  iconName: \"calendar-day\",\n  icon: [448, 512, [], \"f783\", \"M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z\"]\n};\nconst ms = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"DatePicker\",\n  components: { FontAwesomeIcon: Qe },\n  props: {\n    mode: {\n      type: String,\n      default: \"week\"\n    },\n    timeProp: {\n      type: Object,\n      default: null\n    },\n    periodProp: {\n      type: Object,\n      default: null\n    },\n    firstDayOfWeek: {\n      type: String,\n      default: \"\"\n    },\n    defaultDate: {\n      type: Date,\n      default: /* @__PURE__ */ new Date()\n    },\n    /** For usage of the component as a stand-alone component, outside Qalendar */\n    locale: {\n      type: String,\n      default: \"\"\n    },\n    disableDates: {\n      type: Object,\n      default: null\n    }\n    /** End of props for stand-alone component  */\n  },\n  emits: [\"updated\"],\n  data() {\n    var e, t;\n    return {\n      periodText: \"\",\n      weekPickerDates: [],\n      monthPickerDates: [],\n      icons: {\n        calendarIcon: fs,\n        chevronLeft: us,\n        chevronRight: es\n      },\n      showDatePicker: !!(this.locale && this.firstDayOfWeek),\n      // Set to automatic show, when used as a standalone component\n      /**\n       * Though selectedDate might look identical to datePickerCurrentDate, it is not\n       * There is a need for separate state for:\n       * 1. (datePickerCurrentDate) the current date governing what to show in the week picker.\n       * This changes as the user browses between weeks, months and years\n       *\n       * 2. (selectedDate) the selected date of the entire calendar.\n       * This should not change as the user browses in the date picker, only when the user\n       * PICKS a date in the date picker\n       * */\n      datePickerCurrentDate: ((e = this.periodProp) == null ? void 0 : e.selectedDate) || this.defaultDate || /* @__PURE__ */ new Date(),\n      selectedDate: ((t = this.periodProp) == null ? void 0 : t.selectedDate) || /* @__PURE__ */ new Date(),\n      datePickerMode: \"month\",\n      weekDays: [],\n      // Used only for printing week day names,\n      time: this.timeProp ? this.timeProp : new se(this.firstDayOfWeek, this.locale),\n      period: this.periodProp || {\n        start: /* @__PURE__ */ new Date(),\n        end: /* @__PURE__ */ new Date(),\n        selectedDate: this.defaultDate ? this.defaultDate : /* @__PURE__ */ new Date()\n      }\n    };\n  },\n  computed: {\n    /**\n     * If both following props are set, this means the component is being used as a stand alone component\n     * and not inside Qalendar\n     * */\n    isStandAloneComponent() {\n      return this.locale && this.firstDayOfWeek;\n    }\n  },\n  mounted() {\n    this.hydrateDatePicker();\n  },\n  methods: {\n    setMonthDaysInWeekPicker(e = (/* @__PURE__ */ new Date()).getMonth(), t = (/* @__PURE__ */ new Date()).getFullYear()) {\n      this.weekPickerDates = [], this.weekPickerDates = this.time.getCalendarMonthSplitInWeeks(\n        t,\n        e\n      );\n    },\n    togglePeriodSelector() {\n      this.weekPickerDates = this.time.getCalendarMonthSplitInWeeks(\n        this.datePickerCurrentDate.getFullYear(),\n        this.datePickerCurrentDate.getMonth()\n      ), this.showDatePicker = !this.showDatePicker;\n    },\n    setWeek(e, t = !1) {\n      t || (this.datePickerCurrentDate = e);\n      const n = this.time.getCalendarWeekDateObjects(e);\n      this.weekDays = n;\n      const a = n[0], r = n[6];\n      switch (this.mode) {\n        case \"week\":\n          this.periodText = `${this.time.getLocalizedDateString(\n            a\n          )} - ${this.time.getLocalizedDateString(r)}`;\n          break;\n        case \"month\":\n          this.periodText = this.time.getLocalizedNameOfMonth(e);\n          break;\n        default:\n          this.periodText = this.time.getLocalizedDateString(e);\n      }\n      t || this.emitChange(a, r);\n    },\n    setMonth(e) {\n      this.datePickerCurrentDate = e, this.setMonthDaysInWeekPicker(e.getMonth(), e.getFullYear()), this.datePickerMode = \"month\", this.showDatePicker = !0;\n    },\n    emitChange(e, t) {\n      if (this.selectedDate = this.datePickerCurrentDate, this.mode === \"month\") {\n        const n = this.time.getCalendarMonthSplitInWeeks(\n          this.selectedDate.getFullYear(),\n          this.selectedDate.getMonth()\n        );\n        e = n[0][0];\n        const a = n[n.length - 1];\n        t = a[a.length - 1];\n      } else\n        this.mode === \"day\" && (e = this.selectedDate, t = this.selectedDate);\n      this.isStandAloneComponent ? this.$emit(\"updated\", {\n        year: this.datePickerCurrentDate.getFullYear(),\n        month: this.datePickerCurrentDate.getMonth(),\n        date: this.datePickerCurrentDate.getDate()\n      }) : this.$emit(\"updated\", {\n        start: new Date(\n          e.getFullYear(),\n          e.getMonth(),\n          e.getDate(),\n          0,\n          0,\n          0\n        ),\n        end: this.time.setDateToEndOfDay(t),\n        selectedDate: this.datePickerCurrentDate\n      });\n    },\n    toggleDatePickerPeriod(e) {\n      const t = new Date(this.datePickerCurrentDate);\n      if (this.datePickerMode === \"month\") {\n        const n = new Date(\n          t.getFullYear(),\n          e === \"previous\" ? t.getMonth() - 1 : t.getMonth() + 1,\n          1\n        );\n        this.setMonthDaysInWeekPicker(\n          n.getMonth(),\n          n.getFullYear()\n        ), this.datePickerCurrentDate = n;\n      } else\n        this.monthPickerDates = this.time.getCalendarYearMonths(\n          e === \"previous\" ? t.getFullYear() - 1 : t.getFullYear() + 1\n        ), this.datePickerCurrentDate = new Date(this.monthPickerDates[0]);\n    },\n    toggleDatePickerMode() {\n      if (this.datePickerMode === \"month\")\n        return this.monthPickerDates = this.time.getCalendarYearMonths(\n          this.datePickerCurrentDate.getFullYear()\n        ), this.datePickerMode = \"year\";\n      this.weekPickerDates = this.time.getCalendarMonthSplitInWeeks(\n        this.datePickerCurrentDate.getFullYear(),\n        this.datePickerCurrentDate.getMonth()\n      ), this.datePickerMode = \"month\";\n    },\n    getLocale() {\n      return this.time.CALENDAR_LOCALE;\n    },\n    goToPeriod(e) {\n      let t, n;\n      if (this.mode === \"week\") {\n        const a = this.time.getCalendarWeekDateObjects(\n          this.datePickerCurrentDate\n        );\n        t = new Date(a[0]), n = e === \"next\" ? t.getDate() + 7 : t.getDate() - 7, t.setDate(n);\n      } else\n        this.mode === \"month\" ? (t = new Date(this.datePickerCurrentDate), t.setMonth(\n          e === \"next\" ? t.getMonth() + 1 : t.getMonth() - 1\n        ), t.setDate(1)) : (t = new Date(this.datePickerCurrentDate), n = e === \"next\" ? t.getDate() + 1 : t.getDate() - 1, t.setDate(n));\n      this.setWeek(t);\n    },\n    hideDatePicker() {\n      this.isStandAloneComponent || setTimeout(() => this.showDatePicker = !1, 100);\n    },\n    hydrateDatePicker() {\n      const e = this.datePickerCurrentDate;\n      this.setMonthDaysInWeekPicker(e.getMonth(), e.getFullYear()), this.setWeek(e, !0);\n    },\n    checkIfDateIsDisabled(e) {\n      return this.disableDates ? e.getTime() < this.disableDates.before.getTime() ? !0 : e.getTime() > this.disableDates.after.getTime() : !1;\n    }\n  }\n});\nconst j = (e, t) => {\n  const n = e.__vccOpts || e;\n  for (const [a, r] of t)\n    n[a] = r;\n  return n;\n}, hs = { class: \"date-picker__value-display-text\" }, vs = { class: \"date-picker__week-picker-navigation\" }, gs = {\n  key: 0,\n  class: \"date-picker__day-names week\"\n}, ps = [\"onClick\"], ys = { class: \"months\" }, bs = [\"onClick\"];\nfunction Ds(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"font-awesome-icon\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"date-picker\", e.isStandAloneComponent ? \"date-picker-root\" : \"is-in-qalendar\"]),\n    onMouseleave: t[5] || (t[5] = (...o) => e.hideDatePicker && e.hideDatePicker(...o))\n  }, [\n    e.isStandAloneComponent ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 0,\n      class: \"date-picker__value-display\",\n      onClick: t[0] || (t[0] = (...o) => e.togglePeriodSelector && e.togglePeriodSelector(...o))\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n        icon: e.icons.calendarIcon\n      }, null, 8, [\"icon\"]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", hs, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.periodText), 1)\n    ])),\n    e.showDatePicker ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 1,\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"date-picker__week-picker\", { \"is-in-qalendar\": !e.isStandAloneComponent }]),\n      onMouseleave: t[4] || (t[4] = (...o) => e.hideDatePicker && e.hideDatePicker(...o))\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", vs, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          class: \"is-icon is-chevron-left\",\n          icon: e.icons.chevronLeft,\n          onClick: t[1] || (t[1] = (o) => e.toggleDatePickerPeriod(\"previous\"))\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n          class: \"date-picker__toggle-mode\",\n          onClick: t[2] || (t[2] = (...o) => e.toggleDatePickerMode && e.toggleDatePickerMode(...o))\n        }, [\n          e.datePickerMode === \"month\" ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 0 }, [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.datePickerCurrentDate.toLocaleString(e.getLocale(), {\n              month: \"long\",\n              year: \"numeric\"\n            })), 1)\n          ], 64)) : e.datePickerMode === \"year\" ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 1 }, [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(new Date(e.datePickerCurrentDate).toLocaleString(e.getLocale(), {\n              year: \"numeric\"\n            })), 1)\n          ], 64)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n        ]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          class: \"is-icon is-chevron-right\",\n          icon: e.icons.chevronRight,\n          onClick: t[3] || (t[3] = (o) => e.toggleDatePickerPeriod(\"next\"))\n        }, null, 8, [\"icon\"])\n      ]),\n      e.datePickerMode === \"month\" ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", gs, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.weekDays, (o) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", {\n          key: o.getDate()\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.time.getLocalizedNameOfWeekday(o, \"short\")), 1))), 128))\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.weekPickerDates, (o, l) => (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n        key: l,\n        class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\n          \"week\",\n          e.time.dateIsInWeek(e.selectedDate, o) && !e.isStandAloneComponent ? \"is-active\" : \"\"\n        ])\n      }, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(o, (c, d) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", {\n          key: l + d,\n          class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)({\n            \"is-weekend\": [5, 6].includes(d),\n            \"is-not-in-month\": c.getMonth() !== e.datePickerCurrentDate.getMonth(),\n            \"has-day\": c,\n            \"is-today\": e.time.dateIsToday(c),\n            \"is-disabled\": e.checkIfDateIsDisabled(c)\n          }),\n          onClick: (u) => e.checkIfDateIsDisabled(c) ? null : e.setWeek(c)\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(c ? c.getDate() : \"\"), 11, ps))), 128))\n      ], 2)), [\n        [vue__WEBPACK_IMPORTED_MODULE_0__.vShow, e.datePickerMode === \"month\"]\n      ])), 128)),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", ys, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.monthPickerDates, (o, l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", {\n          key: l,\n          class: \"has-month\",\n          onClick: (c) => e.setMonth(o)\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(new Date(o).toLocaleString(e.getLocale(), { month: \"long\" })), 9, bs))), 128))\n      ], 512), [\n        [vue__WEBPACK_IMPORTED_MODULE_0__.vShow, e.datePickerMode === \"year\"]\n      ])\n    ], 34)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n  ], 34);\n}\nconst ks = /* @__PURE__ */ j(ms, [[\"render\", Ds], [\"__scopeId\", \"data-v-67f77862\"]]), ws = {\n  /** The following three keys, describe the calendar modes */\n  week: {\n    \"it-IT\": \"Settimana\",\n    \"en-US\": \"Week\",\n    \"de-DE\": \"Woche\",\n    \"sv-SE\": \"Vecka\",\n    \"zh-CN\": \"周\",\n    \"pt-BR\": \"Semana\",\n    \"fr-FR\": \"Semaine\",\n    \"th-TH\": \"สัปดาห์\",\n    \"nl-NL\": \"Week\",\n    \"ru-RU\": \"Неделя\",\n    \"ar-YE\": \"إسبوع\",\n    \"es-ES\": \"Semana\",\n    \"ja-JP\": \"週\",\n    \"pl-PL\": \"Tydzień\",\n    \"hu-HU\": \"Hét\"\n  },\n  month: {\n    \"it-IT\": \"Mese\",\n    \"en-US\": \"Month\",\n    \"de-DE\": \"Monat\",\n    \"sv-SE\": \"Månad\",\n    \"zh-CN\": \"月\",\n    \"pt-BR\": \"Mês\",\n    \"fr-FR\": \"Mois\",\n    \"th-TH\": \"เดือน\",\n    \"nl-NL\": \"Maand\",\n    \"ru-RU\": \"Месяц\",\n    \"ar-YE\": \"شهر\",\n    \"es-ES\": \"Mes\",\n    \"ja-JP\": \"月\",\n    \"pl-PL\": \"Miesiąc\",\n    \"hu-HU\": \"Hónap\"\n  },\n  day: {\n    \"it-IT\": \"Giorno\",\n    \"en-US\": \"Day\",\n    \"de-DE\": \"Tag\",\n    \"sv-SE\": \"Dag\",\n    \"zh-CN\": \"日\",\n    \"pt-BR\": \"Dia\",\n    \"fr-FR\": \"Jour\",\n    \"th-TH\": \"วัน\",\n    \"nl-NL\": \"Dag\",\n    \"ru-RU\": \"День\",\n    \"ar-YE\": \"يوم\",\n    \"es-ES\": \"Día\",\n    \"ja-JP\": \"日\",\n    \"pl-PL\": \"Dzień\",\n    \"hu-HU\": \"Nap\"\n  },\n  /** Other keys */\n  moreEvents: {\n    \"it-IT\": \"+ altri eventi\",\n    \"en-US\": \"+ more events\",\n    \"de-DE\": \"+ weitere Ereignisse\",\n    \"sv-SE\": \"+ fler event\",\n    \"zh-CN\": \"列出其他结果\",\n    \"pt-BR\": \"+ mais eventos\",\n    \"fr-FR\": \"+ d'autres événements\",\n    \"th-TH\": \"+ เหตุการณ์เพิ่มเติม\",\n    \"nl-NL\": \"meer evenementen\",\n    \"ru-RU\": \"+ ещё события\",\n    \"ar-YE\": \"+ المزيد من الأحداث\",\n    \"es-ES\": \"más eventos\",\n    \"ja-JP\": \"その他イベント\",\n    \"pl-PL\": \"+ więcej wydarzeń\",\n    \"hu-HU\": \"További események\"\n  },\n  noEvent: {\n    \"it-IT\": \"Nessun evento\",\n    \"en-US\": \"No events\",\n    \"de-DE\": \"Keine Ereignisse\",\n    \"sv-SE\": \"Inga event\",\n    \"zh-CN\": \"沒有活動\",\n    \"pt-BR\": \"Sem eventos\",\n    \"fr-FR\": \"Aucun Evènement\",\n    \"th-TH\": \"ไม่มีกิจกรรม\",\n    \"nl-NL\": \"Geen evenementen\",\n    \"ru-RU\": \"Нет событий\",\n    \"ar-YE\": \"لا أحداث\",\n    \"es-ES\": \"No hay eventos\",\n    \"ja-JP\": \"イベントなし\",\n    \"pl-PL\": \"Brak wydarzeń\",\n    \"hu-HU\": \"Nincs esemény\"\n  }\n}, jn = /* @__PURE__ */ new Map([\n  [\"de\", \"de-DE\"],\n  [\"en\", \"en-US\"],\n  [\"it\", \"it-IT\"],\n  [\"sv\", \"sv-SE\"],\n  [\"zh\", \"zh-CN\"],\n  [\"pt\", \"pt-BR\"],\n  [\"fr\", \"fr-FR\"],\n  [\"th\", \"th-TH\"],\n  [\"nl\", \"nl-NL\"],\n  [\"ru\", \"ru-RU\"],\n  [\"ar\", \"ar-YE\"],\n  [\"es\", \"es-ES\"],\n  [\"ja\", \"ja-JP\"],\n  [\"pl\", \"pl-PL\"],\n  [\"hu\", \"hu-HU\"]\n]), sn = {\n  data() {\n    return {\n      languageKeys: ws\n    };\n  },\n  methods: {\n    getLanguage(e, t) {\n      return t = this.overrideShortLocaleWithLongLocale(t), e[t] ? e[t] : e[\"en-US\"];\n    },\n    overrideShortLocaleWithLongLocale(e) {\n      return jn.has(e) && (e = jn.get(e)), e;\n    }\n  }\n}, Es = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"AppHeader\",\n  components: {\n    DatePicker: ks,\n    FontAwesomeIcon: Qe\n  },\n  mixins: [sn],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    mode: {\n      type: String,\n      default: \"week\"\n    },\n    time: {\n      type: Object,\n      default: () => ({})\n    },\n    period: {\n      type: Object,\n      required: !0\n    },\n    isSmall: {\n      type: Boolean,\n      required: !0\n    }\n  },\n  emits: [\"change-mode\", \"updated-period\"],\n  data() {\n    return {\n      modeOptions: [\"month\", \"week\", \"day\"],\n      icons: {\n        chevronLeft: ls,\n        chevronRight: cs\n      },\n      currentPeriod: this.period,\n      showModePicker: !1\n    };\n  },\n  computed: {\n    periodName() {\n      var e, t, n;\n      if (this.mode === \"week\") {\n        const a = this.time.getLocalizedNameOfMonth(\n          (e = this.currentPeriod) == null ? void 0 : e.start,\n          \"short\"\n        ), r = this.time.getLocalizedNameOfMonth(\n          (t = this.currentPeriod) == null ? void 0 : t.end,\n          \"short\"\n        );\n        return a === r ? a : `${a} - ${r}`;\n      }\n      return this.time.getLocalizedNameOfMonth(\n        (n = this.currentPeriod) == null ? void 0 : n.selectedDate,\n        \"short\"\n      ) + \" \" + this.currentPeriod.selectedDate.getFullYear();\n    },\n    modeName() {\n      var e;\n      return this.getLanguage(\n        this.languageKeys[this.mode],\n        (e = this.time) == null ? void 0 : e.CALENDAR_LOCALE\n      );\n    },\n    onlyDayModeIsEnabled() {\n      var n, a;\n      const e = (n = this.config.disableModes) == null ? void 0 : n.includes(\"week\"), t = (a = this.config.disableModes) == null ? void 0 : a.includes(\"month\");\n      return this.config.disableModes && e && t;\n    }\n  },\n  watch: {\n    isSmall: {\n      handler(e) {\n        e ? this.modeOptions = [\"month\", \"day\"] : this.modeOptions = [\"month\", \"week\", \"day\"];\n      },\n      immediate: !0\n    }\n  },\n  methods: {\n    handlePeriodChange(e) {\n      this.currentPeriod = e, this.$emit(\"updated-period\", e);\n    },\n    goToPeriod(e) {\n      this.$refs.periodSelect.goToPeriod(e);\n    }\n  }\n});\nconst Ss = { class: \"calendar-header\" }, Ts = {\n  key: 0,\n  class: \"calendar-header__period-name\"\n}, Cs = { class: \"calendar-header__period\" }, As = { class: \"calendar-header__chevron-arrows\" }, _s = {\n  key: 0,\n  class: \"calendar-header__mode-picker\"\n}, Ms = [\"onClick\"];\nfunction Ps(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"FontAwesomeIcon\"), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"DatePicker\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Ss, [\n    e.periodName ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Ts, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.periodName), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Cs, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", As, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          class: \"calendar-header__chevron-arrow calendar-header__chevron-arrow-left\",\n          icon: e.icons.chevronLeft,\n          onClick: t[0] || (t[0] = (l) => e.goToPeriod(\"previous\"))\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          class: \"calendar-header__chevron-arrow calendar-header__chevron-arrow-right\",\n          icon: e.icons.chevronRight,\n          onClick: t[1] || (t[1] = (l) => e.goToPeriod(\"next\"))\n        }, null, 8, [\"icon\"])\n      ]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(o, {\n        ref: \"periodSelect\",\n        mode: e.mode,\n        \"time-prop\": e.time,\n        \"period-prop\": e.period,\n        onUpdated: e.handlePeriodChange\n      }, null, 8, [\"mode\", \"time-prop\", \"period-prop\", \"onUpdated\"]),\n      e.onlyDayModeIsEnabled ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _s, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n          class: \"calendar-header__mode-value\",\n          onClick: t[2] || (t[2] = (l) => e.showModePicker = !0)\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.modeName), 1),\n        e.showModePicker ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n          key: 0,\n          class: \"calendar-header__mode-options\",\n          onMouseleave: t[3] || (t[3] = (l) => e.showModePicker = !1)\n        }, [\n          ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.modeOptions, (l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: l }, [\n            !e.config.disableModes || !e.config.disableModes.includes(l) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n              key: 0,\n              class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-header__mode-option\", \"is-\" + l + \"-mode\"]),\n              onClick: (c) => e.$emit(\"change-mode\", l)\n            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getLanguage(e.languageKeys[l], e.time.CALENDAR_LOCALE)), 11, Ms)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n          ], 64))), 128))\n        ], 32)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n      ]))\n    ])\n  ]);\n}\nconst Ls = /* @__PURE__ */ j(Es, [[\"render\", Ps], [\"__scopeId\", \"data-v-37f1c389\"]]), on = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"DayTimeline\",\n  props: {\n    time: {\n      type: Object,\n      required: !0\n    },\n    weekHeight: {\n      type: String,\n      required: !0\n    }\n  },\n  data() {\n    return {\n      availableHours: [\n        0,\n        100,\n        200,\n        300,\n        400,\n        500,\n        600,\n        700,\n        800,\n        900,\n        1e3,\n        1100,\n        1200,\n        1300,\n        1400,\n        1500,\n        1600,\n        1700,\n        1800,\n        1900,\n        2e3,\n        2100,\n        2200,\n        2300\n      ],\n      timelineHours: []\n    };\n  },\n  mounted() {\n    this.timelineHours = this.time.getTimelineHours();\n  },\n  methods: {\n    getLocaleTimeString(e) {\n      const { hour: t } = this.time.getHourAndMinutesFromTimePoints(e);\n      return this.time.getLocalizedHour(new Date(2100, 1, 1, t));\n    }\n  }\n}), Bn = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"11371d19\": e.weekHeight\n  }));\n}, Un = on.setup;\non.setup = Un ? (e, t) => (Bn(), Un(e, t)) : Bn;\nconst Is = { class: \"day-timeline\" }, Os = { class: \"day-timeline__hour-text\" };\nfunction $s(e, t, n, a, r, s) {\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Is, [\n    ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.timelineHours, (i) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: i,\n      class: \"day-timeline__hour\"\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", Os, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getLocaleTimeString(i)), 1)\n    ]))), 128))\n  ]);\n}\nconst Fs = /* @__PURE__ */ j(on, [[\"render\", $s], [\"__scopeId\", \"data-v-014bf4e0\"]]), Rs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"FullDayEvent\",\n  props: {\n    scheduleEvent: {\n      type: Object,\n      default: null\n    },\n    config: {\n      type: Object,\n      required: !0\n    },\n    mode: {\n      type: String,\n      required: !0\n    }\n  },\n  emits: [\"event-was-clicked\"],\n  data() {\n    return {\n      colors: xe,\n      eventColor: \"#fff\",\n      eventBackgroundColor: \"\",\n      eventElementIdPrefix: \"week-timeline__event-id-\"\n    };\n  },\n  computed: {\n    eventWidth() {\n      return this.mode !== \"day\" ? `calc(${this.scheduleEvent.nDays * 100}% - 6px)` : \"calc(100% - 6px)\";\n    }\n  },\n  mounted() {\n    this.setColors();\n  },\n  methods: {\n    setColors() {\n      var e, t, n;\n      return (e = this.scheduleEvent) != null && e.colorScheme && ((t = this.config.style) != null && t.colorSchemes) && this.config.style.colorSchemes[this.scheduleEvent.colorScheme] ? (this.eventColor = this.config.style.colorSchemes[this.scheduleEvent.colorScheme].color, this.eventBackgroundColor = this.config.style.colorSchemes[this.scheduleEvent.colorScheme].backgroundColor) : (n = this.scheduleEvent) != null && n.color ? (this.eventColor = \"#fff\", this.eventBackgroundColor = this.colors[this.scheduleEvent.color]) : this.eventBackgroundColor = this.colors.blue;\n    },\n    handleClickOnEvent() {\n      const e = document.getElementById(\n        this.eventElementIdPrefix + this.scheduleEvent.id\n      );\n      this.$emit(\"event-was-clicked\", {\n        clickedEvent: this.scheduleEvent,\n        eventElement: e\n      });\n    }\n  }\n});\nconst Ns = [\"id\"], Ws = {\n  key: 1,\n  class: \"week-timeline__event\"\n};\nfunction Hs(e, t, n, a, r, s) {\n  return e.scheduleEvent ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    key: 0,\n    id: `${e.eventElementIdPrefix}${e.scheduleEvent.id}`,\n    class: \"week-timeline__event is-event\",\n    style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({\n      width: e.eventWidth,\n      color: e.eventColor,\n      backgroundColor: e.eventBackgroundColor,\n      zIndex: 1\n    }),\n    onClick: t[0] || (t[0] = (...i) => e.handleClickOnEvent && e.handleClickOnEvent(...i))\n  }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.scheduleEvent.title), 13, Ns)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Ws));\n}\nconst Ys = /* @__PURE__ */ j(Rs, [[\"render\", Hs], [\"__scopeId\", \"data-v-778d59fc\"]]), zs = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"WeekTimeline\",\n  components: { FullDayEvent: Ys },\n  props: {\n    days: {\n      type: Array,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    fullDayEvents: {\n      type: Array,\n      default: () => []\n    },\n    config: {\n      type: Object,\n      required: !0\n    },\n    mode: {\n      type: String,\n      required: !0\n    }\n  },\n  emits: [\"event-was-clicked\", \"day-was-clicked\"],\n  data() {\n    return {\n      now: /* @__PURE__ */ new Date()\n    };\n  },\n  methods: {\n    getDaysDate(e) {\n      const { date: t } = this.time.getAllVariablesFromDateTimeString(\n        e.dateTimeString\n      );\n      return t;\n    }\n  }\n});\nconst js = { class: \"week-timeline\" }, Bs = [\"onClick\"], Us = { class: \"week-timeline__day-name\" }, Xs = { class: \"week-timeline__date\" }, Vs = { class: \"week-timeline__events\" };\nfunction xs(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"FullDayEvent\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", js, [\n    ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.days, (o, l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: l,\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"week-timeline__day\", {\n        \"is-today\": e.time.getDateTimeStringFromDate(e.now, \"start\") === o.dateTimeString\n      }]),\n      onClick: (c) => e.$emit(\"day-was-clicked\", e.time.dateStringFrom(o.dateTimeString))\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Us, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(o.dayName.substring(0, 2).toUpperCase()), 1),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Xs, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getDaysDate(o)), 1),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Vs, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(o.fullDayEvents, (c, d) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: d }, [\n          d !== \"date\" ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n            key: 0,\n            \"schedule-event\": typeof c == \"object\" ? c : null,\n            config: e.config,\n            mode: e.mode,\n            onEventWasClicked: t[0] || (t[0] = (u) => e.$emit(\"event-was-clicked\", u))\n          }, null, 8, [\"schedule-event\", \"config\", \"mode\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n        ], 64))), 128))\n      ])\n    ], 10, Bs))), 128))\n  ]);\n}\nconst qs = /* @__PURE__ */ j(zs, [[\"render\", xs], [\"__scopeId\", \"data-v-a43746b6\"]]);\nvar oe = /* @__PURE__ */ ((e) => (e.BACKWARDS = \"backwards\", e.FORWARDS = \"forwards\", e))(oe || {});\nclass Gs {\n  constructor(t, n) {\n    F(this, \"dayStart\", \"\");\n    F(this, \"dayEnd\", \"\");\n    this.timeInstance = t, this.date = n, this.setDayBoundariesTimeStrings();\n  }\n  canEventBeMoved(t, n) {\n    return this.timeInstance.dayMode !== q.FLEXIBLE ? this.handleNonFlexibleDays(n, t) : this.handleFlexibleDays(n, t);\n  }\n  handleNonFlexibleDays(t, n) {\n    return t === oe.FORWARDS ? this.handleForwardsMoveForNonFlexibleDays(n) : this.handleBackwardsMoveForNonFlexibleDays(n);\n  }\n  handleFlexibleDays(t, n) {\n    return t == oe.FORWARDS ? this.handleForwardsMoveForFlexibleDays(n) : this.handleBackwardsMoveForFlexibleDays(n);\n  }\n  handleForwardsMoveForNonFlexibleDays(t) {\n    const n = this.timeInstance.addMinutesToDateTimeString(15, t.time.end), a = this.timeInstance.timeStringFrom(n);\n    return this.timeInstance.dateStringFrom(n) > this.date ? !1 : a <= this.dayEnd;\n  }\n  handleBackwardsMoveForNonFlexibleDays(t) {\n    const n = this.timeInstance.addMinutesToDateTimeString(-15, t.time.start), a = this.timeInstance.timeStringFrom(n);\n    return this.timeInstance.dateStringFrom(n) < this.date ? !1 : a >= this.dayStart;\n  }\n  handleForwardsMoveForFlexibleDays(t) {\n    const n = this.timeInstance.addMinutesToDateTimeString(15, t.time.end), a = this.timeInstance.timeStringFrom(n);\n    return this.timeInstance.dateStringFrom(n) === this.date ? !0 : a <= this.dayEnd;\n  }\n  handleBackwardsMoveForFlexibleDays(t) {\n    const n = this.timeInstance.addMinutesToDateTimeString(-15, t.time.start), a = this.timeInstance.timeStringFrom(n);\n    return this.timeInstance.dateStringFrom(n) > this.date ? !0 : a >= this.dayStart;\n  }\n  setDayBoundariesTimeStrings() {\n    const t = this.timeInstance.getHourAndMinutesFromTimePoints(this.timeInstance.DAY_START).hour, n = this.timeInstance.getHourAndMinutesFromTimePoints(this.timeInstance.DAY_END).hour, a = this.timeInstance.doubleDigit(t);\n    this.dayStart = `${a}:00`;\n    const r = this.timeInstance.doubleDigit(n);\n    this.dayEnd = `${r}:00`;\n  }\n}\nconst Ks = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"DayEvent\",\n  components: {\n    FontAwesomeIcon: Qe\n  },\n  props: {\n    eventProp: {\n      type: Object,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    config: {\n      type: Object,\n      required: !0\n    },\n    dayInfo: {\n      type: Object,\n      required: !0\n    },\n    mode: {\n      type: String,\n      required: !0\n    }\n  },\n  emits: [\"event-was-clicked\", \"event-was-resized\", \"event-was-dragged\", \"drag-start\", \"drag-end\"],\n  data() {\n    return {\n      event: this.eventProp,\n      icons: {\n        clock: is,\n        user: ts,\n        description: rs,\n        location: rn,\n        topic: as\n      },\n      showResizeElements: !1,\n      eventTransformValue: \"initial\",\n      eventZIndexValue: \"initial\",\n      dayElement: document.querySelector(\".calendar-week__day\"),\n      dayBoundariesDateTimeStrings: this.time.getDateTimeStringDayBoundariesFrom(this.dayInfo.dateTimeString),\n      // Resizing events\n      resizingStartingPoint: void 0,\n      resizingStartingPointEndOfTime: this.eventProp.time.end,\n      resizingStartingPointStartOfTime: this.eventProp.time.start,\n      resizingDirection: \"\",\n      changeInQuarterHoursEventStart: 0,\n      changeInQuarterHoursEventEnd: 0,\n      isEditable: this.eventProp.isEditable || !1,\n      colors: xe,\n      eventColor: \"#fff\",\n      eventBackgroundColor: \"\",\n      isResizing: !1,\n      // Dragging events\n      canDrag: !1,\n      // set to true on mousedown and false on mouseup\n      clientYDragStart: null,\n      clientXDragStart: null,\n      changeInQuartersOnDrag: 0,\n      changeInDaysOnDrag: 0,\n      isDragging: !1,\n      timeStartDragStart: this.eventProp.time.start,\n      timeEndDragStart: this.eventProp.time.end,\n      dragMoveListenerNameAndCallbacks: [\n        [\"mousemove\", this.handleDrag],\n        [\"touchmove\", this.handleDrag],\n        [\"mouseup\", this.onMouseUpWhenDragging],\n        [\"touchend\", this.onMouseUpWhenDragging]\n      ]\n    };\n  },\n  computed: {\n    eventChangeHelper() {\n      const e = this.time.addDaysToDateTimeString(this.changeInDaysOnDrag, this.dayInfo.dateTimeString);\n      return new Gs(this.time, this.time.dateStringFrom(e));\n    },\n    isCustomEvent() {\n      return Array.isArray(this.eventProp.isCustom) ? this.eventProp.isCustom.includes(this.mode) : this.eventProp.isCustom || !1;\n    },\n    getEventTime() {\n      return this.time.getLocalizedTime(this.event.time.start) + \" - \" + this.time.getLocalizedTime(this.event.time.end);\n    },\n    timePointsInDay() {\n      return this.time.HOURS_PER_DAY * 100;\n    },\n    timePointsInOneMinute() {\n      return 100 / 60;\n    },\n    getLeftRule() {\n      return !this.event.totalConcurrentEvents || !this.event.nOfPreviousConcurrentEvents ? 0 : this.event.nOfPreviousConcurrentEvents / this.event.totalConcurrentEvents * 100;\n    },\n    getWidthRule() {\n      return 100 - this.getLeftRule;\n    },\n    getBorderRule() {\n      return this.event.nOfPreviousConcurrentEvents ? \"1px solid #fff\" : \"none\";\n    },\n    eventIsLongerThan30Minutes() {\n      const { hour: e, minutes: t } = this.time.getAllVariablesFromDateTimeString(this.event.time.start), { hour: n, minutes: a } = this.time.getAllVariablesFromDateTimeString(this.event.time.end), r = new Date(0, 0, 0, e, t).getTime();\n      return new Date(0, 0, 0, n, a).getTime() - r >= 18e5;\n    },\n    hasDisabledDragAndDrop() {\n      return !!(this.eventProp.disableDnD && this.eventProp.disableDnD.includes(this.mode));\n    },\n    hasDisabledResize() {\n      return !!(this.eventProp.disableResize && this.eventProp.disableResize.includes(this.mode));\n    },\n    requiredStyles() {\n      return {\n        top: this.getPositionInDay(this.event.time.start),\n        height: this.getLengthOfEvent(\n          this.event.time.start,\n          this.event.time.end\n        ),\n        left: this.getLeftRule + \"%\",\n        width: this.getWidthRule + \"%\",\n        transform: this.eventTransformValue,\n        zIndex: this.eventZIndexValue\n      };\n    }\n  },\n  watch: {\n    changeInQuarterHoursEventStart(e, t) {\n      const n = this.time.addMinutesToDateTimeString(\n        15 * e,\n        this.resizingStartingPointStartOfTime\n      ), a = e > t ? oe.FORWARDS : oe.BACKWARDS, r = this.eventChangeHelper.canEventBeMoved(\n        this.event,\n        a\n      );\n      n < this.event.time.end && r && (this.event.time.start = n);\n    },\n    changeInQuarterHoursEventEnd(e, t) {\n      const n = this.time.addMinutesToDateTimeString(\n        15 * e,\n        this.resizingStartingPointEndOfTime\n      ), a = e > t ? oe.FORWARDS : oe.BACKWARDS, r = this.eventChangeHelper.canEventBeMoved(\n        this.event,\n        a\n      );\n      n > this.event.time.start && r && (this.event.time.end = n);\n    },\n    changeInQuartersOnDrag(e, t) {\n      const n = e > t ? oe.FORWARDS : oe.BACKWARDS;\n      this.eventChangeHelper.canEventBeMoved(\n        this.event,\n        n\n      ) && this.updatePositionOnDrag();\n    },\n    changeInDaysOnDrag(e) {\n      if (!this.dayElement)\n        return;\n      const t = this.dayInfo.daysTotalN - (this.dayInfo.thisDayIndex + 1), n = 0 - this.dayInfo.thisDayIndex;\n      if (e > t || e < n)\n        return;\n      const a = e * this.dayElement.clientWidth;\n      this.eventTransformValue = `translateX(${a}px)`, this.updatePositionOnDrag();\n    }\n  },\n  mounted() {\n    this.setColors();\n  },\n  methods: {\n    getPositionInDay(e) {\n      return this.time.getPercentageOfDayFromDateTimeString(\n        e,\n        this.time.DAY_START,\n        this.time.DAY_END\n      ).toString() + \"%\";\n    },\n    getLengthOfEvent(e, t) {\n      const n = this.time.getPercentageOfDayFromDateTimeString(\n        e,\n        this.time.DAY_START,\n        this.time.DAY_END\n      ), a = this.time.getPercentageOfDayFromDateTimeString(\n        t,\n        this.time.DAY_START,\n        this.time.DAY_END\n      );\n      return Math.abs(a - n) + \"%\";\n    },\n    handleClickOnEvent(e) {\n      const t = this.getEventElementFromChildElement(e);\n      t && this.$emit(\"event-was-clicked\", {\n        clickedEvent: this.event,\n        eventElement: t\n      });\n    },\n    /**\n     * When a child element of the event is clicked, return the parent event element\n     * */\n    getEventElementFromChildElement(e) {\n      const t = e.target;\n      return !t || typeof t.className.includes != \"function\" ? null : t.className.includes(\".calendar-week__event\") ? e.target : t.closest(\".calendar-week__event\");\n    },\n    /**\n     * Handle mousemove-events, while the event is being resized\n     * */\n    onMouseMoveResize(e) {\n      const t = document.querySelector(\".calendar-week__events\");\n      if (!t)\n        return;\n      typeof this.resizingStartingPoint > \"u\" && (this.resizingStartingPoint = e.clientY);\n      const a = e.clientY - this.resizingStartingPoint, r = t.clientHeight, s = a / r * 100, i = this.timePointsInDay / 100 * s, o = this.getMinutesFromTimePoints(i);\n      this.resizingDirection === \"down\" ? this.changeInQuarterHoursEventEnd = Math.floor(o / 15) : this.changeInQuarterHoursEventStart = Math.floor(o / 15);\n    },\n    /**\n     * Handle mouseup-events, for when an event stops being resized\n     * */\n    onMouseUpWhenResizing() {\n      this.stopResizing();\n    },\n    resizeEvent(e) {\n      this.isResizing = !0, this.resizingDirection = e, document.addEventListener(\"mousemove\", this.onMouseMoveResize), document.addEventListener(\"mouseup\", this.onMouseUpWhenResizing);\n    },\n    stopResizing() {\n      document.removeEventListener(\"mousemove\", this.onMouseMoveResize), document.removeEventListener(\"mouseup\", this.onMouseUpWhenResizing), this.resetResizingValues(), this.$emit(\"event-was-resized\", this.event), this.isResizing = !1;\n    },\n    /**\n     * Reset values used for resizing an event, to prepare for upcoming resizing events\n     * */\n    resetResizingValues() {\n      this.resizingStartingPoint = void 0, this.resizingStartingPointStartOfTime = this.eventProp.time.start, this.resizingStartingPointEndOfTime = this.eventProp.time.end, this.changeInQuarterHoursEventEnd = 0;\n    },\n    /**\n     * Calculate the change of an event in minutes, based on the number of time points that changed\n     * */\n    getMinutesFromTimePoints(e) {\n      return e / this.timePointsInOneMinute;\n    },\n    setColors() {\n      var e, t, n;\n      if ((e = this.event) != null && e.colorScheme && ((t = this.config.style) != null && t.colorSchemes) && this.config.style.colorSchemes[this.event.colorScheme])\n        return this.eventColor = this.config.style.colorSchemes[this.event.colorScheme].color, this.eventBackgroundColor = this.config.style.colorSchemes[this.event.colorScheme].backgroundColor;\n      if ((n = this.event) != null && n.color) {\n        this.eventColor = \"#fff\", this.eventBackgroundColor = this.colors[this.event.color];\n        return;\n      }\n      this.eventBackgroundColor = this.colors.blue;\n    },\n    initDrag(e) {\n      var t, n;\n      !this.event.isEditable || this.hasDisabledDragAndDrop || (this.$emit(\"drag-start\"), this.dragMoveListenerNameAndCallbacks.forEach(([a, r]) => {\n        document.addEventListener(a, r);\n      }), Ee.isUIEventTouchEvent(e) ? this.setInitialDragValues(\n        (t = e.touches[0]) == null ? void 0 : t.clientX,\n        (n = e.touches[0]) == null ? void 0 : n.clientY\n      ) : this.setInitialDragValues(e.clientX, e.clientY));\n    },\n    setInitialDragValues(e, t) {\n      this.canDrag = !0, this.eventZIndexValue = 10, this.clientYDragStart = t, this.clientXDragStart = e, this.timeStartDragStart = this.event.time.start, this.timeEndDragStart = this.event.time.end;\n    },\n    onMouseUpWhenDragging() {\n      this.$emit(\"drag-end\"), this.handleDragEnd();\n    },\n    handleDragEnd() {\n      this.canDrag = !1, this.eventZIndexValue = \"initial\", this.dragMoveListenerNameAndCallbacks.forEach(([n, a]) => {\n        document.removeEventListener(n, a);\n      });\n      const e = this.changeInDaysOnDrag <= -1 || this.changeInDaysOnDrag > 0, t = this.changeInQuartersOnDrag <= -1 || this.changeInQuartersOnDrag > 0;\n      (e || t) && this.$emit(\"event-was-dragged\", this.event);\n    },\n    handleDrag(e) {\n      this.isResizing || !this.canDrag || !this.clientYDragStart || (Ee.isUIEventTouchEvent(e) ? (this.handleVerticalDrag(e.touches[0].clientY), this.handleHorizontalDrag(e.touches[0].clientX)) : (this.handleVerticalDrag(e.clientY), this.handleHorizontalDrag(e.clientX)));\n    },\n    /**\n     * Handle dragging within days\n     * */\n    handleVerticalDrag(e) {\n      const t = document.querySelector(\".calendar-week__events\");\n      if (!t || !this.clientYDragStart)\n        return;\n      const n = e - this.clientYDragStart, a = t.clientHeight, r = n / a * 100, s = this.timePointsInDay / 100 * r, i = this.getMinutesFromTimePoints(s);\n      this.changeInQuartersOnDrag = i < 0 ? Math.ceil(i / 15) : Math.floor(i / 15);\n    },\n    /**\n     * Handle dragging between days\n     * */\n    handleHorizontalDrag(e) {\n      if (!this.dayElement || !this.clientXDragStart)\n        return;\n      const t = this.dayElement.clientWidth, n = e - this.clientXDragStart;\n      this.changeInDaysOnDrag = n < 0 ? Math.ceil(n / t) : Math.floor(n / t);\n    },\n    updatePositionOnDrag() {\n      const e = this.changeInQuartersOnDrag * 15, t = this.changeInDaysOnDrag * 1440;\n      this.event.time.start = this.time.addMinutesToDateTimeString(\n        e + t,\n        this.timeStartDragStart\n      ), this.event.time.end = this.time.addMinutesToDateTimeString(\n        e + t,\n        this.timeEndDragStart\n      );\n    }\n  }\n});\nconst Qs = [\"data-ref\"], Js = { class: \"calendar-week__event-row is-title\" }, Zs = { class: \"calendar-week__event-row is-time\" }, eo = {\n  key: 0,\n  class: \"calendar-week__event-row is-location\"\n}, to = {\n  key: 1,\n  class: \"calendar-week__event-row is-with\"\n}, no = {\n  key: 2,\n  class: \"calendar-week__event-row is-topic\"\n}, ao = {\n  key: 3,\n  class: \"calendar-week__event-row is-description\"\n}, ro = [\"innerHTML\"];\nfunction io(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"font-awesome-icon\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-week__event is-event\", {\n      \"is-editable\": e.isEditable,\n      \"has-disabled-dnd\": e.hasDisabledDragAndDrop\n    }]),\n    style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({\n      ...e.requiredStyles,\n      border: e.getBorderRule\n    }),\n    \"data-ref\": \"event-\" + e.event.id,\n    onClick: t[2] || (t[2] = (...o) => e.handleClickOnEvent && e.handleClickOnEvent(...o)),\n    onMouseenter: t[3] || (t[3] = (o) => e.showResizeElements = e.isEditable && !e.hasDisabledResize),\n    onMouseleave: t[4] || (t[4] = (o) => e.showResizeElements = !1),\n    onMousedown: t[5] || (t[5] = (...o) => e.initDrag && e.initDrag(...o)),\n    onTouchstart: t[6] || (t[6] = (...o) => e.initDrag && e.initDrag(...o))\n  }, [\n    e.isCustomEvent ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"weekDayEvent\", {\n      key: 1,\n      eventData: e.event\n    }, void 0, !0) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 0,\n      class: \"calendar-week__event-info-wrapper\",\n      style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({\n        color: e.eventColor,\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: e.eventBackgroundColor\n      })\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Js, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.event.title), 1),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Zs, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          icon: e.icons.clock,\n          class: \"calendar-week__event-icon\"\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getEventTime), 1)\n      ]),\n      e.event.location ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", eo, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          icon: e.icons.location,\n          class: \"calendar-week__event-icon\"\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.event.location), 1)\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      e.event.with ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", to, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          icon: e.icons.user,\n          class: \"calendar-week__event-icon\"\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.event.with), 1)\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      e.event.topic ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", no, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          icon: e.icons.topic,\n          class: \"calendar-week__event-icon\"\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.event.topic), 1)\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      e.event.description ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", ao, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n          icon: e.icons.description,\n          class: \"calendar-week__event-icon\"\n        }, null, 8, [\"icon\"]),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n          innerHTML: e.event.description\n        }, null, 8, ro)\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      e.eventIsLongerThan30Minutes ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n        key: 4,\n        class: \"calendar-week__event-blend-out\",\n        style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({\n          backgroundImage: \"linear-gradient(to bottom, transparent, \" + e.eventBackgroundColor + \")\"\n        })\n      }, null, 4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n    ], 4)),\n    e.showResizeElements ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 2,\n      class: \"calendar-week__event-resize calendar-week__event-resize-up\",\n      onMousedown: t[0] || (t[0] = (o) => e.resizeEvent(\"up\"))\n    }, null, 32)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n    e.showResizeElements ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 3,\n      class: \"calendar-week__event-resize calendar-week__event-resize-down\",\n      onMousedown: t[1] || (t[1] = (o) => e.resizeEvent(\"down\"))\n    }, null, 32)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n  ], 46, Qs);\n}\nconst so = /* @__PURE__ */ j(Ks, [[\"render\", io], [\"__scopeId\", \"data-v-5564d436\"]]);\nclass oo {\n  sortEventsAccordingToStartOfTime(t) {\n    function n(a, r) {\n      return a.time.start < r.time.start ? -1 : a.time.start > r.time.start ? 1 : 0;\n    }\n    return t.sort(n);\n  }\n  /**\n   * Sets the \"zIndex\" and \"nOfPreviousConcurrentEvents\" properties on an event\n   *\n   * zIndex - lets the event know with which z-index it should be displayed\n   * nOfPreviousConcurrentEvents - lets the event know, how many other, previous events, are competing for the same width\n   * */\n  calculateConcurrencyForEvents(t) {\n    const n = this.sortEventsAccordingToStartOfTime(t);\n    if (!n.length)\n      return [];\n    for (const [a, r] of n.entries()) {\n      if (a === 0)\n        continue;\n      n[a - 1];\n      let s = 0, i = 0;\n      for (; s < a; )\n        n[s].time.end > r.time.start && i++, s++;\n      i && (n[a].nOfPreviousConcurrentEvents = i);\n    }\n    for (let a = n.length - 1; a >= 0; a--) {\n      let r = 0, s = n.length - 1;\n      for (; s > a; )\n        n[s].time.start < n[a].time.end && r++, s--;\n      const i = n[a].nOfPreviousConcurrentEvents || 0;\n      n[a].totalConcurrentEvents = i + r + 1;\n    }\n    return t;\n  }\n}\nclass lo extends se {\n  constructor(n, a, r = 24) {\n    super();\n    F(this, \"INTERVAL_MINUTES\");\n    F(this, \"DAY_START_DATE_TIME_STRING\");\n    F(this, \"HOURS_PER_DAY\", 24);\n    this.INTERVAL_MINUTES = n, this.DAY_START_DATE_TIME_STRING = a, this.HOURS_PER_DAY = r;\n  }\n  getIntervals() {\n    const n = [], a = this.HOURS_PER_DAY * (60 / this.INTERVAL_MINUTES);\n    let r = this.DAY_START_DATE_TIME_STRING;\n    for (; n.length < a; ) {\n      const s = this.addMinutesToDateTimeString(this.INTERVAL_MINUTES, r);\n      n.push({\n        intervalStart: r,\n        intervalEnd: s,\n        // Only show a border at the bottom of an interval, when the upcoming interval is not the start of a new hour.\n        // This prevents double borders\n        hasBorder: s.substring(14, 16) !== \"00\"\n      }), r = s;\n    }\n    return n;\n  }\n}\nconst co = new oo(), uo = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Day\",\n  components: { DayEvent: so },\n  props: {\n    day: {\n      type: Object,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    config: {\n      type: Object,\n      required: !0\n    },\n    dayInfo: {\n      type: Object,\n      required: !0\n    },\n    mode: {\n      type: String,\n      required: !0\n    },\n    dayIntervals: {\n      type: Object,\n      required: !0\n    },\n    weekHeight: {\n      type: Number,\n      required: !0\n    }\n  },\n  emits: [\n    \"event-was-clicked\",\n    \"event-was-resized\",\n    \"event-was-dragged\",\n    \"interval-was-clicked\",\n    \"day-was-clicked\",\n    \"datetime-was-clicked\",\n    \"drag-start\",\n    \"drag-end\"\n  ],\n  data() {\n    return {\n      events: [],\n      intervals: []\n    };\n  },\n  computed: {\n    intervalStyles() {\n      var e;\n      return (e = this.config.dayIntervals) != null && e.intervalStyles ? this.config.dayIntervals.intervalStyles : {};\n    }\n  },\n  mounted() {\n    this.calculateEventConcurrency(), this.dayIntervals.displayClickableInterval && this.setClickableIntervals();\n  },\n  methods: {\n    calculateEventConcurrency() {\n      this.events = co.calculateConcurrencyForEvents(\n        this.day.events\n      );\n    },\n    handleEventWasResized(e) {\n      this.$emit(\"event-was-resized\", e), this.calculateEventConcurrency();\n    },\n    handleClickOnInterval(e) {\n      const { intervalStart: t, intervalEnd: n } = e;\n      this.$emit(\"interval-was-clicked\", { intervalStart: t, intervalEnd: n });\n    },\n    setClickableIntervals() {\n      let e = this.day.dateTimeString;\n      if (this.time.DAY_START !== 0) {\n        const { hour: t } = this.time.getHourAndMinutesFromTimePoints(this.time.DAY_START);\n        e = this.time.setSegmentOfDateTimeString(e, { hour: t });\n      }\n      this.intervals = new lo(\n        this.dayIntervals.length || 60,\n        e,\n        this.time.HOURS_PER_DAY\n      ).getIntervals();\n    },\n    handleClickOnDay(e) {\n      const t = this.time.getTimeFromClick(e.offsetY, this.weekHeight);\n      let n = this.time.dateStringFrom(this.day.dateTimeString);\n      this.time.DAY_END <= this.time.DAY_START && (n = this.getDateStringForFlexibleDayBoundaries(n, t));\n      const r = `${n} ${t}`;\n      this.$emit(\"day-was-clicked\", n), this.$emit(\"datetime-was-clicked\", r);\n    },\n    getDateStringForFlexibleDayBoundaries(e, t) {\n      const a = `${this.time.doubleDigit(this.time.DAY_START / 100)}:00`;\n      return t < a && (e = this.time.dateStringFrom(\n        this.time.addDaysToDateTimeString(1, e)\n      )), e;\n    }\n  }\n});\nconst fo = [\"id\", \"onClick\"];\nfunction mo(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"DayEvent\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    class: \"calendar-week__day\",\n    onClick: t[4] || (t[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...o) => e.handleClickOnDay && e.handleClickOnDay(...o), [\"self\"]))\n  }, [\n    ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.events, (o, l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n      key: l,\n      \"data-test\": \"day-event\",\n      \"event-prop\": o,\n      day: e.day,\n      time: e.time,\n      config: e.config,\n      \"day-info\": e.dayInfo,\n      mode: e.mode,\n      onEventWasClicked: t[0] || (t[0] = (c) => e.$emit(\"event-was-clicked\", c)),\n      onEventWasDragged: t[1] || (t[1] = (c) => e.$emit(\"event-was-dragged\", c)),\n      onEventWasResized: e.handleEventWasResized,\n      onDragStart: t[2] || (t[2] = (c) => e.$emit(\"drag-start\")),\n      onDragEnd: t[3] || (t[3] = (c) => e.$emit(\"drag-end\"))\n    }, {\n      weekDayEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((c) => [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"weekDayEvent\", {\n          eventData: c.eventData\n        }, void 0, !0)\n      ]),\n      _: 2\n    }, 1032, [\"event-prop\", \"day\", \"time\", \"config\", \"day-info\", \"mode\", \"onEventWasResized\"]))), 128)),\n    e.dayIntervals && e.dayIntervals.displayClickableInterval ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 0 }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.intervals, (o, l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      id: \"interval-\" + l,\n      key: o.intervalStart,\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-week__day-interval\", { \"has-border\": o.hasBorder }]),\n      style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)(e.intervalStyles),\n      onClick: (c) => e.handleClickOnInterval(o)\n    }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.time.getLocalizedTime(o.intervalStart)), 15, fo))), 128)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n  ]);\n}\nconst ho = /* @__PURE__ */ j(uo, [[\"render\", mo], [\"__scopeId\", \"data-v-b268be7e\"]]), vo = {\n  x: 8,\n  y: 26,\n  width: 903,\n  height: 702,\n  top: 26,\n  right: 911,\n  bottom: 728,\n  left: 8\n}, go = 400;\nclass po {\n  calculateFlyoutPosition(t, n, a = null) {\n    const r = a || vo, s = t.top - r.top, i = r.right - t.right, o = r.bottom - t.bottom, l = t.left - r.left, c = n.width + 10, d = o < 0 ? r.bottom - n.height - 10 : null, u = s < 0 ? r.top + 10 : null;\n    return o > n.height && i > c ? {\n      top: u || Math.round(t.top),\n      left: Math.round(t.right) + 10\n    } : s > n.height && i > c ? {\n      top: d || Math.round(t.bottom) - n.height,\n      left: Math.round(t.right) + 10\n    } : l > c && o > n.height ? {\n      top: u || t.top,\n      left: Math.round(\n        t.left - (n.width + 10)\n      )\n    } : l > c && s > n.height ? {\n      top: d || Math.round(t.bottom - n.height),\n      left: Math.round(\n        t.left - (n.width + 10)\n      )\n    } : o < n.height ? { top: r.bottom - n.height, left: null } : { top: t.top, left: null };\n  }\n}\nvar yo = {\n  prefix: \"far\",\n  iconName: \"trash-can\",\n  icon: [448, 512, [61460, \"trash-alt\"], \"f2ed\", \"M170.5 51.6L151.5 80h145l-19-28.4c-1.5-2.2-4-3.6-6.7-3.6H177.1c-2.7 0-5.2 1.3-6.7 3.6zm147-26.6L354.2 80H368h48 8c13.3 0 24 10.7 24 24s-10.7 24-24 24h-8V432c0 44.2-35.8 80-80 80H112c-44.2 0-80-35.8-80-80V128H24c-13.3 0-24-10.7-24-24S10.7 80 24 80h8H80 93.8l36.7-55.1C140.9 9.4 158.4 0 177.1 0h93.7c18.7 0 36.2 9.4 46.6 24.9zM80 128V432c0 17.7 14.3 32 32 32H336c17.7 0 32-14.3 32-32V128H80zm80 64V400c0 8.8-7.2 16-16 16s-16-7.2-16-16V192c0-8.8 7.2-16 16-16s16 7.2 16 16zm80 0V400c0 8.8-7.2 16-16 16s-16-7.2-16-16V192c0-8.8 7.2-16 16-16s16 7.2 16 16zm80 0V400c0 8.8-7.2 16-16 16s-16-7.2-16-16V192c0-8.8 7.2-16 16-16s16 7.2 16 16z\"]\n}, za = yo, bo = {\n  prefix: \"far\",\n  iconName: \"pen-to-square\",\n  icon: [512, 512, [\"edit\"], \"f044\", \"M441 58.9L453.1 71c9.4 9.4 9.4 24.6 0 33.9L424 134.1 377.9 88 407 58.9c9.4-9.4 24.6-9.4 33.9 0zM209.8 256.2L344 121.9 390.1 168 255.8 302.2c-2.9 2.9-6.5 5-10.4 6.1l-58.5 16.7 16.7-58.5c1.1-3.9 3.2-7.5 6.1-10.4zM373.1 25L175.8 222.2c-8.7 8.7-15 19.4-18.3 31.1l-28.6 100c-2.4 8.4-.1 17.4 6.1 23.6s15.2 8.5 23.6 6.1l100-28.6c11.8-3.4 22.5-9.7 31.1-18.3L487 138.9c28.1-28.1 28.1-73.7 0-101.8L474.9 25C446.8-3.1 401.2-3.1 373.1 25zM88 64C39.4 64 0 103.4 0 152V424c0 48.6 39.4 88 88 88H360c48.6 0 88-39.4 88-88V312c0-13.3-10.7-24-24-24s-24 10.7-24 24V424c0 22.1-17.9 40-40 40H88c-22.1 0-40-17.9-40-40V152c0-22.1 17.9-40 40-40H200c13.3 0 24-10.7 24-24s-10.7-24-24-24H88z\"]\n}, ja = bo, Ba = {\n  prefix: \"far\",\n  iconName: \"user\",\n  icon: [448, 512, [128100, 62144], \"f007\", \"M304 128a80 80 0 1 0 -160 0 80 80 0 1 0 160 0zM96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM49.3 464H398.7c-8.9-63.3-63.3-112-129-112H178.3c-65.7 0-120.1 48.7-129 112zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3z\"]\n}, Do = {\n  prefix: \"far\",\n  iconName: \"circle-question\",\n  icon: [512, 512, [62108, \"question-circle\"], \"f059\", \"M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"]\n}, Ua = Do, Xa = {\n  prefix: \"far\",\n  iconName: \"comment\",\n  icon: [512, 512, [128489, 61669], \"f075\", \"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\"]\n}, Va = {\n  prefix: \"far\",\n  iconName: \"clock\",\n  icon: [512, 512, [128339, \"clock-four\"], \"f017\", \"M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\"]\n};\nconst ko = new po(), ln = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"EventFlyout\",\n  components: {\n    FontAwesomeIcon: Qe\n  },\n  props: {\n    calendarEventProp: {\n      type: Object,\n      default: () => ({})\n    },\n    eventElement: {\n      type: Object,\n      default: null\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    config: {\n      type: Object,\n      required: !0\n    }\n  },\n  emits: [\"hide\", \"edit-event\", \"delete-event\"],\n  data() {\n    return {\n      isVisible: !1,\n      top: 0,\n      left: 0,\n      icons: {\n        clock: Va,\n        user: Ba,\n        description: Xa,\n        trash: za,\n        edit: ja,\n        times: Ya,\n        topic: Ua,\n        location: rn\n      },\n      calendarEvent: this.calendarEventProp,\n      flyoutWidth: go + \"px\",\n      colors: xe\n    };\n  },\n  computed: {\n    getEventTime() {\n      if (!this.calendarEvent || !this.calendarEvent.time)\n        return null;\n      const e = Ee.getEventType(this.calendarEvent, this.time);\n      if ([Q.MULTI_DAY_TIMED].includes(e)) {\n        const a = this.getDateFromDateString(\n          this.calendarEvent.time.start\n        ) + \" \" + this.time.getLocalizedTime(this.calendarEvent.time.start), r = this.getDateFromDateString(\n          this.calendarEvent.time.end\n        ) + \" \" + this.time.getLocalizedTime(this.calendarEvent.time.end);\n        return `${a} - ${r}`;\n      }\n      if ([Q.SINGLE_DAY_FULL_DAY, Q.MULTI_DAY_FULL_DAY].includes(e)) {\n        const a = this.getDateFromDateString(this.calendarEvent.time.start), r = this.getDateFromDateString(this.calendarEvent.time.end);\n        return a === r ? a : `${a} - ${r}`;\n      }\n      const t = this.getDateFromDateString(this.calendarEvent.time.start), n = this.time.getLocalizedTimeRange(\n        this.calendarEvent.time.start,\n        this.calendarEvent.time.end\n      );\n      return `${t} ⋅ ${n}`;\n    },\n    eventFlyoutInlineStyles() {\n      return typeof this.top == \"number\" && !this.left ? {\n        top: this.top + \"px\",\n        left: \"50%\",\n        position: \"fixed\",\n        transform: \"translateX(-50%)\"\n      } : {\n        top: this.top + \"px\",\n        left: this.left + \"px\",\n        position: \"fixed\"\n        // casting, since tsc otherwise thinks we're casting 'string' to 'PositionProperty'\n      };\n    },\n    isEditable() {\n      var e;\n      return ((e = this.calendarEventProp) == null ? void 0 : e.isEditable) || !1;\n    },\n    eventBackgroundColor() {\n      var e, t, n;\n      return (e = this.calendarEvent) != null && e.colorScheme && ((t = this.config.style) != null && t.colorSchemes) && this.config.style.colorSchemes[this.calendarEvent.colorScheme] ? this.config.style.colorSchemes[this.calendarEvent.colorScheme].backgroundColor : this.colors[((n = this.calendarEvent) == null ? void 0 : n.color) || \"blue\"];\n    }\n  },\n  watch: {\n    calendarEventProp: {\n      deep: !0,\n      handler(e) {\n        setTimeout(() => {\n          this.calendarEvent = e, this.isVisible = !!e, this.$nextTick(() => this.setFlyoutPosition());\n        }, 10);\n      }\n    }\n  },\n  mounted() {\n    this.listenForClickOutside();\n  },\n  beforeUnmount() {\n    document.removeEventListener(\"click\", this.closeFlyoutOnClickOutside);\n  },\n  methods: {\n    setFlyoutPosition() {\n      var a, r;\n      const e = (a = this.eventElement) == null ? void 0 : a.closest(\".calendar-root\"), t = document.querySelector(\".event-flyout\");\n      if (!this.eventElement)\n        return;\n      const n = ko.calculateFlyoutPosition(\n        (r = this.eventElement) == null ? void 0 : r.getBoundingClientRect(),\n        {\n          height: (t == null ? void 0 : t.clientHeight) || 300,\n          width: (t == null ? void 0 : t.clientWidth) || 0\n        },\n        e ? e.getBoundingClientRect() : null\n      );\n      this.top = typeof (n == null ? void 0 : n.top) == \"number\" ? n.top : null, this.left = typeof (n == null ? void 0 : n.left) == \"number\" ? n.left : null;\n    },\n    editEvent() {\n      var e;\n      this.$emit(\"edit-event\", (e = this.calendarEvent) == null ? void 0 : e.id), this.closeFlyout();\n    },\n    deleteEvent() {\n      var e;\n      this.$emit(\"delete-event\", (e = this.calendarEvent) == null ? void 0 : e.id), this.closeFlyout();\n    },\n    closeFlyout() {\n      this.isVisible = !1, setTimeout(() => {\n        this.$emit(\"hide\");\n      }, 100);\n    },\n    getDateFromDateString(e) {\n      const { year: t, month: n, date: a } = this.time.getAllVariablesFromDateTimeString(e);\n      return new Date(t, n, a).toLocaleDateString(\n        this.time.CALENDAR_LOCALE,\n        {\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\"\n        }\n      );\n    },\n    listenForClickOutside() {\n      document.addEventListener(\"click\", this.closeFlyoutOnClickOutside);\n    },\n    closeFlyoutOnClickOutside(e) {\n      var s;\n      const t = document.querySelector(\".event-flyout\");\n      if (!t || !this.isVisible)\n        return;\n      const n = !t.contains(e.target), a = !!e.target.closest(\".is-event\"), r = ((s = this.config.eventDialog) == null ? void 0 : s.closeOnClickOutside) ?? !0;\n      this.isVisible && n && !a && r && this.closeFlyout();\n    }\n  }\n}), Xn = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"7c0b2114\": e.flyoutWidth\n  }));\n}, Vn = ln.setup;\nln.setup = Vn ? (e, t) => (Xn(), Vn(e, t)) : Xn;\nconst wo = {\n  key: 0,\n  class: \"event-flyout__relative-wrapper\"\n}, Eo = { class: \"event-flyout__menu\" }, So = {\n  key: 0,\n  class: \"event-flyout__menu-editable\"\n}, To = { class: \"event-flyout__menu-close\" }, Co = {\n  key: 0,\n  class: \"event-flyout__info-wrapper\"\n}, Ao = {\n  key: 0,\n  class: \"event-flyout__row is-title\"\n}, _o = {\n  key: 1,\n  class: \"event-flyout__row is-time\"\n}, Mo = {\n  key: 2,\n  class: \"event-flyout__row is-location\"\n}, Po = {\n  key: 3,\n  class: \"event-flyout__row is-with\"\n}, Lo = {\n  key: 4,\n  class: \"event-flyout__row is-topic\"\n}, Io = {\n  key: 5,\n  class: \"event-flyout__row is-description\"\n}, Oo = [\"innerHTML\"];\nfunction $o(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"font-awesome-icon\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"event-flyout\", { \"is-visible\": e.isVisible, \"is-not-editable\": !e.isEditable }]),\n    style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)(e.eventFlyoutInlineStyles)\n  }, [\n    !e.config.eventDialog || !e.config.eventDialog.isCustom ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", wo, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Eo, [\n        e.isEditable ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", So, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            class: \"event-flyout__menu-item is-edit-icon\",\n            icon: e.icons.edit,\n            onClick: e.editEvent\n          }, null, 8, [\"icon\", \"onClick\"]),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            class: \"event-flyout__menu-item is-trash-icon\",\n            icon: e.icons.trash,\n            onClick: e.deleteEvent\n          }, null, 8, [\"icon\", \"onClick\"])\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", To, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            class: \"event-flyout__menu-item is-times-icon\",\n            icon: e.icons.times,\n            onClick: e.closeFlyout\n          }, null, 8, [\"icon\", \"onClick\"])\n        ])\n      ]),\n      e.calendarEvent ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Co, [\n        e.calendarEvent.title ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Ao, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n            class: \"event-flyout__color-icon\",\n            style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ backgroundColor: e.eventBackgroundColor })\n          }, null, 4),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.title), 1)\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        e.calendarEvent.time ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _o, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getEventTime), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        e.calendarEvent.location ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Mo, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            icon: e.icons.location\n          }, null, 8, [\"icon\"]),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.location), 1)\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        e.calendarEvent.with ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Po, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            icon: e.icons.user\n          }, null, 8, [\"icon\"]),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.with), 1)\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        e.calendarEvent.topic ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Lo, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            icon: e.icons.topic,\n            class: \"calendar-week__event-icon\"\n          }, null, 8, [\"icon\"]),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.topic), 1)\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        e.calendarEvent.description ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Io, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n            icon: e.icons.description,\n            class: \"calendar-week__event-icon\"\n          }, null, 8, [\"icon\"]),\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", {\n            innerHTML: e.calendarEvent.description\n          }, null, 8, Oo)\n        ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n      ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n    ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"default\", {\n      key: 1,\n      eventDialogData: e.calendarEvent,\n      closeEventDialog: e.closeFlyout\n    }, void 0, !0)\n  ], 6);\n}\nconst xa = /* @__PURE__ */ j(ln, [[\"render\", $o], [\"__scopeId\", \"data-v-d6a61e37\"]]);\nclass qa extends se {\n  /**\n   * Yields a full calendar week, with all full-day events positioned in it\n   * */\n  positionFullDayEventsInWeek(t, n, a) {\n    const r = a.map((l) => {\n      const { year: c, month: d, date: u } = this.getAllVariablesFromDateTimeString(l.time.start), { year: g, month: D, date: y } = this.getAllVariablesFromDateTimeString(l.time.end);\n      return l.timeJS = {\n        start: new Date(c, d, u),\n        end: new Date(g, D, y)\n      }, l;\n    }).sort((l, c) => l.time.start < c.time.start ? -1 : l.time.start > c.time.start ? 1 : 0), i = this.getDatesBetweenTwoDates(t, n).map((l) => ({ date: l }));\n    for (const l of r)\n      for (const [c, d] of i.entries()) {\n        const u = this.getDateStringFromDate(d.date);\n        if (this.getDateStringFromDate(l.timeJS.start) <= u && this.getDateStringFromDate(l.timeJS.end) >= u) {\n          let g = 1;\n          for (; typeof i[c][`level${g}`] < \"u\"; )\n            g++;\n          let D = Math.ceil((l.timeJS.end.getTime() - d.date.getTime()) / this.MS_PER_DAY) + 1;\n          const y = i.length - c;\n          D > y && (D = y), i[c][`level${g}`] = {\n            ...l,\n            nDays: D\n            // Denotes the number of days to display in the week, not the actual number of days\n          };\n          for (let k = 1; k < D; k++)\n            i[c + k][`level${g}`] = \"blocked\";\n          break;\n        }\n      }\n    const o = [];\n    for (const l of i)\n      o.push(Object.keys(l).sort().reduce(\n        (c, d) => (c[d] = l[d], c),\n        {}\n      ));\n    return o;\n  }\n  positionFullDayEventsInMonth(t, n) {\n    const a = [], r = t.flat(), s = /* @__PURE__ */ new Map();\n    r.forEach((o) => s.set(this.dateStringFrom(o.dateTimeString), o)), n = n.sort((o, l) => o.time.start < l.time.start ? 1 : o.time.start > l.time.start ? -1 : 0);\n    for (const o of n) {\n      const { year: l, month: c, date: d } = this.getAllVariablesFromDateTimeString(o.time.start), { year: u, month: g, date: D } = this.getAllVariablesFromDateTimeString(o.time.end), y = this.getDatesBetweenTwoDates(\n        new Date(l, c, d),\n        new Date(u, g, D)\n      );\n      for (const k of y) {\n        const w = this.getDateStringFromDate(k), h = s.get(w);\n        h && s.set(w, {\n          ...h,\n          // Since we're iterating over the fullDayEvents sorted backwards, the earliest events will end up first (which is the wanted behavior)\n          events: [o, ...h.events]\n        });\n      }\n    }\n    let i = 0;\n    return s.forEach((o) => {\n      a.length ? a[i] && a[i].length < 7 ? a[i].push(o) : a[i] && a[i].length === 7 && (a.push([o]), i++) : a.push([o]);\n    }), a;\n  }\n}\n/*!\n * perfect-scrollbar v1.5.3\n * Copyright 2021 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */\nfunction ie(e) {\n  return getComputedStyle(e);\n}\nfunction X(e, t) {\n  for (var n in t) {\n    var a = t[n];\n    typeof a == \"number\" && (a = a + \"px\"), e.style[n] = a;\n  }\n  return e;\n}\nfunction lt(e) {\n  var t = document.createElement(\"div\");\n  return t.className = e, t;\n}\nvar xn = typeof Element < \"u\" && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector);\nfunction pe(e, t) {\n  if (!xn)\n    throw new Error(\"No element matching method supported\");\n  return xn.call(e, t);\n}\nfunction Me(e) {\n  e.remove ? e.remove() : e.parentNode && e.parentNode.removeChild(e);\n}\nfunction qn(e, t) {\n  return Array.prototype.filter.call(\n    e.children,\n    function(n) {\n      return pe(n, t);\n    }\n  );\n}\nvar R = {\n  main: \"ps\",\n  rtl: \"ps__rtl\",\n  element: {\n    thumb: function(e) {\n      return \"ps__thumb-\" + e;\n    },\n    rail: function(e) {\n      return \"ps__rail-\" + e;\n    },\n    consuming: \"ps__child--consume\"\n  },\n  state: {\n    focus: \"ps--focus\",\n    clicking: \"ps--clicking\",\n    active: function(e) {\n      return \"ps--active-\" + e;\n    },\n    scrolling: function(e) {\n      return \"ps--scrolling-\" + e;\n    }\n  }\n}, Ga = { x: null, y: null };\nfunction Ka(e, t) {\n  var n = e.element.classList, a = R.state.scrolling(t);\n  n.contains(a) ? clearTimeout(Ga[t]) : n.add(a);\n}\nfunction Qa(e, t) {\n  Ga[t] = setTimeout(\n    function() {\n      return e.isAlive && e.element.classList.remove(R.state.scrolling(t));\n    },\n    e.settings.scrollingThreshold\n  );\n}\nfunction Fo(e, t) {\n  Ka(e, t), Qa(e, t);\n}\nvar Je = function(t) {\n  this.element = t, this.handlers = {};\n}, Ja = { isEmpty: { configurable: !0 } };\nJe.prototype.bind = function(t, n) {\n  typeof this.handlers[t] > \"u\" && (this.handlers[t] = []), this.handlers[t].push(n), this.element.addEventListener(t, n, !1);\n};\nJe.prototype.unbind = function(t, n) {\n  var a = this;\n  this.handlers[t] = this.handlers[t].filter(function(r) {\n    return n && r !== n ? !0 : (a.element.removeEventListener(t, r, !1), !1);\n  });\n};\nJe.prototype.unbindAll = function() {\n  for (var t in this.handlers)\n    this.unbind(t);\n};\nJa.isEmpty.get = function() {\n  var e = this;\n  return Object.keys(this.handlers).every(\n    function(t) {\n      return e.handlers[t].length === 0;\n    }\n  );\n};\nObject.defineProperties(Je.prototype, Ja);\nvar Fe = function() {\n  this.eventElements = [];\n};\nFe.prototype.eventElement = function(t) {\n  var n = this.eventElements.filter(function(a) {\n    return a.element === t;\n  })[0];\n  return n || (n = new Je(t), this.eventElements.push(n)), n;\n};\nFe.prototype.bind = function(t, n, a) {\n  this.eventElement(t).bind(n, a);\n};\nFe.prototype.unbind = function(t, n, a) {\n  var r = this.eventElement(t);\n  r.unbind(n, a), r.isEmpty && this.eventElements.splice(this.eventElements.indexOf(r), 1);\n};\nFe.prototype.unbindAll = function() {\n  this.eventElements.forEach(function(t) {\n    return t.unbindAll();\n  }), this.eventElements = [];\n};\nFe.prototype.once = function(t, n, a) {\n  var r = this.eventElement(t), s = function(i) {\n    r.unbind(n, s), a(i);\n  };\n  r.bind(n, s);\n};\nfunction ct(e) {\n  if (typeof window.CustomEvent == \"function\")\n    return new CustomEvent(e);\n  var t = document.createEvent(\"CustomEvent\");\n  return t.initCustomEvent(e, !1, !1, void 0), t;\n}\nfunction yt(e, t, n, a, r) {\n  a === void 0 && (a = !0), r === void 0 && (r = !1);\n  var s;\n  if (t === \"top\")\n    s = [\n      \"contentHeight\",\n      \"containerHeight\",\n      \"scrollTop\",\n      \"y\",\n      \"up\",\n      \"down\"\n    ];\n  else if (t === \"left\")\n    s = [\n      \"contentWidth\",\n      \"containerWidth\",\n      \"scrollLeft\",\n      \"x\",\n      \"left\",\n      \"right\"\n    ];\n  else\n    throw new Error(\"A proper axis should be provided\");\n  Ro(e, n, s, a, r);\n}\nfunction Ro(e, t, n, a, r) {\n  var s = n[0], i = n[1], o = n[2], l = n[3], c = n[4], d = n[5];\n  a === void 0 && (a = !0), r === void 0 && (r = !1);\n  var u = e.element;\n  e.reach[l] = null, u[o] < 1 && (e.reach[l] = \"start\"), u[o] > e[s] - e[i] - 1 && (e.reach[l] = \"end\"), t && (u.dispatchEvent(ct(\"ps-scroll-\" + l)), t < 0 ? u.dispatchEvent(ct(\"ps-scroll-\" + c)) : t > 0 && u.dispatchEvent(ct(\"ps-scroll-\" + d)), a && Fo(e, l)), e.reach[l] && (t || r) && u.dispatchEvent(ct(\"ps-\" + l + \"-reach-\" + e.reach[l]));\n}\nfunction P(e) {\n  return parseInt(e, 10) || 0;\n}\nfunction No(e) {\n  return pe(e, \"input,[contenteditable]\") || pe(e, \"select,[contenteditable]\") || pe(e, \"textarea,[contenteditable]\") || pe(e, \"button,[contenteditable]\");\n}\nfunction Wo(e) {\n  var t = ie(e);\n  return P(t.width) + P(t.paddingLeft) + P(t.paddingRight) + P(t.borderLeftWidth) + P(t.borderRightWidth);\n}\nvar Ce = {\n  isWebKit: typeof document < \"u\" && \"WebkitAppearance\" in document.documentElement.style,\n  supportsTouch: typeof window < \"u\" && (\"ontouchstart\" in window || \"maxTouchPoints\" in window.navigator && window.navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch),\n  supportsIePointer: typeof navigator < \"u\" && navigator.msMaxTouchPoints,\n  isChrome: typeof navigator < \"u\" && /Chrome/i.test(navigator && navigator.userAgent)\n};\nfunction me(e) {\n  var t = e.element, n = Math.floor(t.scrollTop), a = t.getBoundingClientRect();\n  e.containerWidth = Math.round(a.width), e.containerHeight = Math.round(a.height), e.contentWidth = t.scrollWidth, e.contentHeight = t.scrollHeight, t.contains(e.scrollbarXRail) || (qn(t, R.element.rail(\"x\")).forEach(\n    function(r) {\n      return Me(r);\n    }\n  ), t.appendChild(e.scrollbarXRail)), t.contains(e.scrollbarYRail) || (qn(t, R.element.rail(\"y\")).forEach(\n    function(r) {\n      return Me(r);\n    }\n  ), t.appendChild(e.scrollbarYRail)), !e.settings.suppressScrollX && e.containerWidth + e.settings.scrollXMarginOffset < e.contentWidth ? (e.scrollbarXActive = !0, e.railXWidth = e.containerWidth - e.railXMarginWidth, e.railXRatio = e.containerWidth / e.railXWidth, e.scrollbarXWidth = Gn(\n    e,\n    P(e.railXWidth * e.containerWidth / e.contentWidth)\n  ), e.scrollbarXLeft = P(\n    (e.negativeScrollAdjustment + t.scrollLeft) * (e.railXWidth - e.scrollbarXWidth) / (e.contentWidth - e.containerWidth)\n  )) : e.scrollbarXActive = !1, !e.settings.suppressScrollY && e.containerHeight + e.settings.scrollYMarginOffset < e.contentHeight ? (e.scrollbarYActive = !0, e.railYHeight = e.containerHeight - e.railYMarginHeight, e.railYRatio = e.containerHeight / e.railYHeight, e.scrollbarYHeight = Gn(\n    e,\n    P(e.railYHeight * e.containerHeight / e.contentHeight)\n  ), e.scrollbarYTop = P(\n    n * (e.railYHeight - e.scrollbarYHeight) / (e.contentHeight - e.containerHeight)\n  )) : e.scrollbarYActive = !1, e.scrollbarXLeft >= e.railXWidth - e.scrollbarXWidth && (e.scrollbarXLeft = e.railXWidth - e.scrollbarXWidth), e.scrollbarYTop >= e.railYHeight - e.scrollbarYHeight && (e.scrollbarYTop = e.railYHeight - e.scrollbarYHeight), Ho(t, e), e.scrollbarXActive ? t.classList.add(R.state.active(\"x\")) : (t.classList.remove(R.state.active(\"x\")), e.scrollbarXWidth = 0, e.scrollbarXLeft = 0, t.scrollLeft = e.isRtl === !0 ? e.contentWidth : 0), e.scrollbarYActive ? t.classList.add(R.state.active(\"y\")) : (t.classList.remove(R.state.active(\"y\")), e.scrollbarYHeight = 0, e.scrollbarYTop = 0, t.scrollTop = 0);\n}\nfunction Gn(e, t) {\n  return e.settings.minScrollbarLength && (t = Math.max(t, e.settings.minScrollbarLength)), e.settings.maxScrollbarLength && (t = Math.min(t, e.settings.maxScrollbarLength)), t;\n}\nfunction Ho(e, t) {\n  var n = { width: t.railXWidth }, a = Math.floor(e.scrollTop);\n  t.isRtl ? n.left = t.negativeScrollAdjustment + e.scrollLeft + t.containerWidth - t.contentWidth : n.left = e.scrollLeft, t.isScrollbarXUsingBottom ? n.bottom = t.scrollbarXBottom - a : n.top = t.scrollbarXTop + a, X(t.scrollbarXRail, n);\n  var r = { top: a, height: t.railYHeight };\n  t.isScrollbarYUsingRight ? t.isRtl ? r.right = t.contentWidth - (t.negativeScrollAdjustment + e.scrollLeft) - t.scrollbarYRight - t.scrollbarYOuterWidth - 9 : r.right = t.scrollbarYRight - e.scrollLeft : t.isRtl ? r.left = t.negativeScrollAdjustment + e.scrollLeft + t.containerWidth * 2 - t.contentWidth - t.scrollbarYLeft - t.scrollbarYOuterWidth : r.left = t.scrollbarYLeft + e.scrollLeft, X(t.scrollbarYRail, r), X(t.scrollbarX, {\n    left: t.scrollbarXLeft,\n    width: t.scrollbarXWidth - t.railBorderXWidth\n  }), X(t.scrollbarY, {\n    top: t.scrollbarYTop,\n    height: t.scrollbarYHeight - t.railBorderYWidth\n  });\n}\nfunction Yo(e) {\n  e.element, e.event.bind(e.scrollbarY, \"mousedown\", function(t) {\n    return t.stopPropagation();\n  }), e.event.bind(e.scrollbarYRail, \"mousedown\", function(t) {\n    var n = t.pageY - window.pageYOffset - e.scrollbarYRail.getBoundingClientRect().top, a = n > e.scrollbarYTop ? 1 : -1;\n    e.element.scrollTop += a * e.containerHeight, me(e), t.stopPropagation();\n  }), e.event.bind(e.scrollbarX, \"mousedown\", function(t) {\n    return t.stopPropagation();\n  }), e.event.bind(e.scrollbarXRail, \"mousedown\", function(t) {\n    var n = t.pageX - window.pageXOffset - e.scrollbarXRail.getBoundingClientRect().left, a = n > e.scrollbarXLeft ? 1 : -1;\n    e.element.scrollLeft += a * e.containerWidth, me(e), t.stopPropagation();\n  });\n}\nfunction zo(e) {\n  Kn(e, [\n    \"containerWidth\",\n    \"contentWidth\",\n    \"pageX\",\n    \"railXWidth\",\n    \"scrollbarX\",\n    \"scrollbarXWidth\",\n    \"scrollLeft\",\n    \"x\",\n    \"scrollbarXRail\"\n  ]), Kn(e, [\n    \"containerHeight\",\n    \"contentHeight\",\n    \"pageY\",\n    \"railYHeight\",\n    \"scrollbarY\",\n    \"scrollbarYHeight\",\n    \"scrollTop\",\n    \"y\",\n    \"scrollbarYRail\"\n  ]);\n}\nfunction Kn(e, t) {\n  var n = t[0], a = t[1], r = t[2], s = t[3], i = t[4], o = t[5], l = t[6], c = t[7], d = t[8], u = e.element, g = null, D = null, y = null;\n  function k(v) {\n    v.touches && v.touches[0] && (v[r] = v.touches[0].pageY), u[l] = g + y * (v[r] - D), Ka(e, c), me(e), v.stopPropagation(), v.type.startsWith(\"touch\") && v.changedTouches.length > 1 && v.preventDefault();\n  }\n  function w() {\n    Qa(e, c), e[d].classList.remove(R.state.clicking), e.event.unbind(e.ownerDocument, \"mousemove\", k);\n  }\n  function h(v, E) {\n    g = u[l], E && v.touches && (v[r] = v.touches[0].pageY), D = v[r], y = (e[a] - e[n]) / (e[s] - e[o]), E ? e.event.bind(e.ownerDocument, \"touchmove\", k) : (e.event.bind(e.ownerDocument, \"mousemove\", k), e.event.once(e.ownerDocument, \"mouseup\", w), v.preventDefault()), e[d].classList.add(R.state.clicking), v.stopPropagation();\n  }\n  e.event.bind(e[i], \"mousedown\", function(v) {\n    h(v);\n  }), e.event.bind(e[i], \"touchstart\", function(v) {\n    h(v, !0);\n  });\n}\nfunction jo(e) {\n  var t = e.element, n = function() {\n    return pe(t, \":hover\");\n  }, a = function() {\n    return pe(e.scrollbarX, \":focus\") || pe(e.scrollbarY, \":focus\");\n  };\n  function r(s, i) {\n    var o = Math.floor(t.scrollTop);\n    if (s === 0) {\n      if (!e.scrollbarYActive)\n        return !1;\n      if (o === 0 && i > 0 || o >= e.contentHeight - e.containerHeight && i < 0)\n        return !e.settings.wheelPropagation;\n    }\n    var l = t.scrollLeft;\n    if (i === 0) {\n      if (!e.scrollbarXActive)\n        return !1;\n      if (l === 0 && s < 0 || l >= e.contentWidth - e.containerWidth && s > 0)\n        return !e.settings.wheelPropagation;\n    }\n    return !0;\n  }\n  e.event.bind(e.ownerDocument, \"keydown\", function(s) {\n    if (!(s.isDefaultPrevented && s.isDefaultPrevented() || s.defaultPrevented) && !(!n() && !a())) {\n      var i = document.activeElement ? document.activeElement : e.ownerDocument.activeElement;\n      if (i) {\n        if (i.tagName === \"IFRAME\")\n          i = i.contentDocument.activeElement;\n        else\n          for (; i.shadowRoot; )\n            i = i.shadowRoot.activeElement;\n        if (No(i))\n          return;\n      }\n      var o = 0, l = 0;\n      switch (s.which) {\n        case 37:\n          s.metaKey ? o = -e.contentWidth : s.altKey ? o = -e.containerWidth : o = -30;\n          break;\n        case 38:\n          s.metaKey ? l = e.contentHeight : s.altKey ? l = e.containerHeight : l = 30;\n          break;\n        case 39:\n          s.metaKey ? o = e.contentWidth : s.altKey ? o = e.containerWidth : o = 30;\n          break;\n        case 40:\n          s.metaKey ? l = -e.contentHeight : s.altKey ? l = -e.containerHeight : l = -30;\n          break;\n        case 32:\n          s.shiftKey ? l = e.containerHeight : l = -e.containerHeight;\n          break;\n        case 33:\n          l = e.containerHeight;\n          break;\n        case 34:\n          l = -e.containerHeight;\n          break;\n        case 36:\n          l = e.contentHeight;\n          break;\n        case 35:\n          l = -e.contentHeight;\n          break;\n        default:\n          return;\n      }\n      e.settings.suppressScrollX && o !== 0 || e.settings.suppressScrollY && l !== 0 || (t.scrollTop -= l, t.scrollLeft += o, me(e), r(o, l) && s.preventDefault());\n    }\n  });\n}\nfunction Bo(e) {\n  var t = e.element;\n  function n(i, o) {\n    var l = Math.floor(t.scrollTop), c = t.scrollTop === 0, d = l + t.offsetHeight === t.scrollHeight, u = t.scrollLeft === 0, g = t.scrollLeft + t.offsetWidth === t.scrollWidth, D;\n    return Math.abs(o) > Math.abs(i) ? D = c || d : D = u || g, D ? !e.settings.wheelPropagation : !0;\n  }\n  function a(i) {\n    var o = i.deltaX, l = -1 * i.deltaY;\n    return (typeof o > \"u\" || typeof l > \"u\") && (o = -1 * i.wheelDeltaX / 6, l = i.wheelDeltaY / 6), i.deltaMode && i.deltaMode === 1 && (o *= 10, l *= 10), o !== o && l !== l && (o = 0, l = i.wheelDelta), i.shiftKey ? [-l, -o] : [o, l];\n  }\n  function r(i, o, l) {\n    if (!Ce.isWebKit && t.querySelector(\"select:focus\"))\n      return !0;\n    if (!t.contains(i))\n      return !1;\n    for (var c = i; c && c !== t; ) {\n      if (c.classList.contains(R.element.consuming))\n        return !0;\n      var d = ie(c);\n      if (l && d.overflowY.match(/(scroll|auto)/)) {\n        var u = c.scrollHeight - c.clientHeight;\n        if (u > 0 && (c.scrollTop > 0 && l < 0 || c.scrollTop < u && l > 0))\n          return !0;\n      }\n      if (o && d.overflowX.match(/(scroll|auto)/)) {\n        var g = c.scrollWidth - c.clientWidth;\n        if (g > 0 && (c.scrollLeft > 0 && o < 0 || c.scrollLeft < g && o > 0))\n          return !0;\n      }\n      c = c.parentNode;\n    }\n    return !1;\n  }\n  function s(i) {\n    var o = a(i), l = o[0], c = o[1];\n    if (!r(i.target, l, c)) {\n      var d = !1;\n      e.settings.useBothWheelAxes ? e.scrollbarYActive && !e.scrollbarXActive ? (c ? t.scrollTop -= c * e.settings.wheelSpeed : t.scrollTop += l * e.settings.wheelSpeed, d = !0) : e.scrollbarXActive && !e.scrollbarYActive && (l ? t.scrollLeft += l * e.settings.wheelSpeed : t.scrollLeft -= c * e.settings.wheelSpeed, d = !0) : (t.scrollTop -= c * e.settings.wheelSpeed, t.scrollLeft += l * e.settings.wheelSpeed), me(e), d = d || n(l, c), d && !i.ctrlKey && (i.stopPropagation(), i.preventDefault());\n    }\n  }\n  typeof window.onwheel < \"u\" ? e.event.bind(t, \"wheel\", s) : typeof window.onmousewheel < \"u\" && e.event.bind(t, \"mousewheel\", s);\n}\nfunction Uo(e) {\n  if (!Ce.supportsTouch && !Ce.supportsIePointer)\n    return;\n  var t = e.element;\n  function n(y, k) {\n    var w = Math.floor(t.scrollTop), h = t.scrollLeft, v = Math.abs(y), E = Math.abs(k);\n    if (E > v) {\n      if (k < 0 && w === e.contentHeight - e.containerHeight || k > 0 && w === 0)\n        return window.scrollY === 0 && k > 0 && Ce.isChrome;\n    } else if (v > E && (y < 0 && h === e.contentWidth - e.containerWidth || y > 0 && h === 0))\n      return !0;\n    return !0;\n  }\n  function a(y, k) {\n    t.scrollTop -= k, t.scrollLeft -= y, me(e);\n  }\n  var r = {}, s = 0, i = {}, o = null;\n  function l(y) {\n    return y.targetTouches ? y.targetTouches[0] : y;\n  }\n  function c(y) {\n    return y.pointerType && y.pointerType === \"pen\" && y.buttons === 0 ? !1 : !!(y.targetTouches && y.targetTouches.length === 1 || y.pointerType && y.pointerType !== \"mouse\" && y.pointerType !== y.MSPOINTER_TYPE_MOUSE);\n  }\n  function d(y) {\n    if (c(y)) {\n      var k = l(y);\n      r.pageX = k.pageX, r.pageY = k.pageY, s = (/* @__PURE__ */ new Date()).getTime(), o !== null && clearInterval(o);\n    }\n  }\n  function u(y, k, w) {\n    if (!t.contains(y))\n      return !1;\n    for (var h = y; h && h !== t; ) {\n      if (h.classList.contains(R.element.consuming))\n        return !0;\n      var v = ie(h);\n      if (w && v.overflowY.match(/(scroll|auto)/)) {\n        var E = h.scrollHeight - h.clientHeight;\n        if (E > 0 && (h.scrollTop > 0 && w < 0 || h.scrollTop < E && w > 0))\n          return !0;\n      }\n      if (k && v.overflowX.match(/(scroll|auto)/)) {\n        var A = h.scrollWidth - h.clientWidth;\n        if (A > 0 && (h.scrollLeft > 0 && k < 0 || h.scrollLeft < A && k > 0))\n          return !0;\n      }\n      h = h.parentNode;\n    }\n    return !1;\n  }\n  function g(y) {\n    if (c(y)) {\n      var k = l(y), w = { pageX: k.pageX, pageY: k.pageY }, h = w.pageX - r.pageX, v = w.pageY - r.pageY;\n      if (u(y.target, h, v))\n        return;\n      a(h, v), r = w;\n      var E = (/* @__PURE__ */ new Date()).getTime(), A = E - s;\n      A > 0 && (i.x = h / A, i.y = v / A, s = E), n(h, v) && y.preventDefault();\n    }\n  }\n  function D() {\n    e.settings.swipeEasing && (clearInterval(o), o = setInterval(function() {\n      if (e.isInitialized) {\n        clearInterval(o);\n        return;\n      }\n      if (!i.x && !i.y) {\n        clearInterval(o);\n        return;\n      }\n      if (Math.abs(i.x) < 0.01 && Math.abs(i.y) < 0.01) {\n        clearInterval(o);\n        return;\n      }\n      if (!e.element) {\n        clearInterval(o);\n        return;\n      }\n      a(i.x * 30, i.y * 30), i.x *= 0.8, i.y *= 0.8;\n    }, 10));\n  }\n  Ce.supportsTouch ? (e.event.bind(t, \"touchstart\", d), e.event.bind(t, \"touchmove\", g), e.event.bind(t, \"touchend\", D)) : Ce.supportsIePointer && (window.PointerEvent ? (e.event.bind(t, \"pointerdown\", d), e.event.bind(t, \"pointermove\", g), e.event.bind(t, \"pointerup\", D)) : window.MSPointerEvent && (e.event.bind(t, \"MSPointerDown\", d), e.event.bind(t, \"MSPointerMove\", g), e.event.bind(t, \"MSPointerUp\", D)));\n}\nvar Xo = function() {\n  return {\n    handlers: [\"click-rail\", \"drag-thumb\", \"keyboard\", \"wheel\", \"touch\"],\n    maxScrollbarLength: null,\n    minScrollbarLength: null,\n    scrollingThreshold: 1e3,\n    scrollXMarginOffset: 0,\n    scrollYMarginOffset: 0,\n    suppressScrollX: !1,\n    suppressScrollY: !1,\n    swipeEasing: !0,\n    useBothWheelAxes: !1,\n    wheelPropagation: !0,\n    wheelSpeed: 1\n  };\n}, Vo = {\n  \"click-rail\": Yo,\n  \"drag-thumb\": zo,\n  keyboard: jo,\n  wheel: Bo,\n  touch: Uo\n}, Re = function(t, n) {\n  var a = this;\n  if (n === void 0 && (n = {}), typeof t == \"string\" && (t = document.querySelector(t)), !t || !t.nodeName)\n    throw new Error(\"no element is specified to initialize PerfectScrollbar\");\n  this.element = t, t.classList.add(R.main), this.settings = Xo();\n  for (var r in n)\n    this.settings[r] = n[r];\n  this.containerWidth = null, this.containerHeight = null, this.contentWidth = null, this.contentHeight = null;\n  var s = function() {\n    return t.classList.add(R.state.focus);\n  }, i = function() {\n    return t.classList.remove(R.state.focus);\n  };\n  this.isRtl = ie(t).direction === \"rtl\", this.isRtl === !0 && t.classList.add(R.rtl), this.isNegativeScroll = function() {\n    var c = t.scrollLeft, d = null;\n    return t.scrollLeft = -1, d = t.scrollLeft < 0, t.scrollLeft = c, d;\n  }(), this.negativeScrollAdjustment = this.isNegativeScroll ? t.scrollWidth - t.clientWidth : 0, this.event = new Fe(), this.ownerDocument = t.ownerDocument || document, this.scrollbarXRail = lt(R.element.rail(\"x\")), t.appendChild(this.scrollbarXRail), this.scrollbarX = lt(R.element.thumb(\"x\")), this.scrollbarXRail.appendChild(this.scrollbarX), this.scrollbarX.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarX, \"focus\", s), this.event.bind(this.scrollbarX, \"blur\", i), this.scrollbarXActive = null, this.scrollbarXWidth = null, this.scrollbarXLeft = null;\n  var o = ie(this.scrollbarXRail);\n  this.scrollbarXBottom = parseInt(o.bottom, 10), isNaN(this.scrollbarXBottom) ? (this.isScrollbarXUsingBottom = !1, this.scrollbarXTop = P(o.top)) : this.isScrollbarXUsingBottom = !0, this.railBorderXWidth = P(o.borderLeftWidth) + P(o.borderRightWidth), X(this.scrollbarXRail, { display: \"block\" }), this.railXMarginWidth = P(o.marginLeft) + P(o.marginRight), X(this.scrollbarXRail, { display: \"\" }), this.railXWidth = null, this.railXRatio = null, this.scrollbarYRail = lt(R.element.rail(\"y\")), t.appendChild(this.scrollbarYRail), this.scrollbarY = lt(R.element.thumb(\"y\")), this.scrollbarYRail.appendChild(this.scrollbarY), this.scrollbarY.setAttribute(\"tabindex\", 0), this.event.bind(this.scrollbarY, \"focus\", s), this.event.bind(this.scrollbarY, \"blur\", i), this.scrollbarYActive = null, this.scrollbarYHeight = null, this.scrollbarYTop = null;\n  var l = ie(this.scrollbarYRail);\n  this.scrollbarYRight = parseInt(l.right, 10), isNaN(this.scrollbarYRight) ? (this.isScrollbarYUsingRight = !1, this.scrollbarYLeft = P(l.left)) : this.isScrollbarYUsingRight = !0, this.scrollbarYOuterWidth = this.isRtl ? Wo(this.scrollbarY) : null, this.railBorderYWidth = P(l.borderTopWidth) + P(l.borderBottomWidth), X(this.scrollbarYRail, { display: \"block\" }), this.railYMarginHeight = P(l.marginTop) + P(l.marginBottom), X(this.scrollbarYRail, { display: \"\" }), this.railYHeight = null, this.railYRatio = null, this.reach = {\n    x: t.scrollLeft <= 0 ? \"start\" : t.scrollLeft >= this.contentWidth - this.containerWidth ? \"end\" : null,\n    y: t.scrollTop <= 0 ? \"start\" : t.scrollTop >= this.contentHeight - this.containerHeight ? \"end\" : null\n  }, this.isAlive = !0, this.settings.handlers.forEach(function(c) {\n    return Vo[c](a);\n  }), this.lastScrollTop = Math.floor(t.scrollTop), this.lastScrollLeft = t.scrollLeft, this.event.bind(this.element, \"scroll\", function(c) {\n    return a.onScroll(c);\n  }), me(this);\n};\nRe.prototype.update = function() {\n  this.isAlive && (this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0, X(this.scrollbarXRail, { display: \"block\" }), X(this.scrollbarYRail, { display: \"block\" }), this.railXMarginWidth = P(ie(this.scrollbarXRail).marginLeft) + P(ie(this.scrollbarXRail).marginRight), this.railYMarginHeight = P(ie(this.scrollbarYRail).marginTop) + P(ie(this.scrollbarYRail).marginBottom), X(this.scrollbarXRail, { display: \"none\" }), X(this.scrollbarYRail, { display: \"none\" }), me(this), yt(this, \"top\", 0, !1, !0), yt(this, \"left\", 0, !1, !0), X(this.scrollbarXRail, { display: \"\" }), X(this.scrollbarYRail, { display: \"\" }));\n};\nRe.prototype.onScroll = function(t) {\n  this.isAlive && (me(this), yt(this, \"top\", this.element.scrollTop - this.lastScrollTop), yt(\n    this,\n    \"left\",\n    this.element.scrollLeft - this.lastScrollLeft\n  ), this.lastScrollTop = Math.floor(this.element.scrollTop), this.lastScrollLeft = this.element.scrollLeft);\n};\nRe.prototype.destroy = function() {\n  this.isAlive && (this.event.unbindAll(), Me(this.scrollbarX), Me(this.scrollbarY), Me(this.scrollbarXRail), Me(this.scrollbarYRail), this.removePsClasses(), this.element = null, this.scrollbarX = null, this.scrollbarY = null, this.scrollbarXRail = null, this.scrollbarYRail = null, this.isAlive = !1);\n};\nRe.prototype.removePsClasses = function() {\n  this.element.className = this.element.className.split(\" \").filter(function(t) {\n    return !t.match(/^ps([-_].+|)$/);\n  }).join(\" \");\n};\nclass Qn {\n  constructor(t) {\n    this.events = t;\n  }\n  getEventsForDay(t, n) {\n    return this.events.filter((a) => this.isEventInDayBoundaries(a, t, n));\n  }\n  isEventInDayBoundaries(t, n, a) {\n    const r = n.dateStringFrom(t.time.start) === n.dateStringFrom(a);\n    return n.dayMode === q.REGULAR ? r : r && n.dayMode === q.SHORTENED ? this.handlePartialDayWithinOneDayBoundary(n, t) : n.dayMode === q.FLEXIBLE ? this.handleDayStretchingTwoDates(n, t, a, r) : !1;\n  }\n  handleDayStretchingTwoDates(t, n, a, r) {\n    const { hour: s } = t.getHourAndMinutesFromTimePoints(t.DAY_START), { hour: i } = t.getHourAndMinutesFromTimePoints(t.DAY_END), { hour: o } = t.getAllVariablesFromDateTimeString(n.time.start), l = t.addDaysToDateTimeString(1, a), c = n.time.start.substring(0, 11) === l.substring(0, 11);\n    return r && o >= s || c && o < i;\n  }\n  handlePartialDayWithinOneDayBoundary(t, n) {\n    const { hour: a } = t.getHourAndMinutesFromTimePoints(t.DAY_START), { hour: r } = t.getHourAndMinutesFromTimePoints(t.DAY_END), { hour: s } = t.getAllVariablesFromDateTimeString(n.time.start);\n    return s >= a && s < r;\n  }\n}\nclass Jn {\n  static getNHoursIntoDayFromHour(t, n) {\n    const a = se.getHourFromTimePoints(n.DAY_START);\n    return n.dayMode === q.REGULAR ? t : n.dayMode === q.SHORTENED || n.dayMode === q.FLEXIBLE && t >= a ? t - a : 24 - a + t;\n  }\n  static eventSeparator(t, n) {\n    const a = [], r = [];\n    for (const s of t) {\n      const i = Ee.getEventType(s, n);\n      [Q.SINGLE_DAY_TIMED, Q.SINGLE_HYBRID_DAY_TIMED].includes(i) ? a.push(s) : r.push(s);\n    }\n    return { fullDayAndMultipleDayEvents: r, singleDayTimedEvents: a };\n  }\n}\nconst xo = new qa(), cn = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Week\",\n  components: {\n    Day: ho,\n    WeekTimeline: qs,\n    DayTimeline: Fs,\n    EventFlyout: xa\n  },\n  props: {\n    config: {\n      type: Object,\n      required: !0\n    },\n    eventsProp: {\n      type: Array,\n      default: () => []\n    },\n    period: {\n      type: Object,\n      required: !0\n    },\n    modeProp: {\n      type: String,\n      default: \"week\"\n    },\n    time: {\n      type: Object,\n      required: !0\n    }\n  },\n  emits: [\n    \"event-was-clicked\",\n    \"event-was-resized\",\n    \"event-was-dragged\",\n    \"edit-event\",\n    \"delete-event\",\n    \"interval-was-clicked\",\n    \"day-was-clicked\",\n    \"datetime-was-clicked\"\n  ],\n  data() {\n    var e;\n    return {\n      days: [],\n      mode: this.modeProp,\n      selectedEvent: null,\n      selectedEventElement: null,\n      events: this.eventsProp,\n      fullDayEvents: [],\n      weekVersion: 0,\n      // is simply a dummy value, for re-rendering child components on event-was-dragged\n      dayIntervals: {\n        length: 60,\n        height: 66\n      },\n      weekHeight: \"1584px\",\n      // Correlates to the initial values of dayIntervals.length and dayIntervals.height\n      scrollbar: null,\n      currentTimePercentage: 0,\n      // When dayBoundaries are set, and the current time is outside the dayBoundaries, this property is set to false,\n      // in order to hide the current time line\n      showCurrentTime: !!((e = this.config) != null && e.showCurrentTime)\n    };\n  },\n  computed: {\n    hasCustomCurrentTimeSlot() {\n      return Ee.hasSlotContent(this.$slots.customCurrentTime);\n    },\n    nDays() {\n      var e, t;\n      return ((t = (e = this.config) == null ? void 0 : e.week) == null ? void 0 : t.nDays) || 7;\n    }\n  },\n  watch: {\n    period: {\n      deep: !0,\n      handler() {\n        this.setInitialEvents(this.mode);\n      }\n    },\n    modeProp: {\n      deep: !0,\n      handler(e) {\n        this.mode = e, this.setInitialEvents(e);\n      }\n    }\n  },\n  mounted() {\n    var e;\n    this.setDayIntervals(), this.separateFullDayEventsFromOtherEvents(), this.setInitialEvents(this.modeProp), this.scrollOnMount(), this.initScrollbar(), ((e = this.config) != null && e.showCurrentTime || this.hasCustomCurrentTimeSlot) && this.setCurrentTime();\n  },\n  methods: {\n    initScrollbar(e = 0) {\n      const t = document.querySelector(\".calendar-week__wrapper\");\n      e > 3e3 || (t ? (this.scrollbar = new Re(t), this.scrollbar.update()) : this.initScrollbar(e + 50));\n    },\n    destroyScrollbarAndHideOverflow() {\n      const e = document.querySelector(\".calendar-week__wrapper\");\n      e instanceof HTMLElement && (e.style.overflowY = \"hidden\", this.scrollbar.destroy());\n    },\n    separateFullDayEventsFromOtherEvents() {\n      const {\n        singleDayTimedEvents: e,\n        fullDayAndMultipleDayEvents: t\n      } = Jn.eventSeparator(this.events, this.time);\n      this.events = e, this.positionFullDayEvents(t);\n    },\n    positionFullDayEvents(e) {\n      const t = this.nDays === 5 ? new Date(\n        this.period.end.getFullYear(),\n        this.period.end.getMonth(),\n        this.period.end.getDate() - 2\n      ) : this.period.end;\n      this.fullDayEvents = e.length ? xo.positionFullDayEventsInWeek(\n        this.period.start,\n        t,\n        e\n      ) : [];\n    },\n    setDays() {\n      const e = this.time.getCalendarWeekDateObjects(this.period.start).map((t) => {\n        const n = this.time.getLocalizedNameOfWeekday(t, \"long\"), a = this.time.getDateTimeStringFromDate(\n          t,\n          \"start\"\n        ), r = new Qn(this.events).getEventsForDay(this.time, a);\n        return { dayName: n, dateTimeString: a, events: r };\n      });\n      this.nDays === 5 && this.time.FIRST_DAY_OF_WEEK === Mt.MONDAY ? (e.splice(5, 2), this.fullDayEvents.splice(5, 2)) : this.nDays === 5 && this.time.FIRST_DAY_OF_WEEK === Mt.SUNDAY && (e.splice(6, 1), this.fullDayEvents.splice(6, 1), e.splice(0, 1), this.fullDayEvents.splice(0, 1)), this.days = e;\n    },\n    mergeFullDayEventsIntoDays() {\n      for (const [e] of this.days.entries())\n        this.days[e].fullDayEvents = this.fullDayEvents[e];\n    },\n    setDay() {\n      const e = this.time.getDateTimeStringFromDate(\n        this.period.selectedDate\n      );\n      if (this.days = [\n        {\n          dayName: new Date(this.period.selectedDate).toLocaleDateString(\n            this.time.CALENDAR_LOCALE,\n            { weekday: \"long\" }\n          ),\n          dateTimeString: this.time.getDateTimeStringFromDate(\n            this.period.selectedDate,\n            \"start\"\n          ),\n          events: new Qn(this.events).getEventsForDay(this.time, e)\n        }\n      ], !!this.fullDayEvents.length) {\n        for (const t of this.fullDayEvents)\n          if (this.time.getDateTimeStringFromDate(t.date).substring(0, 11) === e.substring(0, 11)) {\n            this.fullDayEvents = [t];\n            return;\n          }\n      }\n    },\n    setInitialEvents(e) {\n      e === \"day\" && this.setDay(), e === \"week\" && this.setDays(), this.mergeFullDayEventsIntoDays();\n    },\n    handleClickOnEvent(e) {\n      this.$emit(\"event-was-clicked\", e), this.selectedEventElement = e.eventElement, this.selectedEvent = e.clickedEvent;\n    },\n    handleEventWasDragged(e) {\n      this.initScrollbar();\n      const t = e;\n      delete t.totalConcurrentEvents, delete t.nOfPreviousConcurrentEvents;\n      const n = this.events.filter((a) => a.id !== e.id);\n      this.events = [\n        t,\n        ...n.map((a) => (delete a.nOfPreviousConcurrentEvents, delete a.totalConcurrentEvents, a))\n      ], this.setInitialEvents(this.mode), this.weekVersion = this.weekVersion + 1, this.$emit(\"event-was-dragged\", e);\n    },\n    scrollOnMount() {\n      var t;\n      if (typeof ((t = this.config.week) == null ? void 0 : t.scrollToHour) != \"number\")\n        return;\n      const e = document.querySelector(\".calendar-week__wrapper\");\n      e && this.$nextTick(() => {\n        const a = +this.weekHeight.split(\"p\")[0] / this.time.HOURS_PER_DAY, r = Jn.getNHoursIntoDayFromHour(this.config.week.scrollToHour, this.time), s = a * r;\n        e.scroll(0, s - 10);\n      });\n    },\n    setDayIntervals() {\n      if (this.config.dayIntervals)\n        for (const [e, t] of Object.entries(this.config.dayIntervals))\n          this.dayIntervals[e] = t;\n      this.setWeekHeightBasedOnIntervals();\n    },\n    setWeekHeightBasedOnIntervals() {\n      [15, 30, 60].includes(this.dayIntervals.length) || (this.dayIntervals.length = 60, this.dayIntervals.height = 66, console.warn(\n        \"The dayIntervals configuration is faulty. It has been reset to default values.\"\n      ));\n      let e = 1;\n      this.dayIntervals.length === 15 && (e = 4), this.dayIntervals.length === 30 && (e = 2), this.weekHeight = this.dayIntervals.height * e * this.time.HOURS_PER_DAY + \"px\";\n    },\n    setCurrentTime() {\n      const e = () => {\n        const t = this.time.getDateTimeStringFromDate(/* @__PURE__ */ new Date()), n = this.time.getPercentageOfDayFromDateTimeString(t, this.time.DAY_START, this.time.DAY_END);\n        if (n < 0 || n > 100)\n          return this.showCurrentTime = !1;\n        this.showCurrentTime = !0, this.currentTimePercentage = n;\n      };\n      e(), setInterval(() => e(), 6e4);\n    }\n  }\n}), Zn = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"5cb5d057\": e.weekHeight\n  }));\n}, ea = cn.setup;\ncn.setup = ea ? (e, t) => (Zn(), ea(e, t)) : Zn;\nconst qo = (e) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.pushScopeId)(\"data-v-8bb6ad05\"), e = e(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.popScopeId)(), e), Go = { class: \"calendar-week__wrapper\" }, Ko = { class: \"calendar-week\" }, Qo = /* @__PURE__ */ qo(() => /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", { class: \"current-time-line__circle\" }, null, -1)), Jo = [\n  Qo\n], Zo = { class: \"calendar-week__events\" };\nfunction el(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"WeekTimeline\"), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"EventFlyout\"), l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"DayTimeline\"), c = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Day\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n      days: e.days,\n      time: e.time,\n      \"full-day-events\": e.fullDayEvents,\n      config: e.config,\n      mode: e.mode,\n      onEventWasClicked: e.handleClickOnEvent,\n      onDayWasClicked: t[0] || (t[0] = (d) => e.$emit(\"day-was-clicked\", d))\n    }, null, 8, [\"days\", \"time\", \"full-day-events\", \"config\", \"mode\", \"onEventWasClicked\"]),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Go, [\n      !e.config.eventDialog || !e.config.eventDialog.isDisabled ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(o, {\n        key: 0,\n        \"calendar-event-prop\": e.selectedEvent,\n        \"event-element\": e.selectedEventElement,\n        time: e.time,\n        config: e.config,\n        onHide: t[1] || (t[1] = (d) => e.selectedEvent = null),\n        onEditEvent: t[2] || (t[2] = (d) => e.$emit(\"edit-event\", d)),\n        onDeleteEvent: t[3] || (t[3] = (d) => e.$emit(\"delete-event\", d))\n      }, {\n        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((d) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"eventDialog\", {\n            eventDialogData: d.eventDialogData,\n            closeEventDialog: d.closeEventDialog\n          }, void 0, !0)\n        ]),\n        _: 3\n      }, 8, [\"calendar-event-prop\", \"event-element\", \"time\", \"config\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"section\", Ko, [\n        e.hasCustomCurrentTimeSlot && e.showCurrentTime ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n          key: 0,\n          class: \"custom-current-time\",\n          style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ top: `${e.currentTimePercentage}%` })\n        }, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"customCurrentTime\", {}, void 0, !0)\n        ], 4)) : e.config && e.config.showCurrentTime && e.showCurrentTime ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n          key: 1,\n          class: \"current-time-line\",\n          style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({ top: `${e.currentTimePercentage}%` })\n        }, Jo, 4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(l, {\n          key: e.period.start.getTime() + e.period.end.getTime() + e.mode,\n          time: e.time,\n          \"day-intervals\": e.dayIntervals,\n          \"week-height\": e.weekHeight\n        }, null, 8, [\"time\", \"day-intervals\", \"week-height\"])),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Zo, [\n          ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.days, (d, u) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(c, {\n            key: d.dateTimeString + e.mode + e.weekVersion,\n            day: d,\n            time: e.time,\n            config: e.config,\n            \"day-info\": { daysTotalN: e.days.length, thisDayIndex: u, dateTimeString: d.dateTimeString },\n            mode: e.mode,\n            \"day-intervals\": e.dayIntervals,\n            \"week-height\": +e.weekHeight.replace(\"px\", \"\"),\n            onEventWasClicked: e.handleClickOnEvent,\n            onEventWasResized: t[4] || (t[4] = (g) => e.$emit(\"event-was-resized\", g)),\n            onEventWasDragged: e.handleEventWasDragged,\n            onIntervalWasClicked: t[5] || (t[5] = (g) => e.$emit(\"interval-was-clicked\", g)),\n            onDayWasClicked: t[6] || (t[6] = (g) => e.$emit(\"day-was-clicked\", g)),\n            onDragStart: e.destroyScrollbarAndHideOverflow,\n            onDragEnd: e.initScrollbar,\n            onDatetimeWasClicked: t[7] || (t[7] = (g) => e.$emit(\"datetime-was-clicked\", g))\n          }, {\n            weekDayEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((g) => [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"weekDayEvent\", {\n                eventData: g.eventData\n              }, void 0, !0)\n            ]),\n            _: 2\n          }, 1032, [\"day\", \"time\", \"config\", \"day-info\", \"mode\", \"day-intervals\", \"week-height\", \"onEventWasClicked\", \"onEventWasDragged\", \"onDragStart\", \"onDragEnd\"]))), 128))\n        ])\n      ])\n    ])\n  ], 64);\n}\nconst tl = /* @__PURE__ */ j(cn, [[\"render\", el], [\"__scopeId\", \"data-v-8bb6ad05\"]]), dn = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Event\",\n  props: {\n    time: {\n      type: Object,\n      required: !0\n    },\n    calendarEvent: {\n      type: Object,\n      required: !0\n    },\n    config: {\n      type: Object,\n      required: !0\n    },\n    day: {\n      type: Object,\n      required: !0\n    }\n  },\n  emits: [\"event-was-clicked\"],\n  data() {\n    return {\n      colors: xe,\n      eventBackgroundColor: \"\",\n      eventIdPrefix: \"calendar-month__event-\"\n    };\n  },\n  computed: {\n    isCustomEvent() {\n      return Array.isArray(this.calendarEvent.isCustom) ? this.calendarEvent.isCustom.includes(\"month\") : this.calendarEvent.isCustom || !1;\n    },\n    eventTimeStart() {\n      return Le.test(this.calendarEvent.time.start) ? this.time.getLocalizedTime(this.calendarEvent.time.start) : null;\n    },\n    elementId() {\n      return this.eventIdPrefix + this.calendarEvent.id + this.time.dateStringFrom(this.day.dateTimeString);\n    },\n    elementDraggableAttribute() {\n      const {\n        year: e,\n        month: t,\n        date: n\n      } = this.time.getAllVariablesFromDateTimeString(\n        this.calendarEvent.time.start\n      ), {\n        year: a,\n        month: r,\n        date: s\n      } = this.time.getAllVariablesFromDateTimeString(\n        this.calendarEvent.time.end\n      ), i = e === a && t === r && n === s, o = this.calendarEvent.disableDnD && this.calendarEvent.disableDnD.includes(\"month\");\n      return this.calendarEvent.isEditable && i && !o ? !0 : void 0;\n    }\n  },\n  mounted() {\n    this.setColors();\n  },\n  methods: {\n    setColors() {\n      var e, t, n;\n      return (e = this.calendarEvent) != null && e.colorScheme && ((t = this.config.style) != null && t.colorSchemes) && this.config.style.colorSchemes[this.calendarEvent.colorScheme] ? this.eventBackgroundColor = this.config.style.colorSchemes[this.calendarEvent.colorScheme].backgroundColor : (n = this.calendarEvent) != null && n.color ? this.eventBackgroundColor = this.colors[this.calendarEvent.color] : this.eventBackgroundColor = this.colors.blue;\n    },\n    handleClickOnEvent() {\n      const e = document.getElementById(this.elementId);\n      this.$emit(\"event-was-clicked\", {\n        clickedEvent: this.calendarEvent,\n        eventElement: e\n      });\n    },\n    handleDragStart(e) {\n      !e || !e.dataTransfer || (e.dataTransfer.effectAllowed = \"move\", e.dataTransfer.setData(\n        \"json\",\n        JSON.stringify(this.calendarEvent)\n      ));\n    }\n  }\n}), ta = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"63a9bc8a\": e.eventBackgroundColor\n  }));\n}, na = dn.setup;\ndn.setup = na ? (e, t) => (ta(), na(e, t)) : ta;\nconst nl = (e) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.pushScopeId)(\"data-v-4766dfc7\"), e = e(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.popScopeId)(), e), al = {\n  key: 0,\n  class: \"calendar-month__event\"\n}, rl = [\"id\", \"draggable\"], il = [\"id\", \"draggable\"], sl = /* @__PURE__ */ nl(() => /* @__PURE__ */ (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", { class: \"calendar-month__event-color\" }, null, -1)), ol = {\n  key: 0,\n  class: \"calendar-month__event-time\"\n}, ll = { class: \"calendar-month__event-title\" };\nfunction cl(e, t, n, a, r, s) {\n  return e.config.isSmall ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", al)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: 1 }, [\n    e.isCustomEvent ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 0,\n      id: e.elementId,\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"is-event\", { \"is-draggable\": e.elementDraggableAttribute }]),\n      \"data-ref\": \"custom-event\",\n      draggable: e.elementDraggableAttribute,\n      onDragstart: t[0] || (t[0] = (...i) => e.handleDragStart && e.handleDragStart(...i)),\n      onClick: t[1] || (t[1] = (...i) => e.handleClickOnEvent && e.handleClickOnEvent(...i))\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"monthEvent\", { eventData: e.calendarEvent }, void 0, !0)\n    ], 42, rl)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n      key: 1,\n      id: e.elementId,\n      \"data-ref\": \"default-event\",\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-month__event is-event\", { \"is-draggable\": e.elementDraggableAttribute }]),\n      draggable: e.elementDraggableAttribute,\n      onDragstart: t[2] || (t[2] = (...i) => e.handleDragStart && e.handleDragStart(...i)),\n      onClick: t[3] || (t[3] = (...i) => e.handleClickOnEvent && e.handleClickOnEvent(...i))\n    }, [\n      sl,\n      e.eventTimeStart && !e.calendarEvent.originalEvent ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", ol, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.eventTimeStart), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", ll, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.title), 1)\n    ], 42, il))\n  ], 64));\n}\nconst dl = /* @__PURE__ */ j(dn, [[\"render\", cl], [\"__scopeId\", \"data-v-4766dfc7\"]]), ul = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Day\",\n  components: { Event: dl },\n  mixins: [sn],\n  props: {\n    config: {\n      type: Object,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    day: {\n      type: Object,\n      required: !0\n    },\n    isSelected: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  emits: [\n    \"event-was-clicked\",\n    \"event-was-dragged\",\n    \"updated-period\",\n    \"date-was-clicked\",\n    \"day-was-selected\"\n  ],\n  data() {\n    return {\n      isActiveDroppable: !1\n    };\n  },\n  computed: {\n    canBeDropped() {\n      return this.isActiveDroppable;\n    },\n    hideLeadingAndTrailingDate() {\n      var e;\n      return this.day.isTrailingOrLeadingDate === !0 && ((e = this.config.month) == null ? void 0 : e.showTrailingAndLeadingDates) === !1;\n    },\n    isToday() {\n      const {\n        year: e,\n        month: t,\n        date: n\n      } = this.time.getAllVariablesFromDateTimeString(this.day.dateTimeString);\n      return this.time.dateIsToday(new Date(e, t, n));\n    }\n  },\n  methods: {\n    getMoreEvents() {\n      const { date: e, month: t, year: n } = this.time.getAllVariablesFromDateTimeString(\n        this.day.dateTimeString\n      ), a = new Date(n, t, e), r = this.time.getCalendarWeekDateObjects(a), s = r[0], i = r[6];\n      this.$emit(\"updated-period\", { start: s, end: i, selectedDate: a });\n    },\n    handleDragLeave() {\n      this.isActiveDroppable = !1;\n    },\n    handleDragEnd(e) {\n      this.isActiveDroppable = !1, e.stopPropagation();\n    },\n    handleDrop(e) {\n      if (this.isActiveDroppable = !1, e.stopPropagation(), !e || !e.dataTransfer)\n        return;\n      const t = JSON.parse(\n        e.dataTransfer.getData(\"json\")\n      );\n      this.time.dateStringsHaveEqualDates(\n        t.time.start,\n        this.time.dateStringFrom(this.day.dateTimeString)\n      ) || (t.time.start = t.time.start.replace(\n        /^\\d{4}-\\d{2}-\\d{2}/,\n        this.time.dateStringFrom(this.day.dateTimeString)\n      ), t.time.end = t.time.end.replace(\n        /^\\d{4}-\\d{2}-\\d{2}/,\n        this.time.dateStringFrom(this.day.dateTimeString)\n      ), this.$emit(\"event-was-dragged\", t));\n    },\n    handleDragOver(e) {\n      return this.isActiveDroppable = !0, e.preventDefault(), !1;\n    },\n    emitDayWasClicked() {\n      this.$emit(\"date-was-clicked\", this.time.dateStringFrom(this.day.dateTimeString)), this.config.isSmall && this.$emit(\"day-was-selected\", this.day);\n    }\n  }\n});\nconst fl = [\"id\"], ml = { class: \"calendar-month_events\" }, hl = {\n  key: 1,\n  class: \"space-reserver\"\n};\nfunction vl(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Event\");\n  return e.hideLeadingAndTrailingDate ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", hl)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    key: 0,\n    id: \"day-\" + e.time.dateStringFrom(e.day.dateTimeString),\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-month__weekday\", {\n      \"is-droppable\": e.canBeDropped,\n      \"trailing-or-leading\": e.day.isTrailingOrLeadingDate,\n      \"is-selected\": e.isSelected,\n      \"is-today\": e.isToday\n    }]),\n    onClick: t[3] || (t[3] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...o) => e.emitDayWasClicked && e.emitDayWasClicked(...o), [\"self\"])),\n    onDragleave: t[4] || (t[4] = (...o) => e.handleDragLeave && e.handleDragLeave(...o)),\n    onDragover: t[5] || (t[5] = (...o) => e.handleDragOver && e.handleDragOver(...o)),\n    onDrop: t[6] || (t[6] = (...o) => e.handleDrop && e.handleDrop(...o)),\n    onDragend: t[7] || (t[7] = (...o) => e.handleDragEnd && e.handleDragEnd(...o))\n  }, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"dayCell\", { dayData: e.day }, () => [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n        class: \"calendar-month__day-date\",\n        onClick: t[0] || (t[0] = (...o) => e.emitDayWasClicked && e.emitDayWasClicked(...o))\n      }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.day.dateTimeString.substring(8, 10).startsWith(\"0\") ? e.day.dateTimeString.substring(9, 10) : e.day.dateTimeString.substring(8, 10)), 1),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", ml, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.day.events, (o, l) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: l }, [\n          l < 3 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n            key: o.id,\n            \"calendar-event\": o,\n            config: e.config,\n            time: e.time,\n            day: e.day,\n            onEventWasClicked: t[1] || (t[1] = (c) => e.$emit(\"event-was-clicked\", c))\n          }, {\n            monthEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((c) => [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"monthEvent\", {\n                eventData: c.eventData\n              }, void 0, !0)\n            ]),\n            _: 2\n          }, 1032, [\"calendar-event\", \"config\", \"time\", \"day\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n        ], 64))), 128)),\n        e.day.events.length >= 4 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n          key: 0,\n          class: \"calendar-month__weekday-more\",\n          onClick: t[2] || (t[2] = (...o) => e.getMoreEvents && e.getMoreEvents(...o))\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getLanguage(e.languageKeys.moreEvents, e.time.CALENDAR_LOCALE)), 1)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n      ])\n    ], !0)\n  ], 42, fl));\n}\nconst gl = /* @__PURE__ */ j(ul, [[\"render\", vl], [\"__scopeId\", \"data-v-e7ff2963\"]]), pl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"WeekDay\",\n  props: {\n    day: {\n      type: Object,\n      required: !0\n    }\n  }\n});\nconst yl = { class: \"calendar-month__day-name\" };\nfunction bl(e, t, n, a, r, s) {\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", yl, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.day.dayName), 1);\n}\nconst Dl = /* @__PURE__ */ j(pl, [[\"render\", bl], [\"__scopeId\", \"data-v-09c7c5db\"]]), un = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Event\",\n  components: { FontAwesomeIcon: Qe },\n  props: {\n    time: {\n      type: Object,\n      required: !0\n    },\n    calendarEvent: {\n      type: Object,\n      required: !0\n    },\n    config: {\n      type: Object,\n      required: !0\n    }\n  },\n  emits: [\"event-was-clicked\"],\n  data() {\n    return {\n      icons: {\n        clock: Va,\n        user: Ba,\n        description: Xa,\n        trash: za,\n        edit: ja,\n        times: Ya,\n        topic: Ua,\n        location: rn\n      },\n      colors: xe,\n      eventBackgroundColor: \"\",\n      eventColor: \"#fff\",\n      eventIdPrefix: \"agenda__event-\"\n    };\n  },\n  computed: {\n    eventTime() {\n      return Le.test(this.calendarEvent.time.start) ? this.time.getLocalizedTimeRange(\n        this.calendarEvent.time.start,\n        this.calendarEvent.time.end\n      ) : null;\n    },\n    elementId() {\n      return this.eventIdPrefix + this.calendarEvent.id;\n    }\n  },\n  mounted() {\n    this.setColors();\n  },\n  methods: {\n    setColors() {\n      var e, t, n;\n      return (e = this.calendarEvent) != null && e.colorScheme && ((t = this.config.style) != null && t.colorSchemes) && this.config.style.colorSchemes[this.calendarEvent.colorScheme] ? (this.eventColor = this.config.style.colorSchemes[this.calendarEvent.colorScheme].color, this.eventBackgroundColor = this.config.style.colorSchemes[this.calendarEvent.colorScheme].backgroundColor) : (n = this.calendarEvent) != null && n.color ? this.eventBackgroundColor = this.colors[this.calendarEvent.color] : this.eventBackgroundColor = this.colors.blue;\n    },\n    handleClickOnEvent() {\n      const e = document.getElementById(this.elementId);\n      this.$emit(\"event-was-clicked\", {\n        clickedEvent: this.calendarEvent,\n        eventElement: e\n      });\n    }\n  }\n}), aa = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"691f2791\": e.eventBackgroundColor,\n    fa1649c2: e.eventColor\n  }));\n}, ra = un.setup;\nun.setup = ra ? (e, t) => (aa(), ra(e, t)) : aa;\nconst kl = [\"id\"], wl = {\n  key: 0,\n  class: \"agenda__event-time\"\n}, El = { class: \"agenda__event-title\" }, Sl = {\n  key: 1,\n  class: \"agenda__event-with\"\n}, Tl = {\n  key: 2,\n  class: \"agenda__event-location\"\n};\nfunction Cl(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"FontAwesomeIcon\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n    id: e.elementId,\n    class: \"agenda__event is-event\",\n    onClick: t[0] || (t[0] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...o) => e.handleClickOnEvent && e.handleClickOnEvent(...o), [\"prevent\"]))\n  }, [\n    e.eventTime && !e.calendarEvent.originalEvent ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", wl, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n        icon: e.icons.clock\n      }, null, 8, [\"icon\"]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.eventTime), 1)\n    ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", El, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.title), 1),\n    e.calendarEvent.with ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", Sl, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n        icon: e.icons.user\n      }, null, 8, [\"icon\"]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.with), 1)\n    ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n    e.calendarEvent.location ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"span\", Tl, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(i, {\n        icon: e.icons.location\n      }, null, 8, [\"icon\"]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(\" \" + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.calendarEvent.location), 1)\n    ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n  ], 8, kl);\n}\nconst Al = /* @__PURE__ */ j(un, [[\"render\", Cl], [\"__scopeId\", \"data-v-698b431e\"]]), _l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"AgendaEvents\",\n  components: { AgendaEventTile: Al },\n  mixins: [sn],\n  props: {\n    config: {\n      type: Object,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    day: {\n      type: Object,\n      required: !0\n    }\n  },\n  emits: [\n    \"event-was-clicked\"\n  ]\n});\nconst Ml = { class: \"agenda__wrapper\" }, Pl = { class: \"agenda__header\" }, Ll = { class: \"agenda__header-day-name\" }, Il = { class: \"agenda__header-date\" }, Ol = { class: \"agenda__content\" }, $l = {\n  key: 0,\n  class: \"is-empty\"\n}, Fl = {\n  key: 1,\n  class: \"agenda__content-events-list\"\n};\nfunction Rl(e, t, n, a, r, s) {\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"AgendaEventTile\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Ml, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"header\", Pl, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Ll, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.day.dayName), 1),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Il, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.day.dateTimeString.substring(8, 10)), 1)\n    ]),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", Ol, [\n      e.day.events.length === 0 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", $l, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(e.getLanguage(e.languageKeys.noEvent, e.time.CALENDAR_LOCALE)), 1)) : ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Fl, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.day.events, (o) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n          key: \"agenda_event_\" + o.id,\n          day: e.day,\n          config: e.config,\n          \"calendar-event\": o,\n          time: e.time,\n          onEventWasClicked: t[0] || (t[0] = (l) => e.$emit(\"event-was-clicked\", l))\n        }, null, 8, [\"day\", \"config\", \"calendar-event\", \"time\"]))), 128))\n      ]))\n    ])\n  ]);\n}\nconst Nl = /* @__PURE__ */ j(_l, [[\"render\", Rl], [\"__scopeId\", \"data-v-b60cbce5\"]]), Wl = new qa(), Hl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Month\",\n  components: {\n    AgendaEvents: Nl,\n    Day: gl,\n    EventFlyout: xa,\n    WeekDay: Dl\n  },\n  props: {\n    config: {\n      type: Object,\n      required: !0\n    },\n    time: {\n      type: Object,\n      required: !0\n    },\n    period: {\n      type: Object,\n      required: !0\n    },\n    eventsProp: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: [\n    \"edit-event\",\n    \"delete-event\",\n    \"updated-period\",\n    \"event-was-clicked\",\n    \"event-was-dragged\",\n    \"date-was-clicked\"\n  ],\n  data() {\n    return {\n      month: [],\n      selectedEvent: null,\n      selectedEventElement: null,\n      events: this.eventsProp,\n      fullDayEvents: [],\n      scrollbar: null,\n      selectedDay: null\n    };\n  },\n  mounted() {\n    this.initMonth(), this.initScrollbar();\n  },\n  methods: {\n    initScrollbar(e = 0) {\n      const t = document.querySelector(\".calendar-month\");\n      e > 3e3 || (t ? (this.scrollbar = new Re(t), this.scrollbar.update()) : this.initScrollbar(e + 50));\n    },\n    initMonth() {\n      this.month = [], this.sortOutFullDayEvents(), this.setMonth(), this.config.isSmall && this.setInitialSelectedDay();\n    },\n    setMonth() {\n      const { month: e, fullYear: t } = new Ne(this.period.selectedDate), a = this.time.getCalendarMonthSplitInWeeks(\n        t,\n        e\n      ).map((r) => r.map((s) => {\n        const i = this.time.getDateTimeStringFromDate(s), o = this.events.filter((l) => this.time.dateStringsHaveEqualDates(l.time.start, i));\n        return {\n          isTrailingOrLeadingDate: this.time.isTrailingOrLeadingDate(s, e),\n          dayName: this.time.getLocalizedNameOfWeekday(s),\n          dateTimeString: this.time.getDateTimeStringFromDate(s),\n          events: o\n        };\n      }));\n      this.month = Wl.positionFullDayEventsInMonth(\n        a,\n        this.fullDayEvents\n      );\n    },\n    sortOutFullDayEvents() {\n      const e = [], t = [];\n      for (const n of this.events)\n        Ee.getEventType(n, this.time) === Q.SINGLE_DAY_TIMED ? e.push(n) : t.push(n);\n      this.events = e, this.fullDayEvents = t;\n    },\n    handleClickOnEvent(e) {\n      this.$emit(\"event-was-clicked\", e), this.selectedEventElement = e.eventElement, this.selectedEvent = e.clickedEvent;\n    },\n    handleEventWasDragged(e) {\n      this.$emit(\"event-was-dragged\", e);\n      const t = [...this.events, ...this.fullDayEvents].filter(\n        (n) => n.id !== e.id\n      );\n      t.push(e), this.events = [], this.fullDayEvents = [], this.events = t, this.initMonth();\n    },\n    setInitialSelectedDay() {\n      const e = this.time.getDateStringFromDate(this.period.selectedDate);\n      this.selectedDay = this.month.flat().find((t) => this.time.dateStringFrom(t.dateTimeString) === e) || null;\n    }\n  }\n});\nconst Yl = { class: \"calendar-month\" }, zl = { class: \"calendar-month__week-day-names\" }, jl = { class: \"calendar-month__weeks\" }, Bl = {\n  key: 0,\n  class: \"calendar-month__day_events\"\n};\nfunction Ul(e, t, n, a, r, s) {\n  var d;\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"WeekDay\"), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Day\"), l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"AgendaEvents\"), c = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"EventFlyout\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Yl, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", zl, [\n      ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.month[0], (u, g) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n        key: g,\n        class: \"calendar-month__week-day-name\",\n        config: e.config,\n        day: u,\n        time: e.time\n      }, null, 8, [\"config\", \"day\", \"time\"]))), 128))\n    ]),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", jl, [\n      ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(e.month, (u, g) => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", {\n        key: g,\n        class: \"calendar-month__week\"\n      }, [\n        ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(!0), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)(u, (D, y) => {\n          var k;\n          return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(o, {\n            key: y,\n            config: e.config,\n            day: D,\n            time: e.time,\n            \"is-selected\": ((k = e.selectedDay) == null ? void 0 : k.dateTimeString) === D.dateTimeString,\n            onEventWasClicked: e.handleClickOnEvent,\n            onEventWasDragged: e.handleEventWasDragged,\n            onDateWasClicked: t[0] || (t[0] = (w) => e.$emit(\"date-was-clicked\", w)),\n            onDayWasSelected: t[1] || (t[1] = (w) => e.selectedDay = w),\n            onUpdatedPeriod: t[2] || (t[2] = (w) => e.$emit(\"updated-period\", w))\n          }, {\n            monthEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(({ eventData: w }) => [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"monthEvent\", { eventData: w }, void 0, !0)\n            ]),\n            dayCell: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(({ dayData: w }) => [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"dayCell\", { dayData: w }, void 0, !0)\n            ]),\n            _: 2\n          }, 1032, [\"config\", \"day\", \"time\", \"is-selected\", \"onEventWasClicked\", \"onEventWasDragged\"]);\n        }), 128))\n      ]))), 128))\n    ]),\n    ((d = e.config.month) == null ? void 0 : d.showEventsOnMobileView) !== !1 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Bl, [\n      e.selectedDay ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(l, {\n        key: 0,\n        config: e.config,\n        time: e.time,\n        day: e.selectedDay,\n        onEventWasClicked: e.handleClickOnEvent\n      }, null, 8, [\"config\", \"time\", \"day\", \"onEventWasClicked\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n    ])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n    !e.config.eventDialog || !e.config.eventDialog.isDisabled ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(c, {\n      key: 1,\n      \"calendar-event-prop\": e.selectedEvent,\n      \"event-element\": e.selectedEventElement,\n      time: e.time,\n      config: e.config,\n      onHide: t[3] || (t[3] = (u) => e.selectedEvent = null),\n      onEditEvent: t[4] || (t[4] = (u) => e.$emit(\"edit-event\", u)),\n      onDeleteEvent: t[5] || (t[5] = (u) => e.$emit(\"delete-event\", u))\n    }, {\n      default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((u) => [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"eventDialog\", {\n          eventDialogData: u.eventDialogData,\n          closeEventDialog: u.closeEventDialog\n        }, void 0, !0)\n      ]),\n      _: 3\n    }, 8, [\"calendar-event-prop\", \"event-element\", \"time\", \"config\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n  ]);\n}\nconst Xl = /* @__PURE__ */ j(Hl, [[\"render\", Ul], [\"__scopeId\", \"data-v-206c177e\"]]), K = class {\n  static checkEventProperties(t) {\n    var n, a, r, s, i, o;\n    t.id || console.warn(this.MISSING_ID_WARNING), t.title || console.warn(this.MISSING_TITLE_WARNING), t.time || console.warn(this.MISSING_TIME_WARNING), (n = t == null ? void 0 : t.time) != null && n.start || console.warn(this.MISSING_TIME_START_WARNING), (a = t == null ? void 0 : t.time) != null && a.end || console.warn(this.MISSING_TIME_END_WARNING), (r = t.time) != null && r.start && ((s = t.time) != null && s.end) && !Le.test(t.time.start) && !ft.test(t.time.start) && console.warn(\n      `${this.PREFIX} event property 'time.start' expects a string formatted like 'YYYY-MM-DD hh:mm', or 'YYYY-MM-DD', received ${t.time.start} \n${this.SUFFIX}`\n    ), (i = t.time) != null && i.start && ((o = t.time) != null && o.end) && !Le.test(t.time.end) && !ft.test(t.time.end) && console.warn(\n      `${this.PREFIX} event property 'time.end' expects a string formatted like 'YYYY-MM-DD hh:mm',  or 'YYYY-MM-DD', received ${t.time.end} \n${this.SUFFIX}`\n    );\n  }\n  static checkConfig(t) {\n    t.locale && !/^[a-z]{2}-[A-Z]{2}$/.test(t.locale) && console.warn(\n      `${this.PREFIX} config.locale expects a string of format xx-XX, received: ${t.locale}`\n    ), t.defaultMode && ![\"month\", \"week\", \"day\"].some((n) => n === t.defaultMode) && console.warn(\n      `${this.PREFIX} config.defaultMode expects either one of the values \"day\", \"week\" or \"month\"`\n    );\n  }\n};\nlet ae = K;\nF(ae, \"PREFIX\", \"[Qalendar warning]\"), // public static SUFFIX = 'This is a development warning, which will never be displayed in production environments'\nF(ae, \"SUFFIX\", \"\"), F(ae, \"MISSING_ID_WARNING\", `${K.PREFIX} required event property 'id' is missing \n${K.SUFFIX}`), F(ae, \"MISSING_TITLE_WARNING\", `${K.PREFIX} required event property 'title' is missing \n${K.SUFFIX}`), F(ae, \"MISSING_TIME_WARNING\", `${K.PREFIX} required event property 'time' is missing \n${K.SUFFIX}`), F(ae, \"MISSING_TIME_START_WARNING\", `${K.PREFIX} required event property 'time.start' is missing \n${K.SUFFIX}`), F(ae, \"MISSING_TIME_END_WARNING\", `${K.PREFIX} required event property 'time.end' is missing \n${K.SUFFIX}`);\nconst fn = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n  name: \"Qalendar\",\n  components: {\n    Month: Xl,\n    AppHeader: Ls,\n    Week: tl\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    events: {\n      type: Array,\n      default: () => []\n    },\n    selectedDate: {\n      type: Date,\n      default: /* @__PURE__ */ new Date()\n    },\n    isLoading: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  emits: [\n    \"event-was-clicked\",\n    \"event-was-resized\",\n    \"event-was-dragged\",\n    \"updated-period\",\n    \"updated-mode\",\n    \"edit-event\",\n    \"delete-event\",\n    \"interval-was-clicked\",\n    \"day-was-clicked\",\n    // TODO: remove with v4. day-was-clicked is deprecated\n    \"date-was-clicked\",\n    \"datetime-was-clicked\"\n  ],\n  data() {\n    var e, t, n, a, r, s, i, o, l, c;\n    return {\n      wasInitialized: 0,\n      period: {\n        start: /* @__PURE__ */ new Date(),\n        end: /* @__PURE__ */ new Date(),\n        selectedDate: this.selectedDate\n      },\n      mode: ((e = this.config) == null ? void 0 : e.defaultMode) || \"week\",\n      time: new se((n = (t = this.config) == null ? void 0 : t.week) == null ? void 0 : n.startsOn, ((a = this.config) == null ? void 0 : a.locale) || null, {\n        start: this.setTimePointsFromDayBoundary(\n          ((s = (r = this.config) == null ? void 0 : r.dayBoundaries) == null ? void 0 : s.start) || 0\n        ),\n        end: this.setTimePointsFromDayBoundary(\n          ((o = (i = this.config) == null ? void 0 : i.dayBoundaries) == null ? void 0 : o.end) || 24\n        )\n      }),\n      fontFamily: ((c = (l = this.config) == null ? void 0 : l.style) == null ? void 0 : c.fontFamily) || \"'Verdana', 'Open Sans', serif\",\n      eventRenderingKey: 0,\n      // Works only as a dummy value, for re-rendering Month- and Week components, when events-watcher triggers\n      eventsDataProperty: this.events,\n      isSmall: !1,\n      ErrorsHelper: ae\n    };\n  },\n  computed: {\n    enhancedConfig() {\n      return { ...this.config, isSmall: this.isSmall };\n    }\n  },\n  watch: {\n    events: {\n      deep: !0,\n      handler(e, t) {\n        JSON.stringify(e) !== JSON.stringify(t) && (this.eventsDataProperty = e, this.eventRenderingKey = this.eventRenderingKey + 1), !this.config.isSilent && this.events.forEach((n) => this.ErrorsHelper.checkEventProperties(n));\n      },\n      immediate: !0\n    },\n    config: {\n      deep: !0,\n      handler(e) {\n        this.ErrorsHelper.checkConfig(e);\n      },\n      immediate: !0\n    }\n  },\n  mounted() {\n    this.setConfigOnMount(), this.onCalendarResize(), this.setPeriodOnMount(), window.addEventListener(\"resize\", this.onCalendarResize);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.onCalendarResize);\n  },\n  methods: {\n    setConfigOnMount() {\n      this.wasInitialized = 1;\n    },\n    /**\n     * setModeWeek is used as flag, when the user clicks \"+ see more\" for a day, in the month view\n     * */\n    handleUpdatedPeriod(e, t = !1) {\n      this.$emit(\"updated-period\", { start: e.start, end: e.end }), this.period = e, t && (this.mode = \"day\");\n    },\n    /**\n     * Update this.period according to the new mode, and then set this.mode to the provided payload\n     * */\n    handleChangeMode(e) {\n      if (e === \"day\" && (this.period.start = this.period.selectedDate, this.period.end = this.time.setDateToEndOfDay(this.period.selectedDate)), e === \"week\") {\n        const t = this.time.getCalendarWeekDateObjects(\n          this.period.selectedDate\n        );\n        this.period.start = t[0], this.period.end = this.time.setDateToEndOfDay(t[6]);\n      }\n      if (e === \"month\") {\n        const t = this.time.getCalendarMonthSplitInWeeks(\n          this.period.selectedDate.getFullYear(),\n          this.period.selectedDate.getMonth()\n        );\n        this.period.start = t[0][0];\n        const n = t[t.length - 1];\n        this.period.end = this.time.setDateToEndOfDay(\n          n[n.length - 1]\n        );\n      }\n      this.mode = e, this.$emit(\"updated-mode\", { mode: e, period: this.period });\n    },\n    onCalendarResize() {\n      const e = document.documentElement, t = document.querySelector(\".calendar-root\"), n = +window.getComputedStyle(e).fontSize.split(\"p\")[0], a = 700, r = 16 / n, s = a / r;\n      t && (this.isSmall = t.clientWidth < s, this.isSmall && ![\"day\", \"month\"].includes(this.mode) && (this.mode = \"day\"));\n    },\n    setPeriodOnMount() {\n      if (this.mode === \"week\") {\n        const e = this.time.getCalendarWeekDateObjects(\n          this.period.selectedDate\n        );\n        this.period.start = e[0], this.period.end = e[6];\n      } else if (this.mode === \"month\") {\n        const e = this.time.getCalendarMonthSplitInWeeks(\n          this.period.selectedDate.getFullYear(),\n          this.period.selectedDate.getMonth()\n        );\n        this.period.start = e[0][0];\n        const t = e[e.length - 1];\n        this.period.end = t[t.length - 1];\n      }\n    },\n    handleEventWasUpdated(e, t) {\n      const n = this.eventsDataProperty.filter(\n        (a) => a.id !== e.id\n      );\n      this.eventsDataProperty = [e, ...n], this.$emit(`event-was-${t}`, e);\n    },\n    setTimePointsFromDayBoundary(e) {\n      return se.getTimePointsFromHour(e);\n    },\n    handleDateWasClicked(e) {\n      this.$emit(\"day-was-clicked\", e), this.$emit(\"date-was-clicked\", e);\n    },\n    goToPeriod(e) {\n      this.$refs.appHeader.goToPeriod(e);\n    }\n  }\n}), ia = () => {\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.useCssVars)((e) => ({\n    \"51d82805\": e.fontFamily\n  }));\n}, sa = fn.setup;\nfn.setup = sa ? (e, t) => (ia(), sa(e, t)) : ia;\nconst Vl = { class: \"calendar-root-wrapper\" }, xl = [\"data-lang\"], ql = {\n  key: 0,\n  class: \"top-bar-loader\"\n};\nfunction Gl(e, t, n, a, r, s) {\n  var c, d;\n  const i = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"AppHeader\"), o = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Week\"), l = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"Month\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", Vl, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"calendar-root\", {\n        \"mode-is-day\": e.mode === \"day\",\n        \"mode-is-week\": e.mode === \"week\",\n        \"mode-is-month\": e.mode === \"month\",\n        \"qalendar-is-small\": e.isSmall\n      }]),\n      \"data-lang\": ((d = (c = e.config) == null ? void 0 : c.locale) == null ? void 0 : d.substring(0, 2)) || \"en\"\n    }, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, { name: \"loading\" }, {\n        default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [\n          e.isLoading ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", ql)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n        ]),\n        _: 1\n      }),\n      ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(i, {\n        ref: \"appHeader\",\n        key: e.wasInitialized + e.mode,\n        config: e.config,\n        mode: e.mode,\n        time: e.time,\n        period: e.period,\n        \"is-small\": e.isSmall,\n        onChangeMode: e.handleChangeMode,\n        onUpdatedPeriod: e.handleUpdatedPeriod\n      }, null, 8, [\"config\", \"mode\", \"time\", \"period\", \"is-small\", \"onChangeMode\", \"onUpdatedPeriod\"])),\n      [\"week\", \"day\"].includes(e.mode) ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(o, {\n        key: e.period.start.getTime() + e.period.end.getTime() + e.eventRenderingKey,\n        \"events-prop\": e.eventsDataProperty,\n        period: e.period,\n        config: e.config,\n        \"mode-prop\": e.mode,\n        time: e.time,\n        onEventWasClicked: t[0] || (t[0] = (u) => e.$emit(\"event-was-clicked\", u)),\n        onEventWasResized: t[1] || (t[1] = (u) => e.handleEventWasUpdated(u, \"resized\")),\n        onEventWasDragged: t[2] || (t[2] = (u) => e.handleEventWasUpdated(u, \"dragged\")),\n        onEditEvent: t[3] || (t[3] = (u) => e.$emit(\"edit-event\", u)),\n        onDeleteEvent: t[4] || (t[4] = (u) => e.$emit(\"delete-event\", u)),\n        onIntervalWasClicked: t[5] || (t[5] = (u) => e.$emit(\"interval-was-clicked\", u)),\n        onDayWasClicked: t[6] || (t[6] = (u) => e.$emit(\"day-was-clicked\", u)),\n        onDatetimeWasClicked: t[7] || (t[7] = (u) => e.$emit(\"datetime-was-clicked\", u))\n      }, {\n        weekDayEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((u) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"weekDayEvent\", {\n            eventData: u.eventData\n          })\n        ]),\n        eventDialog: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((u) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"eventDialog\", {\n            eventDialogData: u.eventDialogData,\n            closeEventDialog: u.closeEventDialog\n          })\n        ]),\n        customCurrentTime: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"customCurrentTime\")\n        ]),\n        _: 3\n      }, 8, [\"events-prop\", \"period\", \"config\", \"mode-prop\", \"time\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0),\n      e.mode === \"month\" ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(l, {\n        key: e.period.start.getTime() + e.period.end.getTime() + e.eventRenderingKey,\n        \"events-prop\": e.eventsDataProperty,\n        time: e.time,\n        config: e.enhancedConfig,\n        period: e.period,\n        onEventWasClicked: t[8] || (t[8] = (u) => e.$emit(\"event-was-clicked\", u)),\n        onDateWasClicked: e.handleDateWasClicked,\n        onEventWasDragged: t[9] || (t[9] = (u) => e.handleEventWasUpdated(u, \"dragged\")),\n        onUpdatedPeriod: t[10] || (t[10] = (u) => e.handleUpdatedPeriod(u, !0)),\n        onEditEvent: t[11] || (t[11] = (u) => e.$emit(\"edit-event\", u)),\n        onDeleteEvent: t[12] || (t[12] = (u) => e.$emit(\"delete-event\", u))\n      }, {\n        eventDialog: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((u) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"eventDialog\", {\n            eventDialogData: u.eventDialogData,\n            closeEventDialog: u.closeEventDialog\n          })\n        ]),\n        monthEvent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)((u) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"monthEvent\", {\n            eventData: u.eventData\n          })\n        ]),\n        dayCell: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(({ dayData: u }) => [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(e.$slots, \"dayCell\", { dayData: u })\n        ]),\n        _: 3\n      }, 8, [\"events-prop\", \"time\", \"config\", \"period\", \"onDateWasClicked\"])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"\", !0)\n    ], 10, xl)\n  ]);\n}\nconst Jl = /* @__PURE__ */ j(fn, [[\"render\", Gl]]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/qalendar/dist/qalendar.es.js\n");

/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiDrag: () => (/* binding */ MultiDragPlugin),\n/* harmony export */   Sortable: () => (/* binding */ Sortable),\n/* harmony export */   Swap: () => (/* binding */ SwapPlugin),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/**!\n * Sortable 1.14.0\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar version = \"1.14.0\";\n\nfunction userAgent(pattern) {\n  if (typeof window !== 'undefined' && window.navigator) {\n    return !! /*@__PURE__*/navigator.userAgent.match(pattern);\n  }\n}\n\nvar IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i);\nvar Edge = userAgent(/Edge/i);\nvar FireFox = userAgent(/firefox/i);\nvar Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nvar IOS = userAgent(/iP(ad|od|hone)/i);\nvar ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n\nvar captureMode = {\n  capture: false,\n  passive: false\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(\n/**HTMLElement*/\nel,\n/**String*/\nselector) {\n  if (!selector) return;\n  selector[0] === '>' && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;\n}\n\nfunction closest(\n/**HTMLElement*/\nel,\n/**String*/\nselector,\n/**HTMLElement*/\nctx, includeCTX) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while (el = getParentOrHost(el));\n  }\n\n  return null;\n}\n\nvar R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? 'add' : 'remove'](name);\n    } else {\n      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  var style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, '');\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf('webkit') === -1) {\n        prop = '-webkit-' + prop;\n      }\n\n      style[prop] = val + (typeof val === 'string' ? '' : 'px');\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  var appliedTransforms = '';\n\n  if (typeof el === 'string') {\n    appliedTransforms = el;\n  } else {\n    do {\n      var transform = css(el, 'transform');\n\n      if (transform && transform !== 'none') {\n        appliedTransforms = transform + ' ' + appliedTransforms;\n      }\n      /* jshint boss:true */\n\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;\n  /*jshint -W056 */\n\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    var list = ctx.getElementsByTagName(tagName),\n        i = 0,\n        n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  var scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\n\n\nfunction getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {\n  if (!el.getBoundingClientRect && el !== window) return;\n  var elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {\n    // Adjust for translate()\n    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n\n    if (!IE11OrLess) {\n      do {\n        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {\n          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container\n\n          top -= containerRect.top + parseInt(css(container, 'border-top-width'));\n          left -= containerRect.left + parseInt(css(container, 'border-left-width'));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n          break;\n        }\n        /* jshint boss:true */\n\n      } while (container = container.parentNode);\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    var elMatrix = matrix(container || el),\n        scaleX = elMatrix && elMatrix.a,\n        scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n      width /= scaleX;\n      height /= scaleY;\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\n\n\nfunction isScrolledPast(el, elSide, parentSide) {\n  var parent = getParentAutoScrollElement(el, true),\n      elSideVal = getRect(el)[elSide];\n  /* jshint boss:true */\n\n  while (parent) {\n    var parentSideVal = getRect(parent)[parentSide],\n        visible = void 0;\n\n    if (parentSide === 'top' || parentSide === 'left') {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n    if (parent === getWindowScrollingElement()) break;\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\n\n\nfunction getChild(el, childNum, options, includeDragEl) {\n  var currentChild = 0,\n      i = 0,\n      children = el.children;\n\n  while (i < children.length) {\n    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n\n      currentChild++;\n    }\n\n    i++;\n  }\n\n  return null;\n}\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\n\n\nfunction lastChild(el, selector) {\n  var last = el.lastElementChild;\n\n  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\n\n\nfunction index(el, selector) {\n  var index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n  /* jshint boss:true */\n\n\n  while (el = el.previousElementSibling) {\n    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {\n      index++;\n    }\n  }\n\n  return index;\n}\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\n\n\nfunction getRelativeScrollOffset(el) {\n  var offsetLeft = 0,\n      offsetTop = 0,\n      winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      var elMatrix = matrix(el),\n          scaleX = elMatrix.a,\n          scaleY = elMatrix.d;\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\n\n\nfunction indexOfObject(arr, obj) {\n  for (var i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n  var elem = el;\n  var gotSelf = false;\n\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n      var elemCSS = css(elem);\n\n      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {\n        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n\n  } while (elem = elem.parentNode);\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (var key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);\n}\n\nvar _throttleTimeout;\n\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      var args = arguments,\n          _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  var Polymer = window.Polymer;\n  var $ = __webpack_provided_window_dot_jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, 'position', 'absolute');\n  css(el, 'top', rect.top);\n  css(el, 'left', rect.left);\n  css(el, 'width', rect.width);\n  css(el, 'height', rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, 'position', '');\n  css(el, 'top', '');\n  css(el, 'left', '');\n  css(el, 'width', '');\n  css(el, 'height', '');\n}\n\nvar expando = 'Sortable' + new Date().getTime();\n\nfunction AnimationStateManager() {\n  var animationStates = [],\n      animationCallbackId;\n  return {\n    captureAnimationState: function captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      var children = [].slice.call(this.el.children);\n      children.forEach(function (child) {\n        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;\n        animationStates.push({\n          target: child,\n          rect: getRect(child)\n        });\n\n        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation\n\n\n        if (child.thisAnimationDuration) {\n          var childMatrix = matrix(child, true);\n\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n    addAnimationState: function addAnimationState(state) {\n      animationStates.push(state);\n    },\n    removeAnimationState: function removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, {\n        target: target\n      }), 1);\n    },\n    animateAll: function animateAll(callback) {\n      var _this = this;\n\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === 'function') callback();\n        return;\n      }\n\n      var animating = false,\n          animationTime = 0;\n      animationStates.forEach(function (state) {\n        var time = 0,\n            target = state.target,\n            fromRect = target.fromRect,\n            toRect = getRect(target),\n            prevFromRect = target.prevFromRect,\n            prevToRect = target.prevToRect,\n            animatingRect = state.rect,\n            targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect\n          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);\n          }\n        } // if fromRect != toRect: animate\n\n\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = _this.options.animation;\n          }\n\n          _this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n      clearTimeout(animationCallbackId);\n\n      if (!animating) {\n        if (typeof callback === 'function') callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === 'function') callback();\n        }, animationTime);\n      }\n\n      animationStates = [];\n    },\n    animate: function animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, 'transition', '');\n        css(target, 'transform', '');\n        var elMatrix = matrix(this.el),\n            scaleX = elMatrix && elMatrix.a,\n            scaleY = elMatrix && elMatrix.d,\n            translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n            translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n        css(target, 'transform', 'translate3d(0,0,0)');\n        typeof target.animated === 'number' && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, 'transition', '');\n          css(target, 'transform', '');\n          target.animated = false;\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    }\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;\n}\n\nvar plugins = [];\nvar defaults = {\n  initializeByDefault: true\n};\nvar PluginManager = {\n  mount: function mount(plugin) {\n    // Set default static properties\n    for (var option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n\n    plugins.forEach(function (p) {\n      if (p.pluginName === plugin.pluginName) {\n        throw \"Sortable: Cannot mount plugin \".concat(plugin.pluginName, \" more than once\");\n      }\n    });\n    plugins.push(plugin);\n  },\n  pluginEvent: function pluginEvent(eventName, sortable, evt) {\n    var _this = this;\n\n    this.eventCanceled = false;\n\n    evt.cancel = function () {\n      _this.eventCanceled = true;\n    };\n\n    var eventNameGlobal = eventName + 'Global';\n    plugins.forEach(function (plugin) {\n      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable\n\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      } // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n\n\n      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {\n        sortable[plugin.pluginName][eventName](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      }\n    });\n  },\n  initializePlugins: function initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach(function (plugin) {\n      var pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n      var initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized; // Add default options from plugin\n\n      _extends(defaults, initialized.defaults);\n    });\n\n    for (var option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      var modified = this.modifyOption(sortable, option, sortable.options[option]);\n\n      if (typeof modified !== 'undefined') {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties: function getEventProperties(name, sortable) {\n    var eventProperties = {};\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.eventProperties !== 'function') return;\n\n      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));\n    });\n    return eventProperties;\n  },\n  modifyOption: function modifyOption(sortable, name, value) {\n    var modifiedValue;\n    plugins.forEach(function (plugin) {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n\n      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {\n        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);\n      }\n    });\n    return modifiedValue;\n  }\n};\n\nfunction dispatchEvent(_ref) {\n  var sortable = _ref.sortable,\n      rootEl = _ref.rootEl,\n      name = _ref.name,\n      targetEl = _ref.targetEl,\n      cloneEl = _ref.cloneEl,\n      toEl = _ref.toEl,\n      fromEl = _ref.fromEl,\n      oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex,\n      oldDraggableIndex = _ref.oldDraggableIndex,\n      newDraggableIndex = _ref.newDraggableIndex,\n      originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      extraEventProperties = _ref.extraEventProperties;\n  sortable = sortable || rootEl && rootEl[expando];\n  if (!sortable) return;\n  var evt,\n      options = sortable.options,\n      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));\n\n  for (var option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n\nvar _excluded = [\"evt\"];\n\nvar pluginEvent = function pluginEvent(eventName, sortable) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      originalEvent = _ref.evt,\n      data = _objectWithoutProperties(_ref, _excluded);\n\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({\n    dragEl: dragEl,\n    parentEl: parentEl,\n    ghostEl: ghostEl,\n    rootEl: rootEl,\n    nextEl: nextEl,\n    lastDownEl: lastDownEl,\n    cloneEl: cloneEl,\n    cloneHidden: cloneHidden,\n    dragStarted: moved,\n    putSortable: putSortable,\n    activeSortable: Sortable.active,\n    originalEvent: originalEvent,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex,\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n    cloneNowHidden: function cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown: function cloneNowShown() {\n      cloneHidden = false;\n    },\n    dispatchSortableEvent: function dispatchSortableEvent(name) {\n      _dispatchEvent({\n        sortable: sortable,\n        name: name,\n        originalEvent: originalEvent\n      });\n    }\n  }, data));\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent(_objectSpread2({\n    putSortable: putSortable,\n    cloneEl: cloneEl,\n    targetEl: dragEl,\n    rootEl: rootEl,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex\n  }, info));\n}\n\nvar dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    oldIndex,\n    newIndex,\n    oldDraggableIndex,\n    newDraggableIndex,\n    activeGroup,\n    putSortable,\n    awaitingDragStarted = false,\n    ignoreNextClick = false,\n    sortables = [],\n    tapEvt,\n    touchEvt,\n    lastDx,\n    lastDy,\n    tapDistanceLeft,\n    tapDistanceTop,\n    moved,\n    lastTarget,\n    lastDirection,\n    pastFirstInvertThresh = false,\n    isCircumstantialInvert = false,\n    targetMoveDistance,\n    // For positioning ghost absolutely\nghostRelativeParent,\n    ghostRelativeParentInitialScroll = [],\n    // (left, top)\n_silent = false,\n    savedInputChecked = [];\n/** @const */\n\nvar documentExists = typeof document !== 'undefined',\n    PositionGhostAbsolutely = IOS,\n    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n    // This will not pass for IE9, because IE9 DnD only works on anchors\nsupportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),\n    supportCssPointerEvents = function () {\n  if (!documentExists) return; // false when <= IE11\n\n  if (IE11OrLess) {\n    return false;\n  }\n\n  var el = document.createElement('x');\n  el.style.cssText = 'pointer-events:auto';\n  return el.style.pointerEvents === 'auto';\n}(),\n    _detectDirection = function _detectDirection(el, options) {\n  var elCSS = css(el),\n      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      firstChildCSS = child1 && css(child1),\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,\n      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;\n\n  if (elCSS.display === 'flex') {\n    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';\n  }\n\n  if (elCSS.display === 'grid') {\n    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n  }\n\n  if (child1 && firstChildCSS[\"float\"] && firstChildCSS[\"float\"] !== 'none') {\n    var touchingSideChild2 = firstChildCSS[\"float\"] === 'left' ? 'left' : 'right';\n    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';\n  }\n\n  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';\n},\n    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {\n  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;\n},\n\n/**\n * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n * @param  {Number} x      X position\n * @param  {Number} y      Y position\n * @return {HTMLElement}   Element of the first found nearest Sortable\n */\n_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {\n  var ret;\n  sortables.some(function (sortable) {\n    var threshold = sortable[expando].options.emptyInsertThreshold;\n    if (!threshold || lastChild(sortable)) return;\n    var rect = getRect(sortable),\n        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n    if (insideHorizontally && insideVertically) {\n      return ret = sortable;\n    }\n  });\n  return ret;\n},\n    _prepareGroup = function _prepareGroup(options) {\n  function toFn(value, pull) {\n    return function (to, from, dragEl, evt) {\n      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;\n\n      if (value == null && (pull || sameGroup)) {\n        // Default pull value\n        // Default pull and put value if same group\n        return true;\n      } else if (value == null || value === false) {\n        return false;\n      } else if (pull && value === 'clone') {\n        return value;\n      } else if (typeof value === 'function') {\n        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n      } else {\n        var otherGroup = (pull ? to : from).options.group.name;\n        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;\n      }\n    };\n  }\n\n  var group = {};\n  var originalGroup = options.group;\n\n  if (!originalGroup || _typeof(originalGroup) != 'object') {\n    originalGroup = {\n      name: originalGroup\n    };\n  }\n\n  group.name = originalGroup.name;\n  group.checkPull = toFn(originalGroup.pull, true);\n  group.checkPut = toFn(originalGroup.put);\n  group.revertClone = originalGroup.revertClone;\n  options.group = group;\n},\n    _hideGhostForTarget = function _hideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', 'none');\n  }\n},\n    _unhideGhostForTarget = function _unhideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', '');\n  }\n}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\n\nif (documentExists) {\n  document.addEventListener('click', function (evt) {\n    if (ignoreNextClick) {\n      evt.preventDefault();\n      evt.stopPropagation && evt.stopPropagation();\n      evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n      ignoreNextClick = false;\n      return false;\n    }\n  }, true);\n}\n\nvar nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n\n    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      var event = {};\n\n      for (var i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n\n      event.target = event.rootEl = nearest;\n      event.preventDefault = void 0;\n      event.stopPropagation = void 0;\n\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nvar _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\n\n\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw \"Sortable: `el` must be an HTMLElement, not \".concat({}.toString.call(el));\n  }\n\n  this.el = el; // root element\n\n  this.options = options = _extends({}, options); // Export instance\n\n  el[expando] = this;\n  var defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',\n    swapThreshold: 1,\n    // percentage; 0 <= x <= 1\n    invertSwap: false,\n    // invert always\n    invertedSwapThreshold: null,\n    // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function direction() {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: 'sortable-ghost',\n    chosenClass: 'sortable-chosen',\n    dragClass: 'sortable-drag',\n    ignore: 'a, img',\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function setData(dataTransfer, dragEl) {\n      dataTransfer.setData('Text', dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: 'data-id',\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,\n    forceFallback: false,\n    fallbackClass: 'sortable-fallback',\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: {\n      x: 0,\n      y: 0\n    },\n    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,\n    emptyInsertThreshold: 5\n  };\n  PluginManager.initializePlugins(this, el, defaults); // Set default options\n\n  for (var name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options); // Bind all private methods\n\n\n  for (var fn in this) {\n    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n      this[fn] = this[fn].bind(this);\n    }\n  } // Setup drag mode\n\n\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  } // Bind events\n\n\n  if (options.supportPointer) {\n    on(el, 'pointerdown', this._onTapStart);\n  } else {\n    on(el, 'mousedown', this._onTapStart);\n    on(el, 'touchstart', this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, 'dragover', this);\n    on(el, 'dragenter', this);\n  }\n\n  sortables.push(this.el); // Restore sorting\n\n  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager\n\n  _extends(this, AnimationStateManager());\n}\n\nSortable.prototype =\n/** @lends Sortable.prototype */\n{\n  constructor: Sortable,\n  _isOutsideThisEl: function _isOutsideThisEl(target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n  _getDirection: function _getDirection(evt, target) {\n    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n  },\n  _onTapStart: function _onTapStart(\n  /** Event|TouchEvent */\n  evt) {\n    if (!evt.cancelable) return;\n\n    var _this = this,\n        el = this.el,\n        options = this.options,\n        preventOnFilter = options.preventOnFilter,\n        type = evt.type,\n        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,\n        target = (touch || evt).target,\n        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,\n        filter = options.filter;\n\n    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n    if (dragEl) {\n      return;\n    }\n\n    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n      return; // only left button and enabled\n    } // cancel dnd if original target is content editable\n\n\n    if (originalTarget.isContentEditable) {\n      return;\n    } // Safari ignores further event handling after mousedown\n\n\n    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    } // Get the index of the dragged element within its parent\n\n\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable); // Check filter\n\n    if (typeof filter === 'function') {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: 'filter',\n          targetEl: target,\n          toEl: el,\n          fromEl: el\n        });\n\n        pluginEvent('filter', _this, {\n          evt: evt\n        });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(',').some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: 'filter',\n            targetEl: target,\n            fromEl: el,\n            toEl: el\n          });\n\n          pluginEvent('filter', _this, {\n            evt: evt\n          });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    } // Prepare `dragstart`\n\n\n    this._prepareDragStart(evt, touch, target);\n  },\n  _prepareDragStart: function _prepareDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch,\n  /** HTMLElement */\n  target) {\n    var _this = this,\n        el = _this.el,\n        options = _this.options,\n        ownerDocument = el.ownerDocument,\n        dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      var dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n      Sortable.dragged = dragEl;\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY\n      };\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n      dragEl.style['will-change'] = 'all';\n\n      dragStartFn = function dragStartFn() {\n        pluginEvent('delayEnded', _this, {\n          evt: evt\n        });\n\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n\n          return;\n        } // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n\n\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        } // Bind the events: dragstart/dragend\n\n\n        _this._triggerDragStart(evt, touch); // Drag start event\n\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'choose',\n          originalEvent: evt\n        }); // Chosen item\n\n\n        toggleClass(dragEl, options.chosenClass, true);\n      }; // Disable \"draggable\"\n\n\n      options.ignore.split(',').forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mouseup', _this._onDrop);\n      on(ownerDocument, 'touchend', _this._onDrop);\n      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)\n\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent('delayStart', this, {\n        evt: evt\n      }); // Delay is impossible for native DnD in Edge or IE\n\n      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n\n          return;\n        } // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n\n\n        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(\n  /** TouchEvent|PointerEvent **/\n  e) {\n    var touch = e.touches ? e.touches[0] : e;\n\n    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {\n      this._disableDelayedDrag();\n    }\n  },\n  _disableDelayedDrag: function _disableDelayedDrag() {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n  _disableDelayedDragEvents: function _disableDelayedDragEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n    off(ownerDocument, 'touchend', this._disableDelayedDrag);\n    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n  },\n  _triggerDragStart: function _triggerDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch) {\n    touch = touch || evt.pointerType == 'touch' && evt;\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, 'pointermove', this._onTouchMove);\n      } else if (touch) {\n        on(document, 'touchmove', this._onTouchMove);\n      } else {\n        on(document, 'mousemove', this._onTouchMove);\n      }\n    } else {\n      on(dragEl, 'dragend', this);\n      on(rootEl, 'dragstart', this._onDragStart);\n    }\n\n    try {\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n  _dragStarted: function _dragStarted(fallback, evt) {\n\n    awaitingDragStarted = false;\n\n    if (rootEl && dragEl) {\n      pluginEvent('dragStarted', this, {\n        evt: evt\n      });\n\n      if (this.nativeDraggable) {\n        on(document, 'dragover', _checkOutsideTargetEl);\n      }\n\n      var options = this.options; // Apply effect\n\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n      Sortable.active = this;\n      fallback && this._appendGhost(); // Drag start event\n\n      _dispatchEvent({\n        sortable: this,\n        name: 'start',\n        originalEvent: evt\n      });\n    } else {\n      this._nulling();\n    }\n  },\n  _emulateDragOver: function _emulateDragOver() {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n      var parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            var inserted = void 0;\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        }\n        /* jshint boss:true */\n        while (parent = parent.parentNode);\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n  _onTouchMove: function _onTouchMove(\n  /**TouchEvent*/\n  evt) {\n    if (tapEvt) {\n      var options = this.options,\n          fallbackTolerance = options.fallbackTolerance,\n          fallbackOffset = options.fallbackOffset,\n          touch = evt.touches ? evt.touches[0] : evt,\n          ghostMatrix = ghostEl && matrix(ghostEl, true),\n          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),\n          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),\n          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging\n\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n          return;\n        }\n\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy\n          };\n        }\n\n        var cssMatrix = \"matrix(\".concat(ghostMatrix.a, \",\").concat(ghostMatrix.b, \",\").concat(ghostMatrix.c, \",\").concat(ghostMatrix.d, \",\").concat(ghostMatrix.e, \",\").concat(ghostMatrix.f, \")\");\n        css(ghostEl, 'webkitTransform', cssMatrix);\n        css(ghostEl, 'mozTransform', cssMatrix);\n        css(ghostEl, 'msTransform', cssMatrix);\n        css(ghostEl, 'transform', cssMatrix);\n        lastDx = dx;\n        lastDy = dy;\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n  _appendGhost: function _appendGhost() {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      var container = this.options.fallbackOnBody ? document.body : rootEl,\n          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n          options = this.options; // Position absolutely\n\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n      css(ghostEl, 'transition', '');\n      css(ghostEl, 'transform', '');\n      css(ghostEl, 'box-sizing', 'border-box');\n      css(ghostEl, 'margin', 0);\n      css(ghostEl, 'top', rect.top);\n      css(ghostEl, 'left', rect.left);\n      css(ghostEl, 'width', rect.width);\n      css(ghostEl, 'height', rect.height);\n      css(ghostEl, 'opacity', '0.8');\n      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');\n      css(ghostEl, 'zIndex', '100000');\n      css(ghostEl, 'pointerEvents', 'none');\n      Sortable.ghost = ghostEl;\n      container.appendChild(ghostEl); // Set transform-origin\n\n      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');\n    }\n  },\n  _onDragStart: function _onDragStart(\n  /**Event*/\n  evt,\n  /**boolean*/\n  fallback) {\n    var _this = this;\n\n    var dataTransfer = evt.dataTransfer;\n    var options = _this.options;\n    pluginEvent('dragStart', this, {\n      evt: evt\n    });\n\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n\n      return;\n    }\n\n    pluginEvent('setupClone', this);\n\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n      cloneEl.draggable = false;\n      cloneEl.style['will-change'] = '';\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      Sortable.clone = cloneEl;\n    } // #1143: IFrame support workaround\n\n\n    _this.cloneId = _nextTick(function () {\n      pluginEvent('clone', _this);\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'clone'\n      });\n    });\n    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events\n\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, 'mouseup', _this._onDrop);\n      off(document, 'touchend', _this._onDrop);\n      off(document, 'touchcancel', _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = 'move';\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, 'drop', _this); // #1276 fix:\n\n      css(dragEl, 'transform', 'translateZ(0)');\n    }\n\n    awaitingDragStarted = true;\n    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n    on(document, 'selectstart', _this);\n    moved = true;\n\n    if (Safari) {\n      css(document.body, 'user-select', 'none');\n    }\n  },\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function _onDragOver(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        target = evt.target,\n        dragRect,\n        targetRect,\n        revert,\n        options = this.options,\n        group = options.group,\n        activeSortable = Sortable.active,\n        isOwner = activeGroup === group,\n        canSort = options.sort,\n        fromSortable = putSortable || activeSortable,\n        vertical,\n        _this = this,\n        completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, _objectSpread2({\n        evt: evt,\n        isOwner: isOwner,\n        axis: vertical ? 'vertical' : 'horizontal',\n        revert: revert,\n        dragRect: dragRect,\n        targetRect: targetRect,\n        canSort: canSort,\n        fromSortable: fromSortable,\n        target: target,\n        completed: completed,\n        onMove: function onMove(target, after) {\n          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);\n        },\n        changed: changed\n      }, extra));\n    } // Capture animation state\n\n\n    function capture() {\n      dragOverEvent('dragOverAnimationCapture');\n\n      _this.captureAnimationState();\n\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    } // Return invocation when dragEl is inserted (or completed)\n\n\n    function completed(insertion) {\n      dragOverEvent('dragOverCompleted', {\n        insertion: insertion\n      });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        } // Animation\n\n\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n\n        _this.animateAll(function () {\n          dragOverEvent('dragOverAnimationComplete');\n          _this._ignoreWhileAnimating = null;\n        });\n\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      } // Null lastTarget if it is not inside a previously swapped element\n\n\n      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {\n        lastTarget = null;\n      } // no bubbling and not fallback\n\n\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted\n\n\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n      return completedFired = true;\n    } // Call when dragEl has been inserted\n\n\n    function changed() {\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'change',\n        toEl: el,\n        newIndex: newIndex,\n        newDraggableIndex: newDraggableIndex,\n        originalEvent: evt\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n    dragOverEvent('dragOver');\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list\n    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {\n      vertical = this._getDirection(evt, target) === 'vertical';\n      dragRect = getRect(dragEl);\n      dragOverEvent('dragOverValid');\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n\n        capture();\n\n        this._hideClone();\n\n        dragOverEvent('revert');\n\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      var elLastChild = lastChild(el, options.draggable);\n\n      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {\n        // Insert to end of list\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        } // if there is a last element, it is the target\n\n\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          targetRect = getRect(target);\n        }\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {\n        // Insert to start of list\n        var firstChild = getChild(el, 0, options, true);\n\n        if (firstChild === dragEl) {\n          return completed(false);\n        }\n\n        target = firstChild;\n        targetRect = getRect(target);\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {\n          capture();\n          el.insertBefore(dragEl, firstChild);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        targetRect = getRect(target);\n        var direction = 0,\n            targetBeforeFirstSwap,\n            differentLevel = dragEl.parentNode !== el,\n            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),\n            side1 = vertical ? 'top' : 'left',\n            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),\n            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;\n        }\n\n        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);\n        var sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          var dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));\n        } // If dragEl is already beside target: Do not insert\n\n\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n        lastDirection = direction;\n        var nextSibling = target.nextElementSibling,\n            after = false;\n        after = direction === 1;\n\n        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n          } // Undo chrome's scroll adjustment (has no effect on other browsers)\n\n\n          if (scrolledPastTop) {\n            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n          // must be done before animation\n\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);\n          }\n\n          changed();\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n  _ignoreWhileAnimating: null,\n  _offMoveEvents: function _offMoveEvents() {\n    off(document, 'mousemove', this._onTouchMove);\n    off(document, 'touchmove', this._onTouchMove);\n    off(document, 'pointermove', this._onTouchMove);\n    off(document, 'dragover', nearestEmptyInsertDetectEvent);\n    off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n    off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n  },\n  _offUpEvents: function _offUpEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._onDrop);\n    off(ownerDocument, 'touchend', this._onDrop);\n    off(ownerDocument, 'pointerup', this._onDrop);\n    off(ownerDocument, 'touchcancel', this._onDrop);\n    off(document, 'selectstart', this);\n  },\n  _onDrop: function _onDrop(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        options = this.options; // Get the index of the dragged element within its parent\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n    pluginEvent('drop', this, {\n      evt: evt\n    });\n    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    if (Sortable.eventCanceled) {\n      this._nulling();\n\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n    clearInterval(this._loopId);\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n\n    _cancelNextTick(this._dragStartId); // Unbind events\n\n\n    if (this.nativeDraggable) {\n      off(document, 'drop', this);\n      off(el, 'dragstart', this._onDragStart);\n    }\n\n    this._offMoveEvents();\n\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, 'user-select', '');\n    }\n\n    css(dragEl, 'transform', '');\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        // Remove clone(s)\n        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, 'dragend', this);\n        }\n\n        _disableDraggable(dragEl);\n\n        dragEl.style['will-change'] = ''; // Remove classes\n        // ghostClass is added in dragStarted\n\n        if (moved && !awaitingDragStarted) {\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n        }\n\n        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n        _dispatchEvent({\n          sortable: this,\n          name: 'unchoose',\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'add',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            }); // Remove event\n\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'remove',\n              toEl: parentEl,\n              originalEvent: evt\n            }); // drag from one list and drop into another\n\n\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'sort',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'sort',\n              toEl: parentEl,\n              originalEvent: evt\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: 'update',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'sort',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n            }\n          }\n        }\n\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: 'end',\n            toEl: parentEl,\n            originalEvent: evt\n          }); // Save sorting\n\n\n          this.save();\n        }\n      }\n    }\n\n    this._nulling();\n  },\n  _nulling: function _nulling() {\n    pluginEvent('nulling', this);\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n  handleEvent: function handleEvent(\n  /**Event*/\n  evt) {\n    switch (evt.type) {\n      case 'drop':\n      case 'dragend':\n        this._onDrop(evt);\n\n        break;\n\n      case 'dragenter':\n      case 'dragover':\n        if (dragEl) {\n          this._onDragOver(evt);\n\n          _globalDragOver(evt);\n        }\n\n        break;\n\n      case 'selectstart':\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function toArray() {\n    var order = [],\n        el,\n        children = this.el.children,\n        i = 0,\n        n = children.length,\n        options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function sort(order, useAnimation) {\n    var items = {},\n        rootEl = this.el;\n    this.toArray().forEach(function (id, i) {\n      var el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n    useAnimation && this.captureAnimationState();\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n    useAnimation && this.animateAll();\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function save() {\n    var store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function closest$1(el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function option(name, value) {\n    var options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      var modifiedValue = PluginManager.modifyOption(this, name, value);\n\n      if (typeof modifiedValue !== 'undefined') {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === 'group') {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function destroy() {\n    pluginEvent('destroy', this);\n    var el = this.el;\n    el[expando] = null;\n    off(el, 'mousedown', this._onTapStart);\n    off(el, 'touchstart', this._onTapStart);\n    off(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, 'dragover', this);\n      off(el, 'dragenter', this);\n    } // Remove draggable attributes\n\n\n    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n      el.removeAttribute('draggable');\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n    this.el = el = null;\n  },\n  _hideClone: function _hideClone() {\n    if (!cloneHidden) {\n      pluginEvent('hideClone', this);\n      if (Sortable.eventCanceled) return;\n      css(cloneEl, 'display', 'none');\n\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      cloneHidden = true;\n    }\n  },\n  _showClone: function _showClone(putSortable) {\n    if (putSortable.lastPutMode !== 'clone') {\n      this._hideClone();\n\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent('showClone', this);\n      if (Sortable.eventCanceled) return; // show clone at dragEl or original position\n\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, 'display', '');\n      cloneHidden = false;\n    }\n  }\n};\n\nfunction _globalDragOver(\n/**Event*/\nevt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = 'move';\n  }\n\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {\n  var evt,\n      sortable = fromEl[expando],\n      onMoveFn = sortable.options.onMove,\n      retVal; // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent('move', {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n  evt.originalEvent = originalEvent;\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsFirst(evt, vertical, sortable) {\n  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));\n  var spacer = 10;\n  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  var spacer = 10;\n  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;\n}\n\nfunction _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n      targetLength = vertical ? targetRect.height : targetRect.width,\n      targetS1 = vertical ? targetRect.top : targetRect.left,\n      targetS2 = vertical ? targetRect.bottom : targetRect.right,\n      invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n        : mouseOnAxis > targetS2 - targetMoveDistance) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\n\n\nfunction _getInsertDirection(target) {\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\n\n\nfunction _generateId(el) {\n  var str = el.tagName + el.className + el.src + el.href + el.textContent,\n      i = str.length,\n      sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n  var inputs = root.getElementsByTagName('input');\n  var idx = inputs.length;\n\n  while (idx--) {\n    var el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n} // Fixed #973:\n\n\nif (documentExists) {\n  on(document, 'touchmove', function (evt) {\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n} // Export utils\n\n\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function is(el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild\n};\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\n\nSortable.get = function (element) {\n  return element[expando];\n};\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\n\n\nSortable.mount = function () {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n  plugins.forEach(function (plugin) {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw \"Sortable: Mounted plugin must be a constructor function, not \".concat({}.toString.call(plugin));\n    }\n\n    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);\n    PluginManager.mount(plugin);\n  });\n};\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\n\n\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n}; // Export\n\n\nSortable.version = version;\n\nvar autoScrolls = [],\n    scrollEl,\n    scrollRootEl,\n    scrolling = false,\n    lastAutoScrollX,\n    lastAutoScrollY,\n    touchEvt$1,\n    pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      forceAutoScrollFallback: false,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true\n    }; // Bind all private methods\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted: function dragStarted(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (this.sortable.nativeDraggable) {\n        on(document, 'dragover', this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, 'pointermove', this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, 'touchmove', this._handleFallbackAutoScroll);\n        } else {\n          on(document, 'mousemove', this._handleFallbackAutoScroll);\n        }\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref2) {\n      var originalEvent = _ref2.originalEvent;\n\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n    drop: function drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, 'dragover', this._handleAutoScroll);\n      } else {\n        off(document, 'pointermove', this._handleFallbackAutoScroll);\n        off(document, 'touchmove', this._handleFallbackAutoScroll);\n        off(document, 'mousemove', this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n    nulling: function nulling() {\n      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n      autoScrolls.length = 0;\n    },\n    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {\n      var _this = this;\n\n      var x = (evt.touches ? evt.touches[0] : evt).clientX,\n          y = (evt.touches ? evt.touches[0] : evt).clientY,\n          elem = document.elementFromPoint(x, y);\n      touchEvt$1 = evt; // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n\n      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {\n        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change\n\n        var ogElemScroller = getParentAutoScrollElement(elem, true);\n\n        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour\n\n          pointerElemChangedInterval = setInterval(function () {\n            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n\n            autoScroll(evt, _this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {\n          clearAutoScrolls();\n          return;\n        }\n\n        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);\n      }\n    }\n  };\n  return _extends(AutoScroll, {\n    pluginName: 'scroll',\n    initializeByDefault: true\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nvar autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  var x = (evt.touches ? evt.touches[0] : evt).clientX,\n      y = (evt.touches ? evt.touches[0] : evt).clientY,\n      sens = options.scrollSensitivity,\n      speed = options.scrollSpeed,\n      winScroller = getWindowScrollingElement();\n  var scrollThisInstance = false,\n      scrollCustomFn; // New scroll root, set scrollEl\n\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n    clearAutoScrolls();\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  var layersOut = 0;\n  var currentParent = scrollEl;\n\n  do {\n    var el = currentParent,\n        rect = getRect(el),\n        top = rect.top,\n        bottom = rect.bottom,\n        left = rect.left,\n        right = rect.right,\n        width = rect.width,\n        height = rect.height,\n        canScrollX = void 0,\n        canScrollY = void 0,\n        scrollWidth = el.scrollWidth,\n        scrollHeight = el.scrollHeight,\n        elCSS = css(el),\n        scrollPosX = el.scrollLeft,\n        scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');\n    } else {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');\n    }\n\n    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (var i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n\n        autoScrolls[layersOut].pid = setInterval(function () {\n          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n          if (isFallback && this.layer === 0) {\n            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely\n\n          }\n\n          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n          if (typeof scrollCustomFn === 'function') {\n            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {\n              return;\n            }\n          }\n\n          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n        }.bind({\n          layer: layersOut\n        }), 24);\n      }\n    }\n\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nvar drop = function drop(_ref) {\n  var originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      dragEl = _ref.dragEl,\n      activeSortable = _ref.activeSortable,\n      dispatchSortableEvent = _ref.dispatchSortableEvent,\n      hideGhostForTarget = _ref.hideGhostForTarget,\n      unhideGhostForTarget = _ref.unhideGhostForTarget;\n  if (!originalEvent) return;\n  var toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent('spill');\n    this.onSpill({\n      dragEl: dragEl,\n      putSortable: putSortable\n    });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart: function dragStart(_ref2) {\n    var oldDraggableIndex = _ref2.oldDraggableIndex;\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill: function onSpill(_ref3) {\n    var dragEl = _ref3.dragEl,\n        putSortable = _ref3.putSortable;\n    this.sortable.captureAnimationState();\n\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n\n    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n\n    this.sortable.animateAll();\n\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop: drop\n};\n\n_extends(Revert, {\n  pluginName: 'revertOnSpill'\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill: function onSpill(_ref4) {\n    var dragEl = _ref4.dragEl,\n        putSortable = _ref4.putSortable;\n    var parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop: drop\n};\n\n_extends(Remove, {\n  pluginName: 'removeOnSpill'\n});\n\nvar lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: 'sortable-swap-highlight'\n    };\n  }\n\n  Swap.prototype = {\n    dragStart: function dragStart(_ref) {\n      var dragEl = _ref.dragEl;\n      lastSwapEl = dragEl;\n    },\n    dragOverValid: function dragOverValid(_ref2) {\n      var completed = _ref2.completed,\n          target = _ref2.target,\n          onMove = _ref2.onMove,\n          activeSortable = _ref2.activeSortable,\n          changed = _ref2.changed,\n          cancel = _ref2.cancel;\n      if (!activeSortable.options.swap) return;\n      var el = this.sortable.el,\n          options = this.options;\n\n      if (target && target !== el) {\n        var prevSwapEl = lastSwapEl;\n\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n\n      changed();\n      completed(true);\n      cancel();\n    },\n    drop: function drop(_ref3) {\n      var activeSortable = _ref3.activeSortable,\n          putSortable = _ref3.putSortable,\n          dragEl = _ref3.dragEl;\n      var toSortable = putSortable || this.sortable;\n      var options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n\n      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable) activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling: function nulling() {\n      lastSwapEl = null;\n    }\n  };\n  return _extends(Swap, {\n    pluginName: 'swap',\n    eventProperties: function eventProperties() {\n      return {\n        swapItem: lastSwapEl\n      };\n    }\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  var p1 = n1.parentNode,\n      p2 = n2.parentNode,\n      i1,\n      i2;\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n  i1 = index(n1);\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nvar multiDragElements = [],\n    multiDragClones = [],\n    lastMultiDragSelect,\n    // for selection with modifier key down (SHIFT)\nmultiDragSortable,\n    initialFolding = false,\n    // Initial multi-drag fold when drag started\nfolding = false,\n    // Folding any other time\ndragStarted = false,\n    dragEl$1,\n    clonesFromRect,\n    clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, 'pointerup', this._deselectMultiDrag);\n    } else {\n      on(document, 'mouseup', this._deselectMultiDrag);\n      on(document, 'touchend', this._deselectMultiDrag);\n    }\n\n    on(document, 'keydown', this._checkKeyDown);\n    on(document, 'keyup', this._checkKeyUp);\n    this.defaults = {\n      selectedClass: 'sortable-selected',\n      multiDragKey: null,\n      setData: function setData(dataTransfer, dragEl) {\n        var data = '';\n\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach(function (multiDragElement, i) {\n            data += (!i ? '' : ', ') + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n\n        dataTransfer.setData('Text', data);\n      }\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n    delayStartGlobal: function delayStartGlobal(_ref) {\n      var dragged = _ref.dragEl;\n      dragEl$1 = dragged;\n    },\n    delayEnded: function delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);\n    },\n    setupClone: function setupClone(_ref2) {\n      var sortable = _ref2.sortable,\n          cancel = _ref2.cancel;\n      if (!this.isMultiDrag) return;\n\n      for (var i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style['will-change'] = '';\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n\n      cancel();\n    },\n    clone: function clone(_ref3) {\n      var sortable = _ref3.sortable,\n          rootEl = _ref3.rootEl,\n          dispatchSortableEvent = _ref3.dispatchSortableEvent,\n          cancel = _ref3.cancel;\n      if (!this.isMultiDrag) return;\n\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent('clone');\n          cancel();\n        }\n      }\n    },\n    showClone: function showClone(_ref4) {\n      var cloneNowShown = _ref4.cloneNowShown,\n          rootEl = _ref4.rootEl,\n          cancel = _ref4.cancel;\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', '');\n      });\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n    hideClone: function hideClone(_ref5) {\n      var _this = this;\n\n      var sortable = _ref5.sortable,\n          cloneNowHidden = _ref5.cloneNowHidden,\n          cancel = _ref5.cancel;\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', 'none');\n\n        if (_this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n    dragStartGlobal: function dragStartGlobal(_ref6) {\n      var sortable = _ref6.sortable;\n\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.sortableIndex = index(multiDragElement);\n      }); // Sort multi-drag elements\n\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n    dragStarted: function dragStarted(_ref7) {\n      var _this2 = this;\n\n      var sortable = _ref7.sortable;\n      if (!this.isMultiDrag) return;\n\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            css(multiDragElement, 'position', 'absolute');\n          });\n          var dragRect = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRect);\n          });\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(function () {\n        folding = false;\n        initialFolding = false;\n\n        if (_this2.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n        } // Remove all auxiliary multidrag items from el, if sorting enabled\n\n\n        if (_this2.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n    dragOver: function dragOver(_ref8) {\n      var target = _ref8.target,\n          completed = _ref8.completed,\n          cancel = _ref8.cancel;\n\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n    revert: function revert(_ref9) {\n      var fromSortable = _ref9.fromSortable,\n          rootEl = _ref9.rootEl,\n          sortable = _ref9.sortable,\n          dragRect = _ref9.dragRect;\n\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach(function (multiDragElement) {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            rect: folding ? getRect(multiDragElement) : dragRect\n          });\n          unsetRect(multiDragElement);\n          multiDragElement.fromRect = dragRect;\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref10) {\n      var sortable = _ref10.sortable,\n          isOwner = _ref10.isOwner,\n          insertion = _ref10.insertion,\n          activeSortable = _ref10.activeSortable,\n          parentEl = _ref10.parentEl,\n          putSortable = _ref10.putSortable;\n      var options = this.options;\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location\n\n        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          var dragRectAbsolute = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n\n            parentEl.appendChild(multiDragElement);\n          });\n          folding = true;\n        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n\n\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            var clonesHiddenBefore = clonesHidden;\n\n            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden\n\n\n            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {\n              multiDragClones.forEach(function (clone) {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect\n                });\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {\n      var dragRect = _ref11.dragRect,\n          isOwner = _ref11.isOwner,\n          activeSortable = _ref11.activeSortable;\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {\n        clonesFromRect = _extends({}, dragRect);\n        var dragMatrix = matrix(dragEl$1, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n    dragOverAnimationComplete: function dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n    drop: function drop(_ref12) {\n      var evt = _ref12.originalEvent,\n          rootEl = _ref12.rootEl,\n          parentEl = _ref12.parentEl,\n          sortable = _ref12.sortable,\n          dispatchSortableEvent = _ref12.dispatchSortableEvent,\n          oldIndex = _ref12.oldIndex,\n          putSortable = _ref12.putSortable;\n      var toSortable = putSortable || this.sortable;\n      if (!evt) return;\n      var options = this.options,\n          children = parentEl.children; // Multi-drag selection\n\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n\n        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));\n\n        if (!~multiDragElements.indexOf(dragEl$1)) {\n          multiDragElements.push(dragEl$1);\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'select',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          }); // Modifier activated, select from last to dragEl\n\n          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {\n            var lastIndex = index(lastMultiDragSelect),\n                currentIndex = index(dragEl$1);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              var n, i;\n\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n                dispatchEvent({\n                  sortable: sortable,\n                  rootEl: rootEl,\n                  name: 'select',\n                  targetEl: children[i],\n                  originalEvt: evt\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl$1;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'deselect',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          });\n        }\n      } // Multi-drag drop\n\n\n      if (dragStarted && this.isMultiDrag) {\n        folding = false; // Do not \"unfold\" after around dragEl if reverted\n\n        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {\n          var dragRect = getRect(dragEl$1),\n              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');\n          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl$1.fromRect = dragRect;\n              multiDragElements.forEach(function (multiDragElement) {\n                multiDragElement.thisAnimationDuration = null;\n\n                if (multiDragElement !== dragEl$1) {\n                  var rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect; // Prepare unfold animation\n\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect\n                  });\n                }\n              });\n            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n\n\n            removeMultiDragElements();\n            multiDragElements.forEach(function (multiDragElement) {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n\n              multiDragIndex++;\n            }); // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n\n            if (oldIndex === index(dragEl$1)) {\n              var update = false;\n              multiDragElements.forEach(function (multiDragElement) {\n                if (multiDragElement.sortableIndex !== index(multiDragElement)) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent('update');\n              }\n            }\n          } // Must be done after capturing individual rects (scroll bar)\n\n\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      } // Remove clones if necessary\n\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        multiDragClones.forEach(function (clone) {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n    nullingGlobal: function nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n    destroyGlobal: function destroyGlobal() {\n      this._deselectMultiDrag();\n\n      off(document, 'pointerup', this._deselectMultiDrag);\n      off(document, 'mouseup', this._deselectMultiDrag);\n      off(document, 'touchend', this._deselectMultiDrag);\n      off(document, 'keydown', this._checkKeyDown);\n      off(document, 'keyup', this._checkKeyUp);\n    },\n    _deselectMultiDrag: function _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return; // Only deselect if selection is in this sortable\n\n      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable\n\n      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click\n\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        var el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: 'deselect',\n          targetEl: el,\n          originalEvt: evt\n        });\n      }\n    },\n    _checkKeyDown: function _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n    _checkKeyUp: function _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    }\n  };\n  return _extends(MultiDrag, {\n    // Static methods & properties\n    pluginName: 'multiDrag',\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select: function select(el) {\n        var sortable = el.parentNode[expando];\n        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;\n\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n\n          multiDragSortable = sortable;\n        }\n\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect: function deselect(el) {\n        var sortable = el.parentNode[expando],\n            index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      }\n    },\n    eventProperties: function eventProperties() {\n      var _this3 = this;\n\n      var oldIndicies = [],\n          newIndicies = [];\n      multiDragElements.forEach(function (multiDragElement) {\n        oldIndicies.push({\n          multiDragElement: multiDragElement,\n          index: multiDragElement.sortableIndex\n        }); // multiDragElements will already be sorted if folding\n\n        var newIndex;\n\n        if (folding && multiDragElement !== dragEl$1) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');\n        } else {\n          newIndex = index(multiDragElement);\n        }\n\n        newIndicies.push({\n          multiDragElement: multiDragElement,\n          index: newIndex\n        });\n      });\n      return {\n        items: _toConsumableArray(multiDragElements),\n        clones: [].concat(multiDragClones),\n        oldIndicies: oldIndicies,\n        newIndicies: newIndicies\n      };\n    },\n    optionListeners: {\n      multiDragKey: function multiDragKey(key) {\n        key = key.toLowerCase();\n\n        if (key === 'ctrl') {\n          key = 'Control';\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n\n        return key;\n      }\n    }\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach(function (multiDragElement, i) {\n    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\n\n\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach(function (clone, i) {\n    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach(function (multiDragElement) {\n    if (multiDragElement === dragEl$1) return;\n    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nSortable.mount(new AutoScrollPlugin());\nSortable.mount(Remove, Revert);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sortable);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sortablejs/modular/sortable.esm.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_style_index_0_id_05f52410_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_style_index_0_id_05f52410_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_style_index_0_id_05f52410_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTEudXNlWzFdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTEudXNlWzJdIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXS51c2VbMF0hLi9yZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTA1ZjUyNDEwJnNjb3BlZD10cnVlJmxhbmc9Y3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0c7QUFDbEcsWUFBd1k7O0FBRXhZOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSwwR0FBRyxDQUFDLG1WQUFPOzs7O0FBSXhCLGlFQUFlLG1WQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZT82MTNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTExLnVzZVsxXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTEudXNlWzJdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vUHVyY2hhc2VyLVZpZXcudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDVmNTI0MTAmc2NvcGVkPXRydWUmbGFuZz1jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css\n");

/***/ }),

/***/ "./node_modules/vue-filepond/dist/vue-filepond.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-filepond/dist/vue-filepond.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * vue-filepond v7.0.4\n * A handy FilePond adapter component for Vue\n * \n * Copyright (c) 2023 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n\n(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\"), __webpack_require__(/*! filepond */ \"./node_modules/filepond/dist/filepond.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports, _vue, _filepond) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _exports.setOptions = void 0;\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\n  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  // Methods not made available to the component\n  var filteredComponentMethods = [\"setOptions\", \"on\", \"off\", \"onOnce\", \"appendTo\", \"insertAfter\", \"insertBefore\", \"isAttachedTo\", \"replaceElement\", \"restoreElement\", \"destroy\"]; // Test if is supported on this client\n\n  var isSupported = (0, _filepond.supported)(); // Setup initial prop types and update when plugins are added\n\n  var getNativeConstructorFromType = function getNativeConstructorFromType(type) {\n    return {\n      string: String,\n      boolean: Boolean,\n      array: Array,\n      function: Function,\n      int: Number,\n      serverapi: Object,\n      object: Object\n    }[type];\n  }; // Activated props\n\n\n  var props = {}; // Events that need to be mapped to emitters\n\n  var events = []; // all active instances\n\n  var instances = []; // global options\n\n  var globalOptions = {};\n\n  var setOptions = function setOptions(options) {\n    globalOptions = Object.assign(globalOptions, options);\n    instances.forEach(function (instance) {\n      instance.setOptions(globalOptions);\n    });\n  };\n\n  _exports.setOptions = setOptions;\n\n  var _default = function _default() {\n    // register plugins in FilePond\n    _filepond.registerPlugin.apply(void 0, arguments); // build events and props array\n\n\n    events.length = 0;\n\n    for (var prop in _filepond.OptionTypes) {\n      // don't add events to the props array\n      if (/^on/.test(prop)) {\n        events.push(prop);\n        continue;\n      } // get property type ( can be either a String or the type defined within FilePond )\n\n\n      var valid_types = [String, getNativeConstructorFromType(_filepond.OptionTypes[prop])]; // labelFileProcessingError can also be Function\n\n      if (prop == \"labelFileProcessingError\") {\n        valid_types.push(Function);\n      }\n\n      props[prop] = {\n        type: valid_types,\n        // set this default value so we know which props have been explicitely set by user on component\n        default: undefined\n      };\n    } // create\n\n\n    return {\n      name: \"FilePond\",\n      props: props,\n      render: function render() {\n        // clean up undefined attributes\n        var attributes = Object.entries({\n          id: this.id,\n          name: this.name,\n          type: \"file\",\n          class: this.className,\n          required: this.required,\n          multiple: this.allowMultiple,\n          accept: this.acceptedFileTypes,\n          capture: this.captureMethod\n        }).reduce(function (attributes, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          if (value !== undefined) attributes[key] = value;\n          return attributes;\n        }, {}); // create base element\n\n        return (0, _vue.h)(\"div\", {\n          class: {\n            \"filepond--wrapper\": true\n          }\n        }, [(0, _vue.h)(\"input\", attributes)]);\n      },\n      created: function created() {\n        var _this = this;\n\n        this.watchers = Object.keys(props).map(function (key) {\n          return _this.$watch(key, function (next) {\n            // if pond is not initialized, don't update\n            if (!_this._pond) return;\n            _this._pond[key] = next;\n          });\n        });\n      },\n      // Will setup FilePond instance when mounted\n      mounted: function mounted() {\n        var _this2 = this;\n\n        // exit here if not supported\n        if (!isSupported) return; // get pond element\n\n        this._element = this.$el.querySelector(\"input\"); // Map FilePond callback methods to Vue $emitters\n\n        var options = events.reduce(function (obj, value) {\n          obj[value] = function () {\n            _this2.$emit(\"input\", _this2._pond ? _this2._pond.getFiles() : []);\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            _this2.$emit.apply(_this2, [value.substr(2)].concat(args));\n          };\n\n          return obj;\n        }, {});\n        var passedProps = {};\n        Object.keys(props).forEach(function (key) {\n          if (_this2[key] === undefined) return;\n          passedProps[key] = _this2[key];\n        }); // Create our pond\n\n        this._pond = (0, _filepond.create)(this._element, Object.assign({}, globalOptions, options, passedProps)); // Copy instance method references to component instance\n\n        Object.keys(this._pond).filter(function (key) {\n          return !filteredComponentMethods.includes(key);\n        }).forEach(function (key) {\n          _this2[key] = _this2._pond[key];\n        }); // Add to instances so we can apply global options when used\n\n        instances.push(this._pond);\n      },\n      // Will clean up FilePond instance when unmounted\n      beforeUnmount: function beforeUnmount() {\n        var _this3 = this;\n\n        // reference to detached method\n        var detached = this.$options.detached; // no longer attached, clean up\n\n        if (!this.$el.offsetParent) {\n          detached.call(this);\n          return;\n        } // if we're still attached it's likely a transition is running, we need to\n        // determine the moment when we're no longer attached to the DOM so we can\n        // clean up properly\n\n\n        var mutationHandler = function mutationHandler(mutations, observer) {\n          var removedNodes = (mutations[0] || {}).removedNodes || [];\n          var removedNode = removedNodes[0];\n          if (!removedNode || !removedNode.contains(_this3.$el)) return;\n          observer.disconnect();\n          detached.call(_this3);\n        }; // start observing parent element for changes to the DOM\n\n\n        var observer = new MutationObserver(mutationHandler);\n        observer.observe(document.documentElement, {\n          childList: true,\n          subtree: true\n        });\n      },\n      // called when the component root node has been detached\n      detached: function detached() {\n        this.watchers.forEach(function (unwatch) {\n          return unwatch();\n        }); // exit when no pond defined\n\n        if (!this._pond) return; // bye bye pond\n\n        this._pond.destroy(); // remove from instances\n\n\n        var index = instances.indexOf(this._pond);\n\n        if (index >= 0) {\n          instances.splice(index, 1);\n        } // clear reference\n\n\n        this._pond = null;\n      }\n    };\n  };\n\n  _exports.default = _default;\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-filepond/dist/vue-filepond.js\n");

/***/ }),

/***/ "./node_modules/vue3-carousel/dist/carousel.css":
/*!******************************************************!*\
  !*** ./node_modules/vue3-carousel/dist/carousel.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_carousel_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./carousel.css */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue3-carousel/dist/carousel.css\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_carousel_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"], options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_carousel_css__WEBPACK_IMPORTED_MODULE_1__[\"default\"].locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlMy1jYXJvdXNlbC9kaXN0L2Nhcm91c2VsLmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStFO0FBQy9FLFlBQW1LOztBQUVuSzs7QUFFQTtBQUNBOztBQUVBLGFBQWEsNkZBQUcsQ0FBQyxxSkFBTzs7OztBQUl4QixpRUFBZSxxSkFBTyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZTMtY2Fyb3VzZWwvZGlzdC9jYXJvdXNlbC5jc3M/ZTMyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTEudXNlWzFdIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTExLnVzZVsyXSEuL2Nhcm91c2VsLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue3-carousel/dist/carousel.css\n");

/***/ }),

/***/ "./node_modules/vue3-carousel/dist/carousel.es.js":
/*!********************************************************!*\
  !*** ./node_modules/vue3-carousel/dist/carousel.es.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Carousel: () => (/* binding */ Carousel),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   Navigation: () => (/* binding */ Navigation),\n/* harmony export */   Pagination: () => (/* binding */ Pagination),\n/* harmony export */   Slide: () => (/* binding */ Slide)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/**\n * Vue 3 Carousel 0.3.4\n * (c) 2024\n * @license MIT\n */\n\n\nconst defaultConfigs = {\n    itemsToShow: 1,\n    itemsToScroll: 1,\n    modelValue: 0,\n    transition: 300,\n    autoplay: 0,\n    snapAlign: 'center',\n    wrapAround: false,\n    throttle: 16,\n    pauseAutoplayOnHover: false,\n    mouseDrag: true,\n    touchDrag: true,\n    dir: 'ltr',\n    breakpoints: undefined,\n    i18n: {\n        ariaNextSlide: 'Navigate to next slide',\n        ariaPreviousSlide: 'Navigate to previous slide',\n        ariaNavigateToSlide: 'Navigate to slide {slideNumber}',\n        ariaGallery: 'Gallery',\n        itemXofY: 'Item {currentSlide} of {slidesCount}',\n        iconArrowUp: 'Arrow pointing upwards',\n        iconArrowDown: 'Arrow pointing downwards',\n        iconArrowRight: 'Arrow pointing to the right',\n        iconArrowLeft: 'Arrow pointing to the left',\n    },\n};\n\nconst carouselProps = {\n    // count of items to showed per view\n    itemsToShow: {\n        default: defaultConfigs.itemsToShow,\n        type: Number,\n    },\n    // count of items to be scrolled\n    itemsToScroll: {\n        default: defaultConfigs.itemsToScroll,\n        type: Number,\n    },\n    // control infinite scrolling mode\n    wrapAround: {\n        default: defaultConfigs.wrapAround,\n        type: Boolean,\n    },\n    // control max drag\n    throttle: {\n        default: defaultConfigs.throttle,\n        type: Number,\n    },\n    // control snap position alignment\n    snapAlign: {\n        default: defaultConfigs.snapAlign,\n        validator(value) {\n            // The value must match one of these strings\n            return ['start', 'end', 'center', 'center-even', 'center-odd'].includes(value);\n        },\n    },\n    // sliding transition time in ms\n    transition: {\n        default: defaultConfigs.transition,\n        type: Number,\n    },\n    // an object to store breakpoints\n    breakpoints: {\n        default: defaultConfigs.breakpoints,\n        type: Object,\n    },\n    // time to auto advance slides in ms\n    autoplay: {\n        default: defaultConfigs.autoplay,\n        type: Number,\n    },\n    // pause autoplay when mouse hover over the carousel\n    pauseAutoplayOnHover: {\n        default: defaultConfigs.pauseAutoplayOnHover,\n        type: Boolean,\n    },\n    // slide number number of initial slide\n    modelValue: {\n        default: undefined,\n        type: Number,\n    },\n    // toggle mouse dragging.\n    mouseDrag: {\n        default: defaultConfigs.mouseDrag,\n        type: Boolean,\n    },\n    // toggle mouse dragging.\n    touchDrag: {\n        default: defaultConfigs.touchDrag,\n        type: Boolean,\n    },\n    // control snap position alignment\n    dir: {\n        default: defaultConfigs.dir,\n        validator(value) {\n            // The value must match one of these strings\n            return ['rtl', 'ltr'].includes(value);\n        },\n    },\n    // aria-labels and additional text labels\n    i18n: {\n        default: defaultConfigs.i18n,\n        type: Object,\n    },\n    // an object to pass all settings\n    settings: {\n        default() {\n            return {};\n        },\n        type: Object,\n    },\n};\n\nfunction getMaxSlideIndex({ config, slidesCount }) {\n    const { snapAlign, wrapAround, itemsToShow = 1 } = config;\n    if (wrapAround) {\n        return Math.max(slidesCount - 1, 0);\n    }\n    let output;\n    switch (snapAlign) {\n        case 'start':\n            output = slidesCount - itemsToShow;\n            break;\n        case 'end':\n            output = slidesCount - 1;\n            break;\n        case 'center':\n        case 'center-odd':\n            output = slidesCount - Math.ceil((itemsToShow - 0.5) / 2);\n            break;\n        case 'center-even':\n            output = slidesCount - Math.ceil(itemsToShow / 2);\n            break;\n        default:\n            output = 0;\n            break;\n    }\n    return Math.max(output, 0);\n}\n\nfunction getMinSlideIndex({ config, slidesCount }) {\n    const { wrapAround, snapAlign, itemsToShow = 1 } = config;\n    let output = 0;\n    if (wrapAround || itemsToShow > slidesCount) {\n        return output;\n    }\n    switch (snapAlign) {\n        case 'start':\n            output = 0;\n            break;\n        case 'end':\n            output = itemsToShow - 1;\n            break;\n        case 'center':\n        case 'center-odd':\n            output = Math.floor((itemsToShow - 1) / 2);\n            break;\n        case 'center-even':\n            output = Math.floor((itemsToShow - 2) / 2);\n            break;\n        default:\n            output = 0;\n            break;\n    }\n    return output;\n}\n\nfunction getNumberInRange({ val, max, min }) {\n    if (max < min) {\n        return val;\n    }\n    return Math.min(Math.max(val, min), max);\n}\n\nfunction getSlidesToScroll({ config, currentSlide, slidesCount }) {\n    const { snapAlign, wrapAround, itemsToShow = 1 } = config;\n    let output = currentSlide;\n    switch (snapAlign) {\n        case 'center':\n        case 'center-odd':\n            output -= (itemsToShow - 1) / 2;\n            break;\n        case 'center-even':\n            output -= (itemsToShow - 2) / 2;\n            break;\n        case 'end':\n            output -= itemsToShow - 1;\n            break;\n    }\n    if (wrapAround) {\n        return output;\n    }\n    return getNumberInRange({\n        val: output,\n        max: slidesCount - itemsToShow,\n        min: 0,\n    });\n}\n\nfunction getSlidesVNodes(vNode) {\n    if (!vNode)\n        return [];\n    return vNode.reduce((acc, node) => {\n        var _a;\n        if (node.type === vue__WEBPACK_IMPORTED_MODULE_0__.Fragment) {\n            return [...acc, ...getSlidesVNodes(node.children)];\n        }\n        if (((_a = node.type) === null || _a === void 0 ? void 0 : _a.name) === 'CarouselSlide') {\n            return [...acc, node];\n        }\n        return acc;\n    }, []);\n}\n\nfunction mapNumberToRange({ val, max, min = 0 }) {\n    if (val > max) {\n        return mapNumberToRange({ val: val - (max + 1), max, min });\n    }\n    if (val < min) {\n        return mapNumberToRange({ val: val + (max + 1), max, min });\n    }\n    return val;\n}\n\n/**\n * return a throttle version of the function\n * Throttling\n *\n */\n// eslint-disable-next-line no-unused-vars\nfunction throttle(fn, limit) {\n    let inThrottle;\n    if (!limit) {\n        return fn;\n    }\n    return function (...args) {\n        const self = this;\n        if (!inThrottle) {\n            fn.apply(self, args);\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n        }\n    };\n}\n\n/**\n * return a debounced version of the function\n * @param fn\n * @param delay\n */\n// eslint-disable-next-line no-unused-vars\nfunction debounce(fn, delay) {\n    let timerId;\n    return function (...args) {\n        if (timerId) {\n            clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n            fn(...args);\n            timerId = null;\n        }, delay);\n    };\n}\n\nfunction i18nFormatter(string = '', values = {}) {\n    return Object.entries(values).reduce((acc, [key, value]) => acc.replace(`{${key}}`, String(value)), string);\n}\n\nvar ARIAComponent = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'ARIA',\n    setup() {\n        const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config', (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs)));\n        const currentSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('currentSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0));\n        const slidesCount = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('slidesCount', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0));\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: ['carousel__liveregion', 'carousel__sr-only'],\n            'aria-live': 'polite',\n            'aria-atomic': 'true',\n        }, i18nFormatter(config.i18n['itemXofY'], {\n            currentSlide: currentSlide.value + 1,\n            slidesCount: slidesCount.value,\n        }));\n    },\n});\n\nvar Carousel = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'Carousel',\n    props: carouselProps,\n    setup(props, { slots, emit, expose }) {\n        var _a;\n        const root = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);\n        const slides = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)([]);\n        const slideWidth = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        const slidesCount = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        // current config\n        const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs));\n        // default carousel configs\n        let __defaultConfig = Object.assign({}, defaultConfigs);\n        // breakpoints configs\n        let breakpoints;\n        // slides\n        const currentSlideIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)((_a = props.modelValue) !== null && _a !== void 0 ? _a : 0);\n        const prevSlideIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        const middleSlideIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        const maxSlideIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        const minSlideIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n        let autoplayTimer;\n        let transitionTimer;\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('config', config);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('slidesCount', slidesCount);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('currentSlide', currentSlideIndex);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('maxSlide', maxSlideIndex);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('minSlide', minSlideIndex);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('slideWidth', slideWidth);\n        /**\n         * Configs\n         */\n        function initDefaultConfigs() {\n            breakpoints = Object.assign({}, props.breakpoints);\n            __defaultConfig = Object.assign(Object.assign(Object.assign({}, __defaultConfig), props), { i18n: Object.assign(Object.assign({}, __defaultConfig.i18n), props.i18n), breakpoints: undefined });\n            bindConfigs(__defaultConfig);\n        }\n        function updateBreakpointsConfigs() {\n            if (!breakpoints || !Object.keys(breakpoints).length)\n                return;\n            const breakpointsArray = Object.keys(breakpoints)\n                .map((key) => Number(key))\n                .sort((a, b) => +b - +a);\n            let newConfig = Object.assign({}, __defaultConfig);\n            breakpointsArray.some((breakpoint) => {\n                const isMatched = window.matchMedia(`(min-width: ${breakpoint}px)`).matches;\n                if (isMatched) {\n                    newConfig = Object.assign(Object.assign({}, newConfig), breakpoints[breakpoint]);\n                }\n                return isMatched;\n            });\n            bindConfigs(newConfig);\n        }\n        function bindConfigs(newConfig) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            Object.entries(newConfig).forEach(([key, val]) => (config[key] = val));\n        }\n        const handleWindowResize = debounce(() => {\n            updateBreakpointsConfigs();\n            updateSlidesData();\n            updateSlideWidth();\n        }, 16);\n        /**\n         * Setup functions\n         */\n        function updateSlideWidth() {\n            if (!root.value)\n                return;\n            const rect = root.value.getBoundingClientRect();\n            slideWidth.value = rect.width / config.itemsToShow;\n        }\n        function updateSlidesData() {\n            if (slidesCount.value <= 0)\n                return;\n            middleSlideIndex.value = Math.ceil((slidesCount.value - 1) / 2);\n            maxSlideIndex.value = getMaxSlideIndex({ config, slidesCount: slidesCount.value });\n            minSlideIndex.value = getMinSlideIndex({ config, slidesCount: slidesCount.value });\n            if (!config.wrapAround) {\n                currentSlideIndex.value = getNumberInRange({\n                    val: currentSlideIndex.value,\n                    max: maxSlideIndex.value,\n                    min: minSlideIndex.value,\n                });\n            }\n        }\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => updateSlideWidth());\n            // Overcome some edge cases\n            setTimeout(() => updateSlideWidth(), 1000);\n            updateBreakpointsConfigs();\n            initAutoplay();\n            window.addEventListener('resize', handleWindowResize, { passive: true });\n            emit('init');\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {\n            if (transitionTimer) {\n                clearTimeout(transitionTimer);\n            }\n            if (autoplayTimer) {\n                clearInterval(autoplayTimer);\n            }\n            window.removeEventListener('resize', handleWindowResize, {\n                passive: true,\n            });\n        });\n        /**\n         * Carousel Event listeners\n         */\n        let isTouch = false;\n        const startPosition = { x: 0, y: 0 };\n        const endPosition = { x: 0, y: 0 };\n        const dragged = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)({ x: 0, y: 0 });\n        const isHover = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n        const isDragging = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n        const handleMouseEnter = () => {\n            isHover.value = true;\n        };\n        const handleMouseLeave = () => {\n            isHover.value = false;\n        };\n        function handleDragStart(event) {\n            if (['INPUT', 'TEXTAREA', 'SELECT'].includes(event.target.tagName)) {\n                return;\n            }\n            isTouch = event.type === 'touchstart';\n            if (!isTouch) {\n                event.preventDefault();\n            }\n            if ((!isTouch && event.button !== 0) || isSliding.value) {\n                return;\n            }\n            startPosition.x = isTouch ? event.touches[0].clientX : event.clientX;\n            startPosition.y = isTouch ? event.touches[0].clientY : event.clientY;\n            document.addEventListener(isTouch ? 'touchmove' : 'mousemove', handleDragging, true);\n            document.addEventListener(isTouch ? 'touchend' : 'mouseup', handleDragEnd, true);\n        }\n        const handleDragging = throttle((event) => {\n            isDragging.value = true;\n            endPosition.x = isTouch ? event.touches[0].clientX : event.clientX;\n            endPosition.y = isTouch ? event.touches[0].clientY : event.clientY;\n            const deltaX = endPosition.x - startPosition.x;\n            const deltaY = endPosition.y - startPosition.y;\n            dragged.y = deltaY;\n            dragged.x = deltaX;\n        }, config.throttle);\n        function handleDragEnd() {\n            const direction = config.dir === 'rtl' ? -1 : 1;\n            const tolerance = Math.sign(dragged.x) * 0.4;\n            const draggedSlides = Math.round(dragged.x / slideWidth.value + tolerance) * direction;\n            // Prevent clicking if there is clicked slides\n            if (draggedSlides && !isTouch) {\n                const captureClick = (e) => {\n                    window.removeEventListener('click', captureClick, true);\n                };\n                window.addEventListener('click', captureClick, true);\n            }\n            slideTo(currentSlideIndex.value - draggedSlides);\n            dragged.x = 0;\n            dragged.y = 0;\n            isDragging.value = false;\n            document.removeEventListener(isTouch ? 'touchmove' : 'mousemove', handleDragging, true);\n            document.removeEventListener(isTouch ? 'touchend' : 'mouseup', handleDragEnd, true);\n        }\n        /**\n         * Autoplay\n         */\n        function initAutoplay() {\n            if (!config.autoplay || config.autoplay <= 0) {\n                return;\n            }\n            autoplayTimer = setInterval(() => {\n                if (config.pauseAutoplayOnHover && isHover.value) {\n                    return;\n                }\n                next();\n            }, config.autoplay);\n        }\n        function resetAutoplay() {\n            if (autoplayTimer) {\n                clearInterval(autoplayTimer);\n                autoplayTimer = null;\n            }\n            initAutoplay();\n        }\n        /**\n         * Navigation function\n         */\n        const isSliding = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n        function slideTo(slideIndex) {\n            const currentVal = config.wrapAround\n                ? slideIndex\n                : getNumberInRange({\n                    val: slideIndex,\n                    max: maxSlideIndex.value,\n                    min: minSlideIndex.value,\n                });\n            if (currentSlideIndex.value === currentVal || isSliding.value) {\n                return;\n            }\n            emit('slide-start', {\n                slidingToIndex: slideIndex,\n                currentSlideIndex: currentSlideIndex.value,\n                prevSlideIndex: prevSlideIndex.value,\n                slidesCount: slidesCount.value,\n            });\n            isSliding.value = true;\n            prevSlideIndex.value = currentSlideIndex.value;\n            currentSlideIndex.value = currentVal;\n            transitionTimer = setTimeout(() => {\n                if (config.wrapAround) {\n                    const mappedNumber = mapNumberToRange({\n                        val: currentVal,\n                        max: maxSlideIndex.value,\n                        min: 0,\n                    });\n                    if (mappedNumber !== currentSlideIndex.value) {\n                        currentSlideIndex.value = mappedNumber;\n                        emit('loop', {\n                            currentSlideIndex: currentSlideIndex.value,\n                            slidingToIndex: slideIndex,\n                        });\n                    }\n                }\n                emit('update:modelValue', currentSlideIndex.value);\n                emit('slide-end', {\n                    currentSlideIndex: currentSlideIndex.value,\n                    prevSlideIndex: prevSlideIndex.value,\n                    slidesCount: slidesCount.value,\n                });\n                isSliding.value = false;\n                resetAutoplay();\n            }, config.transition);\n        }\n        function next() {\n            slideTo(currentSlideIndex.value + config.itemsToScroll);\n        }\n        function prev() {\n            slideTo(currentSlideIndex.value - config.itemsToScroll);\n        }\n        const nav = { slideTo, next, prev };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('nav', nav);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('isSliding', isSliding);\n        /**\n         * Track style\n         */\n        const slidesToScroll = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => getSlidesToScroll({\n            config,\n            currentSlide: currentSlideIndex.value,\n            slidesCount: slidesCount.value,\n        }));\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('slidesToScroll', slidesToScroll);\n        const trackStyle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n            const direction = config.dir === 'rtl' ? -1 : 1;\n            const xScroll = slidesToScroll.value * slideWidth.value * direction;\n            return {\n                transform: `translateX(${dragged.x - xScroll}px)`,\n                transition: `${isSliding.value ? config.transition : 0}ms`,\n                margin: config.wrapAround ? `0 -${slidesCount.value * slideWidth.value}px` : '',\n                width: `100%`,\n            };\n        });\n        function restartCarousel() {\n            initDefaultConfigs();\n            updateBreakpointsConfigs();\n            updateSlidesData();\n            updateSlideWidth();\n            resetAutoplay();\n        }\n        // Update the carousel on props change\n        Object.keys(carouselProps).forEach((prop) => {\n            if (['modelValue'].includes(prop))\n                return;\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props[prop], restartCarousel);\n        });\n        // Handle changing v-model value\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props['modelValue'], (val) => {\n            if (val === currentSlideIndex.value) {\n                return;\n            }\n            slideTo(Number(val));\n        });\n        // Handel when slides added/removed\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(slidesCount, updateSlidesData);\n        // Init carousel\n        emit('before-init');\n        initDefaultConfigs();\n        const data = {\n            config,\n            slidesCount,\n            slideWidth,\n            next,\n            prev,\n            slideTo,\n            currentSlide: currentSlideIndex,\n            maxSlide: maxSlideIndex,\n            minSlide: minSlideIndex,\n            middleSlide: middleSlideIndex,\n        };\n        expose({\n            updateBreakpointsConfigs,\n            updateSlidesData,\n            updateSlideWidth,\n            initDefaultConfigs,\n            restartCarousel,\n            slideTo,\n            next,\n            prev,\n            nav,\n            data,\n        });\n        const slotSlides = slots.default || slots.slides;\n        const slotAddons = slots.addons;\n        const slotsProps = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(data);\n        return () => {\n            const slidesElements = getSlidesVNodes(slotSlides === null || slotSlides === void 0 ? void 0 : slotSlides(slotsProps));\n            const addonsElements = (slotAddons === null || slotAddons === void 0 ? void 0 : slotAddons(slotsProps)) || [];\n            slidesElements.forEach((el, index) => (el.props.index = index));\n            let output = slidesElements;\n            if (config.wrapAround) {\n                const slidesBefore = slidesElements.map((el, index) => (0,vue__WEBPACK_IMPORTED_MODULE_0__.cloneVNode)(el, {\n                    index: -slidesElements.length + index,\n                    isClone: true,\n                    key: `clone-before-${index}`,\n                }));\n                const slidesAfter = slidesElements.map((el, index) => (0,vue__WEBPACK_IMPORTED_MODULE_0__.cloneVNode)(el, {\n                    index: slidesElements.length + index,\n                    isClone: true,\n                    key: `clone-after-${index}`,\n                }));\n                output = [...slidesBefore, ...slidesElements, ...slidesAfter];\n            }\n            slides.value = slidesElements;\n            slidesCount.value = Math.max(slidesElements.length, 1);\n            const trackEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ol', {\n                class: 'carousel__track',\n                style: trackStyle.value,\n                onMousedownCapture: config.mouseDrag ? handleDragStart : null,\n                onTouchstartPassiveCapture: config.touchDrag ? handleDragStart : null,\n            }, output);\n            const viewPortEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'carousel__viewport' }, trackEl);\n            return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('section', {\n                ref: root,\n                class: {\n                    carousel: true,\n                    'is-sliding': isSliding.value,\n                    'is-dragging': isDragging.value,\n                    'is-hover': isHover.value,\n                    'carousel--rtl': config.dir === 'rtl',\n                },\n                dir: config.dir,\n                'aria-label': config.i18n['ariaGallery'],\n                tabindex: '0',\n                onMouseenter: handleMouseEnter,\n                onMouseleave: handleMouseLeave,\n            }, [viewPortEl, addonsElements, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(ARIAComponent)]);\n        };\n    },\n});\n\nvar IconName;\n(function (IconName) {\n    IconName[\"arrowUp\"] = \"arrowUp\";\n    IconName[\"arrowDown\"] = \"arrowDown\";\n    IconName[\"arrowRight\"] = \"arrowRight\";\n    IconName[\"arrowLeft\"] = \"arrowLeft\";\n})(IconName || (IconName = {}));\nconst icons = {\n    arrowUp: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',\n    arrowDown: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',\n    arrowRight: 'M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z',\n    arrowLeft: 'M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z',\n};\n\nfunction isIconName(candidate) {\n    return candidate in IconName;\n}\nconst Icon = (props) => {\n    const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config', (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs)));\n    const iconName = String(props.name);\n    const iconI18n = `icon${iconName.charAt(0).toUpperCase() + iconName.slice(1)}`;\n    if (!iconName || typeof iconName !== 'string' || !isIconName(iconName)) {\n        return;\n    }\n    const path = icons[iconName];\n    const pathEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('path', { d: path });\n    const iconTitle = config.i18n[iconI18n] || props.title || iconName;\n    const titleEl = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('title', iconTitle);\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('svg', {\n        class: 'carousel__icon',\n        viewBox: '0 0 24 24',\n        role: 'img',\n        'aria-label': iconTitle,\n    }, [titleEl, pathEl]);\n};\nIcon.props = { name: String, title: String };\n\nconst Navigation = (props, { slots, attrs }) => {\n    const { next: slotNext, prev: slotPrev } = slots || {};\n    const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config', (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs)));\n    const maxSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('maxSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const minSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('minSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const currentSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('currentSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const nav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('nav', {});\n    const { dir, wrapAround, i18n } = config;\n    const isRTL = dir === 'rtl';\n    const prevButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n        type: 'button',\n        class: [\n            'carousel__prev',\n            !wrapAround && currentSlide.value <= minSlide.value && 'carousel__prev--disabled',\n            attrs === null || attrs === void 0 ? void 0 : attrs.class,\n        ],\n        'aria-label': i18n['ariaPreviousSlide'],\n        onClick: nav.prev,\n    }, (slotPrev === null || slotPrev === void 0 ? void 0 : slotPrev()) || (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(Icon, { name: isRTL ? 'arrowRight' : 'arrowLeft' }));\n    const nextButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n        type: 'button',\n        class: [\n            'carousel__next',\n            !wrapAround && currentSlide.value >= maxSlide.value && 'carousel__next--disabled',\n            attrs === null || attrs === void 0 ? void 0 : attrs.class,\n        ],\n        'aria-label': i18n['ariaNextSlide'],\n        onClick: nav.next,\n    }, (slotNext === null || slotNext === void 0 ? void 0 : slotNext()) || (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(Icon, { name: isRTL ? 'arrowLeft' : 'arrowRight' }));\n    return [prevButton, nextButton];\n};\n\nconst Pagination = () => {\n    const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config', (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs)));\n    const maxSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('maxSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const minSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('minSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const currentSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('currentSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(1));\n    const nav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('nav', {});\n    const isActive = (slide) => mapNumberToRange({\n        val: currentSlide.value,\n        max: maxSlide.value,\n        min: 0,\n    }) === slide;\n    const children = [];\n    for (let slide = minSlide.value; slide < maxSlide.value + 1; slide++) {\n        const button = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n            type: 'button',\n            class: {\n                'carousel__pagination-button': true,\n                'carousel__pagination-button--active': isActive(slide),\n            },\n            'aria-label': i18nFormatter(config.i18n['ariaNavigateToSlide'], {\n                slideNumber: slide + 1,\n            }),\n            onClick: () => nav.slideTo(slide),\n        });\n        const item = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', { class: 'carousel__pagination-item', key: slide }, button);\n        children.push(item);\n    }\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ol', { class: 'carousel__pagination' }, children);\n};\n\nvar Slide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CarouselSlide',\n    props: {\n        index: {\n            type: Number,\n            default: 1,\n        },\n        isClone: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, { slots }) {\n        const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config', (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)(Object.assign({}, defaultConfigs)));\n        const currentSlide = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('currentSlide', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0));\n        const slidesToScroll = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('slidesToScroll', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0));\n        const isSliding = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('isSliding', (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false));\n        const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.index === currentSlide.value);\n        const isPrev = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.index === currentSlide.value - 1);\n        const isNext = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => props.index === currentSlide.value + 1);\n        const isVisible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n            const min = Math.floor(slidesToScroll.value);\n            const max = Math.ceil(slidesToScroll.value + config.itemsToShow - 1);\n            return props.index >= min && props.index <= max;\n        });\n        return () => {\n            var _a;\n            return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {\n                style: { width: `${100 / config.itemsToShow}%` },\n                class: {\n                    carousel__slide: true,\n                    'carousel__slide--clone': props.isClone,\n                    'carousel__slide--visible': isVisible.value,\n                    'carousel__slide--active': isActive.value,\n                    'carousel__slide--prev': isPrev.value,\n                    'carousel__slide--next': isNext.value,\n                    'carousel__slide--sliding': isSliding.value,\n                },\n                'aria-hidden': !isVisible.value,\n            }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots, {\n                isActive: isActive.value,\n                isClone: props.isClone,\n                isPrev: isPrev.value,\n                isNext: isNext.value,\n                isSliding: isSliding.value,\n                isVisible: isVisible.value\n            }));\n        };\n    },\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue3-carousel/dist/carousel.es.js\n");

/***/ }),

/***/ "./resources/js/app/components/CalendarEventModal.vue":
/*!************************************************************!*\
  !*** ./resources/js/app/components/CalendarEventModal.vue ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CalendarEventModal_vue_vue_type_template_id_c0df8c64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalendarEventModal.vue?vue&type=template&id=c0df8c64 */ \"./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64\");\n/* harmony import */ var _CalendarEventModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CalendarEventModal.vue?vue&type=script&lang=js */ \"./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js\");\n/* harmony import */ var _node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/dist/exportHelper.js */ \"./node_modules/vue-loader/dist/exportHelper.js\");\n\n\n\n\n;\nconst __exports__ = /*#__PURE__*/(0,_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_CalendarEventModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], [['render',_CalendarEventModal_vue_vue_type_template_id_c0df8c64__WEBPACK_IMPORTED_MODULE_0__.render],['__file',\"resources/js/app/components/CalendarEventModal.vue\"]])\n/* hot reload */\nif (false) {}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL2NvbXBvbmVudHMvQ2FsZW5kYXJFdmVudE1vZGFsLnZ1ZSIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStFO0FBQ1Y7QUFDTDs7QUFFaEUsQ0FBc0Y7QUFDdEYsaUNBQWlDLHlGQUFlLENBQUMsdUZBQU0sYUFBYSx5RkFBTTtBQUMxRTtBQUNBLElBQUksS0FBVSxFQUFFLEVBWWY7OztBQUdELGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0NhbGVuZGFyRXZlbnRNb2RhbC52dWU/NWViOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9DYWxlbmRhckV2ZW50TW9kYWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWMwZGY4YzY0XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ2FsZW5kYXJFdmVudE1vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9DYWxlbmRhckV2ZW50TW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInJlc291cmNlcy9qcy9hcHAvY29tcG9uZW50cy9DYWxlbmRhckV2ZW50TW9kYWwudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImMwZGY4YzY0XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnYzBkZjhjNjQnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdjMGRmOGM2NCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQ2FsZW5kYXJFdmVudE1vZGFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jMGRmOGM2NFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdjMGRmOGM2NCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/components/CalendarEventModal.vue\n");

/***/ }),

/***/ "./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js":
/*!************************************************************************************!*\
  !*** ./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CalendarEventModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CalendarEventModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./CalendarEventModal.vue?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js\");\n //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL2NvbXBvbmVudHMvQ2FsZW5kYXJFdmVudE1vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2TiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvY29tcG9uZW50cy9DYWxlbmRhckV2ZW50TW9kYWwudnVlPzYwOTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vQ2FsZW5kYXJFdmVudE1vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdLnVzZVswXSEuL0NhbGVuZGFyRXZlbnRNb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app/components/CalendarEventModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64":
/*!******************************************************************************************!*\
  !*** ./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64 ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CalendarEventModal_vue_vue_type_template_id_c0df8c64__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CalendarEventModal_vue_vue_type_template_id_c0df8c64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./CalendarEventModal.vue?vue&type=template&id=c0df8c64 */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/CalendarEventModal.vue?vue&type=template&id=c0df8c64");


/***/ }),

/***/ "./resources/js/app/components/FileActionsModal.vue":
/*!**********************************************************!*\
  !*** ./resources/js/app/components/FileActionsModal.vue ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _FileActionsModal_vue_vue_type_template_id_edfaf26e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FileActionsModal.vue?vue&type=template&id=edfaf26e */ \"./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e\");\n/* harmony import */ var _FileActionsModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FileActionsModal.vue?vue&type=script&lang=js */ \"./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js\");\n/* harmony import */ var _node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/dist/exportHelper.js */ \"./node_modules/vue-loader/dist/exportHelper.js\");\n\n\n\n\n;\nconst __exports__ = /*#__PURE__*/(0,_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_FileActionsModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], [['render',_FileActionsModal_vue_vue_type_template_id_edfaf26e__WEBPACK_IMPORTED_MODULE_0__.render],['__file',\"resources/js/app/components/FileActionsModal.vue\"]])\n/* hot reload */\nif (false) {}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL2NvbXBvbmVudHMvRmlsZUFjdGlvbnNNb2RhbC52dWUiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2RTtBQUNWO0FBQ0w7O0FBRTlELENBQXNGO0FBQ3RGLGlDQUFpQyx5RkFBZSxDQUFDLHFGQUFNLGFBQWEsdUZBQU07QUFDMUU7QUFDQSxJQUFJLEtBQVUsRUFBRSxFQVlmOzs7QUFHRCxpRUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvY29tcG9uZW50cy9GaWxlQWN0aW9uc01vZGFsLnZ1ZT9lZjQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0ZpbGVBY3Rpb25zTW9kYWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWVkZmFmMjZlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRmlsZUFjdGlvbnNNb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vRmlsZUFjdGlvbnNNb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwicmVzb3VyY2VzL2pzL2FwcC9jb21wb25lbnRzL0ZpbGVBY3Rpb25zTW9kYWwudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImVkZmFmMjZlXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnZWRmYWYyNmUnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdlZGZhZjI2ZScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRmlsZUFjdGlvbnNNb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZWRmYWYyNmVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignZWRmYWYyNmUnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app/components/FileActionsModal.vue\n");

/***/ }),

/***/ "./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js":
/*!**********************************************************************************!*\
  !*** ./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_FileActionsModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_FileActionsModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./FileActionsModal.vue?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js\");\n //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL2NvbXBvbmVudHMvRmlsZUFjdGlvbnNNb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMk4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwL2NvbXBvbmVudHMvRmlsZUFjdGlvbnNNb2RhbC52dWU/OTE2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXS51c2VbMF0hLi9GaWxlQWN0aW9uc01vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdLnVzZVswXSEuL0ZpbGVBY3Rpb25zTW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app/components/FileActionsModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e":
/*!****************************************************************************************!*\
  !*** ./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_FileActionsModal_vue_vue_type_template_id_edfaf26e__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_FileActionsModal_vue_vue_type_template_id_edfaf26e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./FileActionsModal.vue?vue&type=template&id=edfaf26e */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/components/FileActionsModal.vue?vue&type=template&id=edfaf26e");


/***/ }),

/***/ "./resources/js/app/pages/Purchaser-View.vue":
/*!***************************************************!*\
  !*** ./resources/js/app/pages/Purchaser-View.vue ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Purchaser_View_vue_vue_type_template_id_05f52410_scoped_true__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true */ \"./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true\");\n/* harmony import */ var _Purchaser_View_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Purchaser-View.vue?vue&type=script&lang=js */ \"./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js\");\n/* harmony import */ var _Purchaser_View_vue_vue_type_style_index_0_id_05f52410_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css */ \"./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css\");\n/* harmony import */ var _node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/dist/exportHelper.js */ \"./node_modules/vue-loader/dist/exportHelper.js\");\n\n\n\n\n;\n\n\nconst __exports__ = /*#__PURE__*/(0,_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(_Purchaser_View_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], [['render',_Purchaser_View_vue_vue_type_template_id_05f52410_scoped_true__WEBPACK_IMPORTED_MODULE_0__.render],['__scopeId',\"data-v-05f52410\"],['__file',\"resources/js/app/pages/Purchaser-View.vue\"]])\n/* hot reload */\nif (false) {}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZSIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF1RjtBQUN0QjtBQUNMOztBQUU1RCxDQUFxRjs7QUFFQztBQUN0RixpQ0FBaUMseUZBQWUsQ0FBQyxtRkFBTSxhQUFhLGlHQUFNO0FBQzFFO0FBQ0EsSUFBSSxLQUFVLEVBQUUsRUFZZjs7O0FBR0QsaUVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZT80NzM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wNWY1MjQxMCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9QdXJjaGFzZXItVmlldy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTA1ZjUyNDEwJnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi0wNWY1MjQxMFwiXSxbJ19fZmlsZScsXCJyZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIwNWY1MjQxMFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzA1ZjUyNDEwJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnMDVmNTI0MTAnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wNWY1MjQxMCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcwNWY1MjQxMCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/pages/Purchaser-View.vue\n");

/***/ }),

/***/ "./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js":
/*!***************************************************************************!*\
  !*** ./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Purchaser-View.vue?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js\");\n //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3BhZ2VzL1B1cmNoYXNlci1WaWV3LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5TiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvcGFnZXMvUHVyY2hhc2VyLVZpZXcudnVlPzI4NjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vUHVyY2hhc2VyLVZpZXcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vUHVyY2hhc2VyLVZpZXcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app/pages/Purchaser-View.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css":
/*!***********************************************************************************************************!*\
  !*** ./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_11_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_11_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_style_index_0_id_05f52410_scoped_true_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/style-loader/dist/cjs.js!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!../../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-11.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-11.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=style&index=0&id=05f52410&scoped=true&lang=css");


/***/ }),

/***/ "./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true":
/*!*********************************************************************************************!*\
  !*** ./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_template_id_05f52410_scoped_true__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_Purchaser_View_vue_vue_type_template_id_05f52410_scoped_true__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/js/app/pages/Purchaser-View.vue?vue&type=template&id=05f52410&scoped=true");


/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/core/componentBuilderHelper.js":
/*!**********************************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/core/componentBuilderHelper.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSortableOption: () => (/* binding */ createSortableOption),\n/* harmony export */   getComponentAttributes: () => (/* binding */ getComponentAttributes),\n/* harmony export */   getValidSortableEntries: () => (/* binding */ getValidSortableEntries)\n/* harmony export */ });\n/* harmony import */ var _util_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/string */ \"./resources/js/app/vendors/vuedraggable/src/util/string.js\");\n/* harmony import */ var _sortableEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sortableEvents */ \"./resources/js/app/vendors/vuedraggable/src/core/sortableEvents.js\");\n/* harmony import */ var _util_tags__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/tags */ \"./resources/js/app/vendors/vuedraggable/src/util/tags.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nfunction project(entries) {\n  return entries.reduce(function (res, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    res[key] = value;\n    return res;\n  }, {});\n}\nfunction getComponentAttributes(_ref3) {\n  var $attrs = _ref3.$attrs,\n    _ref3$componentData = _ref3.componentData,\n    componentData = _ref3$componentData === void 0 ? {} : _ref3$componentData;\n  var attributes = project(Object.entries($attrs).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      key = _ref5[0],\n      _ = _ref5[1];\n    return (0,_util_tags__WEBPACK_IMPORTED_MODULE_2__.isHtmlAttribute)(key);\n  }));\n  return _objectSpread(_objectSpread({}, attributes), componentData);\n}\nfunction createSortableOption(_ref6) {\n  var $attrs = _ref6.$attrs,\n    callBackBuilder = _ref6.callBackBuilder;\n  var options = project(getValidSortableEntries($attrs));\n  Object.entries(callBackBuilder).forEach(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n      eventType = _ref8[0],\n      eventBuilder = _ref8[1];\n    _sortableEvents__WEBPACK_IMPORTED_MODULE_1__.events[eventType].forEach(function (event) {\n      options[\"on\".concat(event)] = eventBuilder(event);\n    });\n  });\n  var draggable = \"[data-draggable]\".concat(options.draggable || \"\");\n  return _objectSpread(_objectSpread({}, options), {}, {\n    draggable: draggable\n  });\n}\nfunction getValidSortableEntries(value) {\n  return Object.entries(value).filter(function (_ref9) {\n    var _ref0 = _slicedToArray(_ref9, 2),\n      key = _ref0[0],\n      _ = _ref0[1];\n    return !(0,_util_tags__WEBPACK_IMPORTED_MODULE_2__.isHtmlAttribute)(key);\n  }).map(function (_ref1) {\n    var _ref10 = _slicedToArray(_ref1, 2),\n      key = _ref10[0],\n      value = _ref10[1];\n    return [(0,_util_string__WEBPACK_IMPORTED_MODULE_0__.camelize)(key), value];\n  }).filter(function (_ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n      key = _ref12[0],\n      _ = _ref12[1];\n    return !(0,_sortableEvents__WEBPACK_IMPORTED_MODULE_1__.isReadOnly)(key);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy9jb3JlL2NvbXBvbmVudEJ1aWxkZXJIZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBDO0FBQ1k7QUFDUDtBQUUvQyxTQUFTSSxPQUFPQSxDQUFDQyxPQUFPLEVBQUU7RUFDeEIsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsVUFBQ0MsR0FBRyxFQUFBQyxJQUFBLEVBQW1CO0lBQUEsSUFBQUMsS0FBQSxHQUFBQyxjQUFBLENBQUFGLElBQUE7TUFBaEJHLEdBQUcsR0FBQUYsS0FBQTtNQUFFRyxLQUFLLEdBQUFILEtBQUE7SUFDckNGLEdBQUcsQ0FBQ0ksR0FBRyxDQUFDLEdBQUdDLEtBQUs7SUFDaEIsT0FBT0wsR0FBRztFQUNaLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSO0FBRUEsU0FBU00sc0JBQXNCQSxDQUFBQyxLQUFBLEVBQWlDO0VBQUEsSUFBOUJDLE1BQU0sR0FBQUQsS0FBQSxDQUFOQyxNQUFNO0lBQUFDLG1CQUFBLEdBQUFGLEtBQUEsQ0FBRUcsYUFBYTtJQUFiQSxhQUFhLEdBQUFELG1CQUFBLGNBQUcsQ0FBQyxDQUFDLEdBQUFBLG1CQUFBO0VBQzFELElBQU1FLFVBQVUsR0FBR2QsT0FBTyxDQUN4QmUsTUFBTSxDQUFDZCxPQUFPLENBQUNVLE1BQU0sQ0FBQyxDQUFDSyxNQUFNLENBQUMsVUFBQUMsS0FBQTtJQUFBLElBQUFDLEtBQUEsR0FBQVosY0FBQSxDQUFBVyxLQUFBO01BQUVWLEdBQUcsR0FBQVcsS0FBQTtNQUFFQyxDQUFDLEdBQUFELEtBQUE7SUFBQSxPQUFNbkIsMkRBQWUsQ0FBQ1EsR0FBRyxDQUFDO0VBQUEsRUFDbEUsQ0FBQztFQUNELE9BQUFhLGFBQUEsQ0FBQUEsYUFBQSxLQUNLTixVQUFVLEdBQ1ZELGFBQWE7QUFFcEI7QUFFQSxTQUFTUSxvQkFBb0JBLENBQUFDLEtBQUEsRUFBOEI7RUFBQSxJQUEzQlgsTUFBTSxHQUFBVyxLQUFBLENBQU5YLE1BQU07SUFBRVksZUFBZSxHQUFBRCxLQUFBLENBQWZDLGVBQWU7RUFDckQsSUFBTUMsT0FBTyxHQUFHeEIsT0FBTyxDQUFDeUIsdUJBQXVCLENBQUNkLE1BQU0sQ0FBQyxDQUFDO0VBQ3hESSxNQUFNLENBQUNkLE9BQU8sQ0FBQ3NCLGVBQWUsQ0FBQyxDQUFDRyxPQUFPLENBQUMsVUFBQUMsS0FBQSxFQUErQjtJQUFBLElBQUFDLEtBQUEsR0FBQXRCLGNBQUEsQ0FBQXFCLEtBQUE7TUFBN0JFLFNBQVMsR0FBQUQsS0FBQTtNQUFFRSxZQUFZLEdBQUFGLEtBQUE7SUFDL0QvQixtREFBTSxDQUFDZ0MsU0FBUyxDQUFDLENBQUNILE9BQU8sQ0FBQyxVQUFBSyxLQUFLLEVBQUk7TUFDakNQLE9BQU8sTUFBQVEsTUFBQSxDQUFNRCxLQUFLLEVBQUcsR0FBR0QsWUFBWSxDQUFDQyxLQUFLLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBQ0YsSUFBTUUsU0FBUyxzQkFBQUQsTUFBQSxDQUFzQlIsT0FBTyxDQUFDUyxTQUFTLElBQUksRUFBRSxDQUFFO0VBQzlELE9BQUFiLGFBQUEsQ0FBQUEsYUFBQSxLQUNLSSxPQUFPO0lBQ1ZTLFNBQVMsRUFBVEE7RUFBUztBQUViO0FBRUEsU0FBU1IsdUJBQXVCQSxDQUFDakIsS0FBSyxFQUFFO0VBQ3RDLE9BQU9PLE1BQU0sQ0FBQ2QsT0FBTyxDQUFDTyxLQUFLLENBQUMsQ0FDekJRLE1BQU0sQ0FBQyxVQUFBa0IsS0FBQTtJQUFBLElBQUFDLEtBQUEsR0FBQTdCLGNBQUEsQ0FBQTRCLEtBQUE7TUFBRTNCLEdBQUcsR0FBQTRCLEtBQUE7TUFBRWhCLENBQUMsR0FBQWdCLEtBQUE7SUFBQSxPQUFNLENBQUNwQywyREFBZSxDQUFDUSxHQUFHLENBQUM7RUFBQSxFQUFDLENBQzNDNkIsR0FBRyxDQUFDLFVBQUFDLEtBQUE7SUFBQSxJQUFBQyxNQUFBLEdBQUFoQyxjQUFBLENBQUErQixLQUFBO01BQUU5QixHQUFHLEdBQUErQixNQUFBO01BQUU5QixLQUFLLEdBQUE4QixNQUFBO0lBQUEsT0FBTSxDQUFDMUMsc0RBQVEsQ0FBQ1csR0FBRyxDQUFDLEVBQUVDLEtBQUssQ0FBQztFQUFBLEVBQUMsQ0FDN0NRLE1BQU0sQ0FBQyxVQUFBdUIsTUFBQTtJQUFBLElBQUFDLE1BQUEsR0FBQWxDLGNBQUEsQ0FBQWlDLE1BQUE7TUFBRWhDLEdBQUcsR0FBQWlDLE1BQUE7TUFBRXJCLENBQUMsR0FBQXFCLE1BQUE7SUFBQSxPQUFNLENBQUMxQywyREFBVSxDQUFDUyxHQUFHLENBQUM7RUFBQSxFQUFDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC92ZW5kb3JzL3Z1ZWRyYWdnYWJsZS9zcmMvY29yZS9jb21wb25lbnRCdWlsZGVySGVscGVyLmpzPzAzODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxpemUgfSBmcm9tIFwiLi4vdXRpbC9zdHJpbmdcIjtcbmltcG9ydCB7IGV2ZW50cywgaXNSZWFkT25seSB9IGZyb20gXCIuL3NvcnRhYmxlRXZlbnRzXCI7XG5pbXBvcnQgeyBpc0h0bWxBdHRyaWJ1dGUgfSBmcm9tIFwiLi4vdXRpbC90YWdzXCI7XG5cbmZ1bmN0aW9uIHByb2plY3QoZW50cmllcykge1xuICByZXR1cm4gZW50cmllcy5yZWR1Y2UoKHJlcywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudEF0dHJpYnV0ZXMoeyAkYXR0cnMsIGNvbXBvbmVudERhdGEgPSB7fSB9KSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBwcm9qZWN0KFxuICAgIE9iamVjdC5lbnRyaWVzKCRhdHRycykuZmlsdGVyKChba2V5LCBfXSkgPT4gaXNIdG1sQXR0cmlidXRlKGtleSkpXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4uYXR0cmlidXRlcyxcbiAgICAuLi5jb21wb25lbnREYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNvcnRhYmxlT3B0aW9uKHsgJGF0dHJzLCBjYWxsQmFja0J1aWxkZXIgfSkge1xuICBjb25zdCBvcHRpb25zID0gcHJvamVjdChnZXRWYWxpZFNvcnRhYmxlRW50cmllcygkYXR0cnMpKTtcbiAgT2JqZWN0LmVudHJpZXMoY2FsbEJhY2tCdWlsZGVyKS5mb3JFYWNoKChbZXZlbnRUeXBlLCBldmVudEJ1aWxkZXJdKSA9PiB7XG4gICAgZXZlbnRzW2V2ZW50VHlwZV0uZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBvcHRpb25zW2BvbiR7ZXZlbnR9YF0gPSBldmVudEJ1aWxkZXIoZXZlbnQpO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgZHJhZ2dhYmxlID0gYFtkYXRhLWRyYWdnYWJsZV0ke29wdGlvbnMuZHJhZ2dhYmxlIHx8IFwiXCJ9YDtcbiAgcmV0dXJuIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGRyYWdnYWJsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWYWxpZFNvcnRhYmxlRW50cmllcyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgLmZpbHRlcigoW2tleSwgX10pID0+ICFpc0h0bWxBdHRyaWJ1dGUoa2V5KSlcbiAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IFtjYW1lbGl6ZShrZXkpLCB2YWx1ZV0pXG4gICAgLmZpbHRlcigoW2tleSwgX10pID0+ICFpc1JlYWRPbmx5KGtleSkpO1xufVxuXG5leHBvcnQge1xuICBnZXRDb21wb25lbnRBdHRyaWJ1dGVzLFxuICBjcmVhdGVTb3J0YWJsZU9wdGlvbixcbiAgZ2V0VmFsaWRTb3J0YWJsZUVudHJpZXNcbn07XG4iXSwibmFtZXMiOlsiY2FtZWxpemUiLCJldmVudHMiLCJpc1JlYWRPbmx5IiwiaXNIdG1sQXR0cmlidXRlIiwicHJvamVjdCIsImVudHJpZXMiLCJyZWR1Y2UiLCJyZXMiLCJfcmVmIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheSIsImtleSIsInZhbHVlIiwiZ2V0Q29tcG9uZW50QXR0cmlidXRlcyIsIl9yZWYzIiwiJGF0dHJzIiwiX3JlZjMkY29tcG9uZW50RGF0YSIsImNvbXBvbmVudERhdGEiLCJhdHRyaWJ1dGVzIiwiT2JqZWN0IiwiZmlsdGVyIiwiX3JlZjQiLCJfcmVmNSIsIl8iLCJfb2JqZWN0U3ByZWFkIiwiY3JlYXRlU29ydGFibGVPcHRpb24iLCJfcmVmNiIsImNhbGxCYWNrQnVpbGRlciIsIm9wdGlvbnMiLCJnZXRWYWxpZFNvcnRhYmxlRW50cmllcyIsImZvckVhY2giLCJfcmVmNyIsIl9yZWY4IiwiZXZlbnRUeXBlIiwiZXZlbnRCdWlsZGVyIiwiZXZlbnQiLCJjb25jYXQiLCJkcmFnZ2FibGUiLCJfcmVmOSIsIl9yZWYwIiwibWFwIiwiX3JlZjEiLCJfcmVmMTAiLCJfcmVmMTEiLCJfcmVmMTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/core/componentBuilderHelper.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/core/componentStructure.js":
/*!******************************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/core/componentStructure.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentStructure: () => (/* binding */ ComponentStructure)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar getHtmlElementFromNode = function getHtmlElementFromNode(_ref) {\n  var el = _ref.el;\n  return el;\n};\nvar addContext = function addContext(domElement, context) {\n  return domElement.__draggable_context = context;\n};\nvar getContext = function getContext(domElement) {\n  return domElement.__draggable_context;\n};\nvar ComponentStructure = /*#__PURE__*/function () {\n  function ComponentStructure(_ref2) {\n    var _ref2$nodes = _ref2.nodes,\n      header = _ref2$nodes.header,\n      defaultNodes = _ref2$nodes[\"default\"],\n      footer = _ref2$nodes.footer,\n      root = _ref2.root,\n      realList = _ref2.realList;\n    _classCallCheck(this, ComponentStructure);\n    this.defaultNodes = defaultNodes;\n    this.children = [].concat(_toConsumableArray(header), _toConsumableArray(defaultNodes), _toConsumableArray(footer));\n    this.externalComponent = root.externalComponent;\n    this.rootTransition = root.transition;\n    this.tag = root.tag;\n    this.realList = realList;\n  }\n  return _createClass(ComponentStructure, [{\n    key: \"_isRootComponent\",\n    get: function get() {\n      return this.externalComponent || this.rootTransition;\n    }\n  }, {\n    key: \"render\",\n    value: function render(h, attributes) {\n      var tag = this.tag,\n        children = this.children,\n        _isRootComponent = this._isRootComponent;\n      var option = !_isRootComponent ? children : {\n        \"default\": function _default() {\n          return children;\n        }\n      };\n      return h(tag, attributes, option);\n    }\n  }, {\n    key: \"updated\",\n    value: function updated() {\n      var defaultNodes = this.defaultNodes,\n        realList = this.realList;\n      defaultNodes.forEach(function (node, index) {\n        addContext(getHtmlElementFromNode(node), {\n          element: realList[index],\n          index: index\n        });\n      });\n    }\n  }, {\n    key: \"getUnderlyingVm\",\n    value: function getUnderlyingVm(domElement) {\n      return getContext(domElement);\n    }\n  }, {\n    key: \"getVmIndexFromDomIndex\",\n    value: function getVmIndexFromDomIndex(domIndex, element) {\n      var defaultNodes = this.defaultNodes;\n      var length = defaultNodes.length;\n      var domChildren = element.children;\n      var domElement = domChildren.item(domIndex);\n      if (domElement === null) {\n        return length;\n      }\n      var context = getContext(domElement);\n      if (context) {\n        return context.index;\n      }\n      if (length === 0) {\n        return 0;\n      }\n      var firstDomListElement = getHtmlElementFromNode(defaultNodes[0]);\n      var indexFirstDomListElement = _toConsumableArray(domChildren).findIndex(function (element) {\n        return element === firstDomListElement;\n      });\n      return domIndex < indexFirstDomListElement ? 0 : length;\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy9jb3JlL2NvbXBvbmVudFN0cnVjdHVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUFzQkEsQ0FBQUMsSUFBQTtFQUFBLElBQU1DLEVBQUUsR0FBQUQsSUFBQSxDQUFGQyxFQUFFO0VBQUEsT0FBT0EsRUFBRTtBQUFBO0FBQzdDLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFJQyxVQUFVLEVBQUVDLE9BQU87RUFBQSxPQUNwQ0QsVUFBVSxDQUFDRSxtQkFBbUIsR0FBR0QsT0FBTztBQUFBLENBQUM7QUFDNUMsSUFBTUUsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUdILFVBQVU7RUFBQSxPQUFJQSxVQUFVLENBQUNFLG1CQUFtQjtBQUFBO0FBQUMsSUFFMURFLGtCQUFrQjtFQUN0QixTQUFBQSxtQkFBQUMsS0FBQSxFQUlHO0lBQUEsSUFBQUMsV0FBQSxHQUFBRCxLQUFBLENBSERFLEtBQUs7TUFBSUMsTUFBTSxHQUFBRixXQUFBLENBQU5FLE1BQU07TUFBV0MsWUFBWSxHQUFBSCxXQUFBO01BQUVJLE1BQU0sR0FBQUosV0FBQSxDQUFOSSxNQUFNO01BQzlDQyxJQUFJLEdBQUFOLEtBQUEsQ0FBSk0sSUFBSTtNQUNKQyxRQUFRLEdBQUFQLEtBQUEsQ0FBUk8sUUFBUTtJQUFBQyxlQUFBLE9BQUFULGtCQUFBO0lBRVIsSUFBSSxDQUFDSyxZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSSxDQUFDSyxRQUFRLE1BQUFDLE1BQUEsQ0FBQUMsa0JBQUEsQ0FBT1IsTUFBTSxHQUFBUSxrQkFBQSxDQUFLUCxZQUFZLEdBQUFPLGtCQUFBLENBQUtOLE1BQU0sRUFBQztJQUN2RCxJQUFJLENBQUNPLGlCQUFpQixHQUFHTixJQUFJLENBQUNNLGlCQUFpQjtJQUMvQyxJQUFJLENBQUNDLGNBQWMsR0FBR1AsSUFBSSxDQUFDUSxVQUFVO0lBQ3JDLElBQUksQ0FBQ0MsR0FBRyxHQUFHVCxJQUFJLENBQUNTLEdBQUc7SUFDbkIsSUFBSSxDQUFDUixRQUFRLEdBQUdBLFFBQVE7RUFDMUI7RUFBQyxPQUFBUyxZQUFBLENBQUFqQixrQkFBQTtJQUFBa0IsR0FBQTtJQUFBQyxHQUFBLEVBRUQsU0FBQUEsSUFBQSxFQUF1QjtNQUNyQixPQUFPLElBQUksQ0FBQ04saUJBQWlCLElBQUksSUFBSSxDQUFDQyxjQUFjO0lBQ3REO0VBQUM7SUFBQUksR0FBQTtJQUFBRSxLQUFBLEVBRUQsU0FBQUMsTUFBTUEsQ0FBQ0MsQ0FBQyxFQUFFQyxVQUFVLEVBQUU7TUFDcEIsSUFBUVAsR0FBRyxHQUFpQyxJQUFJLENBQXhDQSxHQUFHO1FBQUVOLFFBQVEsR0FBdUIsSUFBSSxDQUFuQ0EsUUFBUTtRQUFFYyxnQkFBZ0IsR0FBSyxJQUFJLENBQXpCQSxnQkFBZ0I7TUFDdkMsSUFBTUMsTUFBTSxHQUFHLENBQUNELGdCQUFnQixHQUFHZCxRQUFRLEdBQUc7UUFBRSxXQUFTLFNBQVRnQixRQUFPQSxDQUFBO1VBQUEsT0FBUWhCLFFBQVE7UUFBQTtNQUFDLENBQUM7TUFDekUsT0FBT1ksQ0FBQyxDQUFDTixHQUFHLEVBQUVPLFVBQVUsRUFBRUUsTUFBTSxDQUFDO0lBQ25DO0VBQUM7SUFBQVAsR0FBQTtJQUFBRSxLQUFBLEVBRUQsU0FBQU8sT0FBT0EsQ0FBQSxFQUFHO01BQ1IsSUFBUXRCLFlBQVksR0FBZSxJQUFJLENBQS9CQSxZQUFZO1FBQUVHLFFBQVEsR0FBSyxJQUFJLENBQWpCQSxRQUFRO01BQzlCSCxZQUFZLENBQUN1QixPQUFPLENBQUMsVUFBQ0MsSUFBSSxFQUFFQyxLQUFLLEVBQUs7UUFDcENuQyxVQUFVLENBQUNILHNCQUFzQixDQUFDcUMsSUFBSSxDQUFDLEVBQUU7VUFDdkNFLE9BQU8sRUFBRXZCLFFBQVEsQ0FBQ3NCLEtBQUssQ0FBQztVQUN4QkEsS0FBSyxFQUFMQTtRQUNGLENBQUMsQ0FBQztNQUNKLENBQUMsQ0FBQztJQUNKO0VBQUM7SUFBQVosR0FBQTtJQUFBRSxLQUFBLEVBRUQsU0FBQVksZUFBZUEsQ0FBQ3BDLFVBQVUsRUFBRTtNQUMxQixPQUFPRyxVQUFVLENBQUNILFVBQVUsQ0FBQztJQUMvQjtFQUFDO0lBQUFzQixHQUFBO0lBQUFFLEtBQUEsRUFFRCxTQUFBYSxzQkFBc0JBLENBQUNDLFFBQVEsRUFBRUgsT0FBTyxFQUFFO01BQ3hDLElBQVExQixZQUFZLEdBQUssSUFBSSxDQUFyQkEsWUFBWTtNQUNwQixJQUFROEIsTUFBTSxHQUFLOUIsWUFBWSxDQUF2QjhCLE1BQU07TUFDZCxJQUFNQyxXQUFXLEdBQUdMLE9BQU8sQ0FBQ3JCLFFBQVE7TUFDcEMsSUFBTWQsVUFBVSxHQUFHd0MsV0FBVyxDQUFDQyxJQUFJLENBQUNILFFBQVEsQ0FBQztNQUU3QyxJQUFJdEMsVUFBVSxLQUFLLElBQUksRUFBRTtRQUN2QixPQUFPdUMsTUFBTTtNQUNmO01BQ0EsSUFBTXRDLE9BQU8sR0FBR0UsVUFBVSxDQUFDSCxVQUFVLENBQUM7TUFDdEMsSUFBSUMsT0FBTyxFQUFFO1FBQ1gsT0FBT0EsT0FBTyxDQUFDaUMsS0FBSztNQUN0QjtNQUVBLElBQUlLLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDaEIsT0FBTyxDQUFDO01BQ1Y7TUFDQSxJQUFNRyxtQkFBbUIsR0FBRzlDLHNCQUFzQixDQUFDYSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDbkUsSUFBTWtDLHdCQUF3QixHQUFHM0Isa0JBQUEsQ0FBSXdCLFdBQVcsRUFBRUksU0FBUyxDQUN6RCxVQUFBVCxPQUFPO1FBQUEsT0FBSUEsT0FBTyxLQUFLTyxtQkFBbUI7TUFBQSxDQUM1QyxDQUFDO01BQ0QsT0FBT0osUUFBUSxHQUFHSyx3QkFBd0IsR0FBRyxDQUFDLEdBQUdKLE1BQU07SUFDekQ7RUFBQztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC92ZW5kb3JzL3Z1ZWRyYWdnYWJsZS9zcmMvY29yZS9jb21wb25lbnRTdHJ1Y3R1cmUuanM/YzcwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRIdG1sRWxlbWVudEZyb21Ob2RlID0gKHsgZWwgfSkgPT4gZWw7XG5jb25zdCBhZGRDb250ZXh0ID0gKGRvbUVsZW1lbnQsIGNvbnRleHQpID0+XG4gIChkb21FbGVtZW50Ll9fZHJhZ2dhYmxlX2NvbnRleHQgPSBjb250ZXh0KTtcbmNvbnN0IGdldENvbnRleHQgPSBkb21FbGVtZW50ID0+IGRvbUVsZW1lbnQuX19kcmFnZ2FibGVfY29udGV4dDtcblxuY2xhc3MgQ29tcG9uZW50U3RydWN0dXJlIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIG5vZGVzOiB7IGhlYWRlciwgZGVmYXVsdDogZGVmYXVsdE5vZGVzLCBmb290ZXIgfSxcbiAgICByb290LFxuICAgIHJlYWxMaXN0XG4gIH0pIHtcbiAgICB0aGlzLmRlZmF1bHROb2RlcyA9IGRlZmF1bHROb2RlcztcbiAgICB0aGlzLmNoaWxkcmVuID0gWy4uLmhlYWRlciwgLi4uZGVmYXVsdE5vZGVzLCAuLi5mb290ZXJdO1xuICAgIHRoaXMuZXh0ZXJuYWxDb21wb25lbnQgPSByb290LmV4dGVybmFsQ29tcG9uZW50O1xuICAgIHRoaXMucm9vdFRyYW5zaXRpb24gPSByb290LnRyYW5zaXRpb247XG4gICAgdGhpcy50YWcgPSByb290LnRhZztcbiAgICB0aGlzLnJlYWxMaXN0ID0gcmVhbExpc3Q7XG4gIH1cblxuICBnZXQgX2lzUm9vdENvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlcm5hbENvbXBvbmVudCB8fCB0aGlzLnJvb3RUcmFuc2l0aW9uO1xuICB9XG5cbiAgcmVuZGVyKGgsIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCB7IHRhZywgY2hpbGRyZW4sIF9pc1Jvb3RDb21wb25lbnQgfSA9IHRoaXM7XG4gICAgY29uc3Qgb3B0aW9uID0gIV9pc1Jvb3RDb21wb25lbnQgPyBjaGlsZHJlbiA6IHsgZGVmYXVsdDogKCkgPT4gY2hpbGRyZW4gfTtcbiAgICByZXR1cm4gaCh0YWcsIGF0dHJpYnV0ZXMsIG9wdGlvbik7XG4gIH1cblxuICB1cGRhdGVkKCkge1xuICAgIGNvbnN0IHsgZGVmYXVsdE5vZGVzLCByZWFsTGlzdCB9ID0gdGhpcztcbiAgICBkZWZhdWx0Tm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICAgIGFkZENvbnRleHQoZ2V0SHRtbEVsZW1lbnRGcm9tTm9kZShub2RlKSwge1xuICAgICAgICBlbGVtZW50OiByZWFsTGlzdFtpbmRleF0sXG4gICAgICAgIGluZGV4XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldFVuZGVybHlpbmdWbShkb21FbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldENvbnRleHQoZG9tRWxlbWVudCk7XG4gIH1cblxuICBnZXRWbUluZGV4RnJvbURvbUluZGV4KGRvbUluZGV4LCBlbGVtZW50KSB7XG4gICAgY29uc3QgeyBkZWZhdWx0Tm9kZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IGRlZmF1bHROb2RlcztcbiAgICBjb25zdCBkb21DaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgY29uc3QgZG9tRWxlbWVudCA9IGRvbUNoaWxkcmVuLml0ZW0oZG9tSW5kZXgpO1xuXG4gICAgaWYgKGRvbUVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0KGRvbUVsZW1lbnQpO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gY29udGV4dC5pbmRleDtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgZmlyc3REb21MaXN0RWxlbWVudCA9IGdldEh0bWxFbGVtZW50RnJvbU5vZGUoZGVmYXVsdE5vZGVzWzBdKTtcbiAgICBjb25zdCBpbmRleEZpcnN0RG9tTGlzdEVsZW1lbnQgPSBbLi4uZG9tQ2hpbGRyZW5dLmZpbmRJbmRleChcbiAgICAgIGVsZW1lbnQgPT4gZWxlbWVudCA9PT0gZmlyc3REb21MaXN0RWxlbWVudFxuICAgICk7XG4gICAgcmV0dXJuIGRvbUluZGV4IDwgaW5kZXhGaXJzdERvbUxpc3RFbGVtZW50ID8gMCA6IGxlbmd0aDtcbiAgfVxufVxuXG5leHBvcnQgeyBDb21wb25lbnRTdHJ1Y3R1cmUgfTtcbiJdLCJuYW1lcyI6WyJnZXRIdG1sRWxlbWVudEZyb21Ob2RlIiwiX3JlZiIsImVsIiwiYWRkQ29udGV4dCIsImRvbUVsZW1lbnQiLCJjb250ZXh0IiwiX19kcmFnZ2FibGVfY29udGV4dCIsImdldENvbnRleHQiLCJDb21wb25lbnRTdHJ1Y3R1cmUiLCJfcmVmMiIsIl9yZWYyJG5vZGVzIiwibm9kZXMiLCJoZWFkZXIiLCJkZWZhdWx0Tm9kZXMiLCJmb290ZXIiLCJyb290IiwicmVhbExpc3QiLCJfY2xhc3NDYWxsQ2hlY2siLCJjaGlsZHJlbiIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImV4dGVybmFsQ29tcG9uZW50Iiwicm9vdFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwidGFnIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwiZ2V0IiwidmFsdWUiLCJyZW5kZXIiLCJoIiwiYXR0cmlidXRlcyIsIl9pc1Jvb3RDb21wb25lbnQiLCJvcHRpb24iLCJkZWZhdWx0IiwidXBkYXRlZCIsImZvckVhY2giLCJub2RlIiwiaW5kZXgiLCJlbGVtZW50IiwiZ2V0VW5kZXJseWluZ1ZtIiwiZ2V0Vm1JbmRleEZyb21Eb21JbmRleCIsImRvbUluZGV4IiwibGVuZ3RoIiwiZG9tQ2hpbGRyZW4iLCJpdGVtIiwiZmlyc3REb21MaXN0RWxlbWVudCIsImluZGV4Rmlyc3REb21MaXN0RWxlbWVudCIsImZpbmRJbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/core/componentStructure.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/core/renderHelper.js":
/*!************************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/core/renderHelper.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeComponentStructure: () => (/* binding */ computeComponentStructure)\n/* harmony export */ });\n/* harmony import */ var _componentStructure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./componentStructure */ \"./resources/js/app/vendors/vuedraggable/src/core/componentStructure.js\");\n/* harmony import */ var _util_tags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tags */ \"./resources/js/app/vendors/vuedraggable/src/util/tags.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nfunction getSlot(slots, key) {\n  var slotValue = slots[key];\n  return slotValue ? slotValue() : [];\n}\nfunction computeNodes(_ref) {\n  var $slots = _ref.$slots,\n    realList = _ref.realList,\n    getKey = _ref.getKey;\n  var normalizedList = realList || [];\n  var _map = [\"header\", \"footer\"].map(function (name) {\n      return getSlot($slots, name);\n    }),\n    _map2 = _slicedToArray(_map, 2),\n    header = _map2[0],\n    footer = _map2[1];\n  var item = $slots.item;\n  if (!item) {\n    throw new Error(\"draggable element must have an item slot\");\n  }\n  var defaultNodes = normalizedList.flatMap(function (element, index) {\n    return item({\n      element: element,\n      index: index\n    }).map(function (node) {\n      node.key = getKey(element);\n      node.props = _objectSpread(_objectSpread({}, node.props || {}), {}, {\n        \"data-draggable\": true\n      });\n      return node;\n    });\n  });\n  if (defaultNodes.length !== normalizedList.length) {\n    throw new Error(\"Item slot must have only one child\");\n  }\n  return {\n    header: header,\n    footer: footer,\n    \"default\": defaultNodes\n  };\n}\nfunction getRootInformation(tag) {\n  var transition = (0,_util_tags__WEBPACK_IMPORTED_MODULE_1__.isTransition)(tag);\n  var externalComponent = !(0,_util_tags__WEBPACK_IMPORTED_MODULE_1__.isHtmlTag)(tag) && !transition;\n  return {\n    transition: transition,\n    externalComponent: externalComponent,\n    tag: externalComponent ? (0,vue__WEBPACK_IMPORTED_MODULE_2__.resolveComponent)(tag) : transition ? vue__WEBPACK_IMPORTED_MODULE_2__.TransitionGroup : tag\n  };\n}\nfunction computeComponentStructure(_ref2) {\n  var $slots = _ref2.$slots,\n    tag = _ref2.tag,\n    realList = _ref2.realList,\n    getKey = _ref2.getKey;\n  var nodes = computeNodes({\n    $slots: $slots,\n    realList: realList,\n    getKey: getKey\n  });\n  var root = getRootInformation(tag);\n  return new _componentStructure__WEBPACK_IMPORTED_MODULE_0__.ComponentStructure({\n    nodes: nodes,\n    root: root,\n    realList: realList\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy9jb3JlL3JlbmRlckhlbHBlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQ0g7QUFDQztBQUV4RCxTQUFTSyxPQUFPQSxDQUFDQyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtFQUMzQixJQUFNQyxTQUFTLEdBQUdGLEtBQUssQ0FBQ0MsR0FBRyxDQUFDO0VBQzVCLE9BQU9DLFNBQVMsR0FBR0EsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFO0FBQ3JDO0FBRUEsU0FBU0MsWUFBWUEsQ0FBQUMsSUFBQSxFQUErQjtFQUFBLElBQTVCQyxNQUFNLEdBQUFELElBQUEsQ0FBTkMsTUFBTTtJQUFFQyxRQUFRLEdBQUFGLElBQUEsQ0FBUkUsUUFBUTtJQUFFQyxNQUFNLEdBQUFILElBQUEsQ0FBTkcsTUFBTTtFQUM5QyxJQUFNQyxjQUFjLEdBQUdGLFFBQVEsSUFBSSxFQUFFO0VBQ3JDLElBQUFHLElBQUEsR0FBeUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxVQUFBQyxJQUFJO01BQUEsT0FDcERaLE9BQU8sQ0FBQ00sTUFBTSxFQUFFTSxJQUFJLENBQUM7SUFBQSxDQUN2QixDQUFDO0lBQUFDLEtBQUEsR0FBQUMsY0FBQSxDQUFBSixJQUFBO0lBRk1LLE1BQU0sR0FBQUYsS0FBQTtJQUFFRyxNQUFNLEdBQUFILEtBQUE7RUFHckIsSUFBUUksSUFBSSxHQUFLWCxNQUFNLENBQWZXLElBQUk7RUFDWixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNULE1BQU0sSUFBSUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDO0VBQzdEO0VBQ0EsSUFBTUMsWUFBWSxHQUFHVixjQUFjLENBQUNXLE9BQU8sQ0FBQyxVQUFDQyxPQUFPLEVBQUVDLEtBQUs7SUFBQSxPQUN6REwsSUFBSSxDQUFDO01BQUVJLE9BQU8sRUFBUEEsT0FBTztNQUFFQyxLQUFLLEVBQUxBO0lBQU0sQ0FBQyxDQUFDLENBQUNYLEdBQUcsQ0FBQyxVQUFBWSxJQUFJLEVBQUk7TUFDbkNBLElBQUksQ0FBQ3JCLEdBQUcsR0FBR00sTUFBTSxDQUFDYSxPQUFPLENBQUM7TUFDMUJFLElBQUksQ0FBQ0MsS0FBSyxHQUFBQyxhQUFBLENBQUFBLGFBQUEsS0FBU0YsSUFBSSxDQUFDQyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQUcsZ0JBQWdCLEVBQUU7TUFBSSxFQUFFO01BQzlELE9BQU9ELElBQUk7SUFDYixDQUFDLENBQUM7RUFBQSxDQUNKLENBQUM7RUFDRCxJQUFJSixZQUFZLENBQUNPLE1BQU0sS0FBS2pCLGNBQWMsQ0FBQ2lCLE1BQU0sRUFBRTtJQUNqRCxNQUFNLElBQUlSLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQztFQUN2RDtFQUNBLE9BQU87SUFDTEgsTUFBTSxFQUFOQSxNQUFNO0lBQ05DLE1BQU0sRUFBTkEsTUFBTTtJQUNOLFdBQVNHO0VBQ1gsQ0FBQztBQUNIO0FBRUEsU0FBU1Esa0JBQWtCQSxDQUFDQyxHQUFHLEVBQUU7RUFDL0IsSUFBTUMsVUFBVSxHQUFHaEMsd0RBQVksQ0FBQytCLEdBQUcsQ0FBQztFQUNwQyxJQUFNRSxpQkFBaUIsR0FBRyxDQUFDbEMscURBQVMsQ0FBQ2dDLEdBQUcsQ0FBQyxJQUFJLENBQUNDLFVBQVU7RUFDeEQsT0FBTztJQUNMQSxVQUFVLEVBQVZBLFVBQVU7SUFDVkMsaUJBQWlCLEVBQWpCQSxpQkFBaUI7SUFDakJGLEdBQUcsRUFBRUUsaUJBQWlCLEdBQ2xCaEMscURBQWdCLENBQUM4QixHQUFHLENBQUMsR0FDckJDLFVBQVUsR0FDVjlCLGdEQUFlLEdBQ2Y2QjtFQUNOLENBQUM7QUFDSDtBQUVBLFNBQVNHLHlCQUF5QkEsQ0FBQUMsS0FBQSxFQUFvQztFQUFBLElBQWpDMUIsTUFBTSxHQUFBMEIsS0FBQSxDQUFOMUIsTUFBTTtJQUFFc0IsR0FBRyxHQUFBSSxLQUFBLENBQUhKLEdBQUc7SUFBRXJCLFFBQVEsR0FBQXlCLEtBQUEsQ0FBUnpCLFFBQVE7SUFBRUMsTUFBTSxHQUFBd0IsS0FBQSxDQUFOeEIsTUFBTTtFQUNoRSxJQUFNeUIsS0FBSyxHQUFHN0IsWUFBWSxDQUFDO0lBQUVFLE1BQU0sRUFBTkEsTUFBTTtJQUFFQyxRQUFRLEVBQVJBLFFBQVE7SUFBRUMsTUFBTSxFQUFOQTtFQUFPLENBQUMsQ0FBQztFQUN4RCxJQUFNMEIsSUFBSSxHQUFHUCxrQkFBa0IsQ0FBQ0MsR0FBRyxDQUFDO0VBQ3BDLE9BQU8sSUFBSWpDLG1FQUFrQixDQUFDO0lBQUVzQyxLQUFLLEVBQUxBLEtBQUs7SUFBRUMsSUFBSSxFQUFKQSxJQUFJO0lBQUUzQixRQUFRLEVBQVJBO0VBQVMsQ0FBQyxDQUFDO0FBQzFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2FwcC92ZW5kb3JzL3Z1ZWRyYWdnYWJsZS9zcmMvY29yZS9yZW5kZXJIZWxwZXIuanM/YzJkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRTdHJ1Y3R1cmUgfSBmcm9tIFwiLi9jb21wb25lbnRTdHJ1Y3R1cmVcIjtcbmltcG9ydCB7IGlzSHRtbFRhZywgaXNUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3V0aWwvdGFnc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSBcInZ1ZVwiO1xuXG5mdW5jdGlvbiBnZXRTbG90KHNsb3RzLCBrZXkpIHtcbiAgY29uc3Qgc2xvdFZhbHVlID0gc2xvdHNba2V5XTtcbiAgcmV0dXJuIHNsb3RWYWx1ZSA/IHNsb3RWYWx1ZSgpIDogW107XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVOb2Rlcyh7ICRzbG90cywgcmVhbExpc3QsIGdldEtleSB9KSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRMaXN0ID0gcmVhbExpc3QgfHwgW107XG4gIGNvbnN0IFtoZWFkZXIsIGZvb3Rlcl0gPSBbXCJoZWFkZXJcIiwgXCJmb290ZXJcIl0ubWFwKG5hbWUgPT5cbiAgICBnZXRTbG90KCRzbG90cywgbmFtZSlcbiAgKTtcbiAgY29uc3QgeyBpdGVtIH0gPSAkc2xvdHM7XG4gIGlmICghaXRlbSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImRyYWdnYWJsZSBlbGVtZW50IG11c3QgaGF2ZSBhbiBpdGVtIHNsb3RcIik7XG4gIH1cbiAgY29uc3QgZGVmYXVsdE5vZGVzID0gbm9ybWFsaXplZExpc3QuZmxhdE1hcCgoZWxlbWVudCwgaW5kZXgpID0+XG4gICAgaXRlbSh7IGVsZW1lbnQsIGluZGV4IH0pLm1hcChub2RlID0+IHtcbiAgICAgIG5vZGUua2V5ID0gZ2V0S2V5KGVsZW1lbnQpO1xuICAgICAgbm9kZS5wcm9wcyA9IHsgLi4uKG5vZGUucHJvcHMgfHwge30pLCBcImRhdGEtZHJhZ2dhYmxlXCI6IHRydWUgfTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0pXG4gICk7XG4gIGlmIChkZWZhdWx0Tm9kZXMubGVuZ3RoICE9PSBub3JtYWxpemVkTGlzdC5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdGVtIHNsb3QgbXVzdCBoYXZlIG9ubHkgb25lIGNoaWxkXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgaGVhZGVyLFxuICAgIGZvb3RlcixcbiAgICBkZWZhdWx0OiBkZWZhdWx0Tm9kZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Um9vdEluZm9ybWF0aW9uKHRhZykge1xuICBjb25zdCB0cmFuc2l0aW9uID0gaXNUcmFuc2l0aW9uKHRhZyk7XG4gIGNvbnN0IGV4dGVybmFsQ29tcG9uZW50ID0gIWlzSHRtbFRhZyh0YWcpICYmICF0cmFuc2l0aW9uO1xuICByZXR1cm4ge1xuICAgIHRyYW5zaXRpb24sXG4gICAgZXh0ZXJuYWxDb21wb25lbnQsXG4gICAgdGFnOiBleHRlcm5hbENvbXBvbmVudFxuICAgICAgPyByZXNvbHZlQ29tcG9uZW50KHRhZylcbiAgICAgIDogdHJhbnNpdGlvblxuICAgICAgPyBUcmFuc2l0aW9uR3JvdXBcbiAgICAgIDogdGFnXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVDb21wb25lbnRTdHJ1Y3R1cmUoeyAkc2xvdHMsIHRhZywgcmVhbExpc3QsIGdldEtleSB9KSB7XG4gIGNvbnN0IG5vZGVzID0gY29tcHV0ZU5vZGVzKHsgJHNsb3RzLCByZWFsTGlzdCwgZ2V0S2V5IH0pO1xuICBjb25zdCByb290ID0gZ2V0Um9vdEluZm9ybWF0aW9uKHRhZyk7XG4gIHJldHVybiBuZXcgQ29tcG9uZW50U3RydWN0dXJlKHsgbm9kZXMsIHJvb3QsIHJlYWxMaXN0IH0pO1xufVxuXG5leHBvcnQgeyBjb21wdXRlQ29tcG9uZW50U3RydWN0dXJlIH07XG4iXSwibmFtZXMiOlsiQ29tcG9uZW50U3RydWN0dXJlIiwiaXNIdG1sVGFnIiwiaXNUcmFuc2l0aW9uIiwicmVzb2x2ZUNvbXBvbmVudCIsIlRyYW5zaXRpb25Hcm91cCIsImdldFNsb3QiLCJzbG90cyIsImtleSIsInNsb3RWYWx1ZSIsImNvbXB1dGVOb2RlcyIsIl9yZWYiLCIkc2xvdHMiLCJyZWFsTGlzdCIsImdldEtleSIsIm5vcm1hbGl6ZWRMaXN0IiwiX21hcCIsIm1hcCIsIm5hbWUiLCJfbWFwMiIsIl9zbGljZWRUb0FycmF5IiwiaGVhZGVyIiwiZm9vdGVyIiwiaXRlbSIsIkVycm9yIiwiZGVmYXVsdE5vZGVzIiwiZmxhdE1hcCIsImVsZW1lbnQiLCJpbmRleCIsIm5vZGUiLCJwcm9wcyIsIl9vYmplY3RTcHJlYWQiLCJsZW5ndGgiLCJnZXRSb290SW5mb3JtYXRpb24iLCJ0YWciLCJ0cmFuc2l0aW9uIiwiZXh0ZXJuYWxDb21wb25lbnQiLCJjb21wdXRlQ29tcG9uZW50U3RydWN0dXJlIiwiX3JlZjIiLCJub2RlcyIsInJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/core/renderHelper.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/core/sortableEvents.js":
/*!**************************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/core/sortableEvents.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   events: () => (/* binding */ events),\n/* harmony export */   isReadOnly: () => (/* binding */ isReadOnly)\n/* harmony export */ });\nvar manageAndEmit = [\"Start\", \"Add\", \"Remove\", \"Update\", \"End\"];\nvar emit = [\"Choose\", \"Unchoose\", \"Sort\", \"Filter\", \"Clone\"];\nvar manage = [\"Move\"];\nvar eventHandlerNames = [manage, manageAndEmit, emit].flatMap(function (events) {\n  return events;\n}).map(function (evt) {\n  return \"on\".concat(evt);\n});\nvar events = {\n  manage: manage,\n  manageAndEmit: manageAndEmit,\n  emit: emit\n};\nfunction isReadOnly(eventName) {\n  return eventHandlerNames.indexOf(eventName) !== -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy9jb3JlL3NvcnRhYmxlRXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEsYUFBYSxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQztBQUNqRSxJQUFNQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDO0FBQzlELElBQU1DLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUN2QixJQUFNQyxpQkFBaUIsR0FBRyxDQUFDRCxNQUFNLEVBQUVGLGFBQWEsRUFBRUMsSUFBSSxDQUFDLENBQ3BERyxPQUFPLENBQUMsVUFBQUMsTUFBTTtFQUFBLE9BQUlBLE1BQU07QUFBQSxFQUFDLENBQ3pCQyxHQUFHLENBQUMsVUFBQUMsR0FBRztFQUFBLFlBQUFDLE1BQUEsQ0FBU0QsR0FBRztBQUFBLENBQUUsQ0FBQztBQUV6QixJQUFNRixNQUFNLEdBQUc7RUFDYkgsTUFBTSxFQUFOQSxNQUFNO0VBQ05GLGFBQWEsRUFBYkEsYUFBYTtFQUNiQyxJQUFJLEVBQUpBO0FBQ0YsQ0FBQztBQUVELFNBQVNRLFVBQVVBLENBQUNDLFNBQVMsRUFBRTtFQUM3QixPQUFPUCxpQkFBaUIsQ0FBQ1EsT0FBTyxDQUFDRCxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy9jb3JlL3NvcnRhYmxlRXZlbnRzLmpzPzgzYTYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbWFuYWdlQW5kRW1pdCA9IFtcIlN0YXJ0XCIsIFwiQWRkXCIsIFwiUmVtb3ZlXCIsIFwiVXBkYXRlXCIsIFwiRW5kXCJdO1xuY29uc3QgZW1pdCA9IFtcIkNob29zZVwiLCBcIlVuY2hvb3NlXCIsIFwiU29ydFwiLCBcIkZpbHRlclwiLCBcIkNsb25lXCJdO1xuY29uc3QgbWFuYWdlID0gW1wiTW92ZVwiXTtcbmNvbnN0IGV2ZW50SGFuZGxlck5hbWVzID0gW21hbmFnZSwgbWFuYWdlQW5kRW1pdCwgZW1pdF1cbiAgLmZsYXRNYXAoZXZlbnRzID0+IGV2ZW50cylcbiAgLm1hcChldnQgPT4gYG9uJHtldnR9YCk7XG5cbmNvbnN0IGV2ZW50cyA9IHtcbiAgbWFuYWdlLFxuICBtYW5hZ2VBbmRFbWl0LFxuICBlbWl0XG59O1xuXG5mdW5jdGlvbiBpc1JlYWRPbmx5KGV2ZW50TmFtZSkge1xuICByZXR1cm4gZXZlbnRIYW5kbGVyTmFtZXMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMTtcbn1cblxuZXhwb3J0IHsgZXZlbnRzLCBpc1JlYWRPbmx5IH07XG4iXSwibmFtZXMiOlsibWFuYWdlQW5kRW1pdCIsImVtaXQiLCJtYW5hZ2UiLCJldmVudEhhbmRsZXJOYW1lcyIsImZsYXRNYXAiLCJldmVudHMiLCJtYXAiLCJldnQiLCJjb25jYXQiLCJpc1JlYWRPbmx5IiwiZXZlbnROYW1lIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/core/sortableEvents.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/util/console.js":
/*!*******************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/util/console.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   console: () => (/* binding */ console)\n/* harmony export */ });\nfunction getConsole() {\n  if (typeof window !== \"undefined\") {\n    return window.console;\n  }\n  return __webpack_require__.g.console;\n}\nvar console = getConsole();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy91dGlsL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFVBQVVBLENBQUEsRUFBRztFQUNwQixJQUFJLE9BQU9DLE1BQU0sS0FBSyxXQUFXLEVBQUU7SUFDakMsT0FBT0EsTUFBTSxDQUFDQyxPQUFPO0VBQ3ZCO0VBQ0EsT0FBT0MscUJBQU0sQ0FBQ0QsT0FBTztBQUN2QjtBQUNBLElBQU1BLE9BQU8sR0FBR0YsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy91dGlsL2NvbnNvbGUuanM/MmYwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRDb25zb2xlKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB3aW5kb3cuY29uc29sZTtcbiAgfVxuICByZXR1cm4gZ2xvYmFsLmNvbnNvbGU7XG59XG5jb25zdCBjb25zb2xlID0gZ2V0Q29uc29sZSgpO1xuXG5leHBvcnQgeyBjb25zb2xlIH07XG4iXSwibmFtZXMiOlsiZ2V0Q29uc29sZSIsIndpbmRvdyIsImNvbnNvbGUiLCJnbG9iYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/util/console.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/util/htmlHelper.js":
/*!**********************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/util/htmlHelper.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insertNodeAt: () => (/* binding */ insertNodeAt),\n/* harmony export */   removeNode: () => (/* binding */ removeNode)\n/* harmony export */ });\nfunction removeNode(node) {\n  if (node.parentElement !== null) {\n    node.parentElement.removeChild(node);\n  }\n}\nfunction insertNodeAt(fatherNode, node, position) {\n  var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;\n  fatherNode.insertBefore(node, refNode);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy91dGlsL2h0bWxIZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7RUFDeEIsSUFBSUEsSUFBSSxDQUFDQyxhQUFhLEtBQUssSUFBSSxFQUFFO0lBQy9CRCxJQUFJLENBQUNDLGFBQWEsQ0FBQ0MsV0FBVyxDQUFDRixJQUFJLENBQUM7RUFDdEM7QUFDRjtBQUVBLFNBQVNHLFlBQVlBLENBQUNDLFVBQVUsRUFBRUosSUFBSSxFQUFFSyxRQUFRLEVBQUU7RUFDaEQsSUFBTUMsT0FBTyxHQUNYRCxRQUFRLEtBQUssQ0FBQyxHQUNWRCxVQUFVLENBQUNHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FDdEJILFVBQVUsQ0FBQ0csUUFBUSxDQUFDRixRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUNHLFdBQVc7RUFDbkRKLFVBQVUsQ0FBQ0ssWUFBWSxDQUFDVCxJQUFJLEVBQUVNLE9BQU8sQ0FBQztBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvdmVuZG9ycy92dWVkcmFnZ2FibGUvc3JjL3V0aWwvaHRtbEhlbHBlci5qcz9mZDA1Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnRFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgbm9kZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydE5vZGVBdChmYXRoZXJOb2RlLCBub2RlLCBwb3NpdGlvbikge1xuICBjb25zdCByZWZOb2RlID1cbiAgICBwb3NpdGlvbiA9PT0gMFxuICAgICAgPyBmYXRoZXJOb2RlLmNoaWxkcmVuWzBdXG4gICAgICA6IGZhdGhlck5vZGUuY2hpbGRyZW5bcG9zaXRpb24gLSAxXS5uZXh0U2libGluZztcbiAgZmF0aGVyTm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSk7XG59XG5cbmV4cG9ydCB7IGluc2VydE5vZGVBdCwgcmVtb3ZlTm9kZSB9O1xuIl0sIm5hbWVzIjpbInJlbW92ZU5vZGUiLCJub2RlIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0Tm9kZUF0IiwiZmF0aGVyTm9kZSIsInBvc2l0aW9uIiwicmVmTm9kZSIsImNoaWxkcmVuIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/util/htmlHelper.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/util/string.js":
/*!******************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/util/string.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelize: () => (/* binding */ camelize)\n/* harmony export */ });\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\nvar regex = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(regex, function (_, c) {\n    return c.toUpperCase();\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy91dGlsL3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsTUFBTUEsQ0FBQ0MsRUFBRSxFQUFFO0VBQ2xCLElBQU1DLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0VBQ2pDLE9BQU8sU0FBU0MsUUFBUUEsQ0FBQ0MsR0FBRyxFQUFFO0lBQzVCLElBQU1DLEdBQUcsR0FBR0wsS0FBSyxDQUFDSSxHQUFHLENBQUM7SUFDdEIsT0FBT0MsR0FBRyxLQUFLTCxLQUFLLENBQUNJLEdBQUcsQ0FBQyxHQUFHTCxFQUFFLENBQUNLLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDLENBQUM7QUFDSDtBQUVBLElBQU1FLEtBQUssR0FBRyxRQUFRO0FBQ3RCLElBQU1DLFFBQVEsR0FBR1QsTUFBTSxDQUFDLFVBQUFNLEdBQUc7RUFBQSxPQUFJQSxHQUFHLENBQUNJLE9BQU8sQ0FBQ0YsS0FBSyxFQUFFLFVBQUNHLENBQUMsRUFBRUMsQ0FBQztJQUFBLE9BQUtBLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7RUFBQSxFQUFDO0FBQUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvdmVuZG9ycy92dWVkcmFnZ2FibGUvc3JjL3V0aWwvc3RyaW5nLmpzP2Y2MmIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FjaGVkKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuKHN0cikge1xuICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpO1xuICB9O1xufVxuXG5jb25zdCByZWdleCA9IC8tKFxcdykvZztcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVkKHN0ciA9PiBzdHIucmVwbGFjZShyZWdleCwgKF8sIGMpID0+IGMudG9VcHBlckNhc2UoKSkpO1xuXG5leHBvcnQgeyBjYW1lbGl6ZSB9O1xuIl0sIm5hbWVzIjpbImNhY2hlZCIsImZuIiwiY2FjaGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjYWNoZWRGbiIsInN0ciIsImhpdCIsInJlZ2V4IiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsImMiLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/util/string.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/util/tags.js":
/*!****************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/util/tags.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHtmlAttribute: () => (/* binding */ isHtmlAttribute),\n/* harmony export */   isHtmlTag: () => (/* binding */ isHtmlTag),\n/* harmony export */   isTransition: () => (/* binding */ isTransition)\n/* harmony export */ });\nvar tags = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"math\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rb\", \"rp\", \"rt\", \"rtc\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"slot\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"svg\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"];\nfunction isHtmlTag(name) {\n  return tags.includes(name);\n}\nfunction isTransition(name) {\n  return [\"transition-group\", \"TransitionGroup\"].includes(name);\n}\nfunction isHtmlAttribute(value) {\n  return [\"id\", \"class\", \"role\", \"style\"].includes(value) || value.startsWith(\"data-\") || value.startsWith(\"aria-\") || value.startsWith(\"on\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwL3ZlbmRvcnMvdnVlZHJhZ2dhYmxlL3NyYy91dGlsL3RhZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTUEsSUFBSSxHQUFHLENBQ1gsR0FBRyxFQUNILE1BQU0sRUFDTixTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNQLEdBQUcsRUFDSCxNQUFNLEVBQ04sS0FBSyxFQUNMLEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLEtBQUssRUFDTCxVQUFVLEVBQ1YsTUFBTSxFQUNOLFVBQVUsRUFDVixJQUFJLEVBQ0osS0FBSyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLEtBQUssRUFDTCxJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixPQUFPLEVBQ1AsVUFBVSxFQUNWLFlBQVksRUFDWixRQUFRLEVBQ1IsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixNQUFNLEVBQ04sUUFBUSxFQUNSLFFBQVEsRUFDUixJQUFJLEVBQ0osTUFBTSxFQUNOLEdBQUcsRUFDSCxRQUFRLEVBQ1IsS0FBSyxFQUNMLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLE9BQU8sRUFDUCxRQUFRLEVBQ1IsSUFBSSxFQUNKLE1BQU0sRUFDTixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFDVixNQUFNLEVBQ04sT0FBTyxFQUNQLEtBQUssRUFDTCxVQUFVLEVBQ1YsUUFBUSxFQUNSLElBQUksRUFDSixVQUFVLEVBQ1YsUUFBUSxFQUNSLFFBQVEsRUFDUixHQUFHLEVBQ0gsT0FBTyxFQUNQLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLEdBQUcsRUFDSCxJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixLQUFLLEVBQ0wsTUFBTSxFQUNOLEdBQUcsRUFDSCxNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxRQUFRLEVBQ1IsTUFBTSxFQUNOLE9BQU8sRUFDUCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixPQUFPLEVBQ1AsS0FBSyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsS0FBSyxFQUNMLE9BQU8sRUFDUCxPQUFPLEVBQ1AsSUFBSSxFQUNKLFVBQVUsRUFDVixVQUFVLEVBQ1YsT0FBTyxFQUNQLElBQUksRUFDSixPQUFPLEVBQ1AsTUFBTSxFQUNOLE9BQU8sRUFDUCxJQUFJLEVBQ0osT0FBTyxFQUNQLEdBQUcsRUFDSCxJQUFJLEVBQ0osS0FBSyxFQUNMLE9BQU8sRUFDUCxLQUFLLENBQ047QUFFRCxTQUFTQyxTQUFTQSxDQUFDQyxJQUFJLEVBQUU7RUFDdkIsT0FBT0YsSUFBSSxDQUFDRyxRQUFRLENBQUNELElBQUksQ0FBQztBQUM1QjtBQUVBLFNBQVNFLFlBQVlBLENBQUNGLElBQUksRUFBRTtFQUMxQixPQUFPLENBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQ0MsUUFBUSxDQUFDRCxJQUFJLENBQUM7QUFDL0Q7QUFFQSxTQUFTRyxlQUFlQSxDQUFDQyxLQUFLLEVBQUU7RUFDOUIsT0FDRSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDSCxRQUFRLENBQUNHLEtBQUssQ0FBQyxJQUNoREEsS0FBSyxDQUFDQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQ3pCRCxLQUFLLENBQUNDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFDekJELEtBQUssQ0FBQ0MsVUFBVSxDQUFDLElBQUksQ0FBQztBQUUxQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9hcHAvdmVuZG9ycy92dWVkcmFnZ2FibGUvc3JjL3V0aWwvdGFncy5qcz9jMTczIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhZ3MgPSBbXG4gIFwiYVwiLFxuICBcImFiYnJcIixcbiAgXCJhZGRyZXNzXCIsXG4gIFwiYXJlYVwiLFxuICBcImFydGljbGVcIixcbiAgXCJhc2lkZVwiLFxuICBcImF1ZGlvXCIsXG4gIFwiYlwiLFxuICBcImJhc2VcIixcbiAgXCJiZGlcIixcbiAgXCJiZG9cIixcbiAgXCJibG9ja3F1b3RlXCIsXG4gIFwiYm9keVwiLFxuICBcImJyXCIsXG4gIFwiYnV0dG9uXCIsXG4gIFwiY2FudmFzXCIsXG4gIFwiY2FwdGlvblwiLFxuICBcImNpdGVcIixcbiAgXCJjb2RlXCIsXG4gIFwiY29sXCIsXG4gIFwiY29sZ3JvdXBcIixcbiAgXCJkYXRhXCIsXG4gIFwiZGF0YWxpc3RcIixcbiAgXCJkZFwiLFxuICBcImRlbFwiLFxuICBcImRldGFpbHNcIixcbiAgXCJkZm5cIixcbiAgXCJkaWFsb2dcIixcbiAgXCJkaXZcIixcbiAgXCJkbFwiLFxuICBcImR0XCIsXG4gIFwiZW1cIixcbiAgXCJlbWJlZFwiLFxuICBcImZpZWxkc2V0XCIsXG4gIFwiZmlnY2FwdGlvblwiLFxuICBcImZpZ3VyZVwiLFxuICBcImZvb3RlclwiLFxuICBcImZvcm1cIixcbiAgXCJoMVwiLFxuICBcImgyXCIsXG4gIFwiaDNcIixcbiAgXCJoNFwiLFxuICBcImg1XCIsXG4gIFwiaDZcIixcbiAgXCJoZWFkXCIsXG4gIFwiaGVhZGVyXCIsXG4gIFwiaGdyb3VwXCIsXG4gIFwiaHJcIixcbiAgXCJodG1sXCIsXG4gIFwiaVwiLFxuICBcImlmcmFtZVwiLFxuICBcImltZ1wiLFxuICBcImlucHV0XCIsXG4gIFwiaW5zXCIsXG4gIFwia2JkXCIsXG4gIFwibGFiZWxcIixcbiAgXCJsZWdlbmRcIixcbiAgXCJsaVwiLFxuICBcImxpbmtcIixcbiAgXCJtYWluXCIsXG4gIFwibWFwXCIsXG4gIFwibWFya1wiLFxuICBcIm1hdGhcIixcbiAgXCJtZW51XCIsXG4gIFwibWVudWl0ZW1cIixcbiAgXCJtZXRhXCIsXG4gIFwibWV0ZXJcIixcbiAgXCJuYXZcIixcbiAgXCJub3NjcmlwdFwiLFxuICBcIm9iamVjdFwiLFxuICBcIm9sXCIsXG4gIFwib3B0Z3JvdXBcIixcbiAgXCJvcHRpb25cIixcbiAgXCJvdXRwdXRcIixcbiAgXCJwXCIsXG4gIFwicGFyYW1cIixcbiAgXCJwaWN0dXJlXCIsXG4gIFwicHJlXCIsXG4gIFwicHJvZ3Jlc3NcIixcbiAgXCJxXCIsXG4gIFwicmJcIixcbiAgXCJycFwiLFxuICBcInJ0XCIsXG4gIFwicnRjXCIsXG4gIFwicnVieVwiLFxuICBcInNcIixcbiAgXCJzYW1wXCIsXG4gIFwic2NyaXB0XCIsXG4gIFwic2VjdGlvblwiLFxuICBcInNlbGVjdFwiLFxuICBcInNsb3RcIixcbiAgXCJzbWFsbFwiLFxuICBcInNvdXJjZVwiLFxuICBcInNwYW5cIixcbiAgXCJzdHJvbmdcIixcbiAgXCJzdHlsZVwiLFxuICBcInN1YlwiLFxuICBcInN1bW1hcnlcIixcbiAgXCJzdXBcIixcbiAgXCJzdmdcIixcbiAgXCJ0YWJsZVwiLFxuICBcInRib2R5XCIsXG4gIFwidGRcIixcbiAgXCJ0ZW1wbGF0ZVwiLFxuICBcInRleHRhcmVhXCIsXG4gIFwidGZvb3RcIixcbiAgXCJ0aFwiLFxuICBcInRoZWFkXCIsXG4gIFwidGltZVwiLFxuICBcInRpdGxlXCIsXG4gIFwidHJcIixcbiAgXCJ0cmFja1wiLFxuICBcInVcIixcbiAgXCJ1bFwiLFxuICBcInZhclwiLFxuICBcInZpZGVvXCIsXG4gIFwid2JyXCJcbl07XG5cbmZ1bmN0aW9uIGlzSHRtbFRhZyhuYW1lKSB7XG4gIHJldHVybiB0YWdzLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBpc1RyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gW1widHJhbnNpdGlvbi1ncm91cFwiLCBcIlRyYW5zaXRpb25Hcm91cFwiXS5pbmNsdWRlcyhuYW1lKTtcbn1cblxuZnVuY3Rpb24gaXNIdG1sQXR0cmlidXRlKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgW1wiaWRcIiwgXCJjbGFzc1wiLCBcInJvbGVcIiwgXCJzdHlsZVwiXS5pbmNsdWRlcyh2YWx1ZSkgfHxcbiAgICB2YWx1ZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgfHxcbiAgICB2YWx1ZS5zdGFydHNXaXRoKFwiYXJpYS1cIikgfHxcbiAgICB2YWx1ZS5zdGFydHNXaXRoKFwib25cIilcbiAgKTtcbn1cblxuZXhwb3J0IHsgaXNIdG1sVGFnLCBpc0h0bWxBdHRyaWJ1dGUsIGlzVHJhbnNpdGlvbiB9O1xuIl0sIm5hbWVzIjpbInRhZ3MiLCJpc0h0bWxUYWciLCJuYW1lIiwiaW5jbHVkZXMiLCJpc1RyYW5zaXRpb24iLCJpc0h0bWxBdHRyaWJ1dGUiLCJ2YWx1ZSIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/util/tags.js\n");

/***/ }),

/***/ "./resources/js/app/vendors/vuedraggable/src/vuedraggable.js":
/*!*******************************************************************!*\
  !*** ./resources/js/app/vendors/vuedraggable/src/vuedraggable.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ \"./node_modules/sortablejs/modular/sortable.esm.js\");\n/* harmony import */ var _util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/htmlHelper */ \"./resources/js/app/vendors/vuedraggable/src/util/htmlHelper.js\");\n/* harmony import */ var _util_console__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/console */ \"./resources/js/app/vendors/vuedraggable/src/util/console.js\");\n/* harmony import */ var _core_componentBuilderHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/componentBuilderHelper */ \"./resources/js/app/vendors/vuedraggable/src/core/componentBuilderHelper.js\");\n/* harmony import */ var _core_renderHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/renderHelper */ \"./resources/js/app/vendors/vuedraggable/src/core/renderHelper.js\");\n/* harmony import */ var _core_sortableEvents__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/sortableEvents */ \"./resources/js/app/vendors/vuedraggable/src/core/sortableEvents.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n\n\n\n\n\n\n\nfunction _emit(evtName, evtData) {\n  var _this = this;\n  (0,vue__WEBPACK_IMPORTED_MODULE_6__.nextTick)(function () {\n    return _this.$emit(evtName.toLowerCase(), evtData);\n  });\n}\nfunction _manage(evtName) {\n  var _this2 = this;\n  return function (evtData, originalElement) {\n    if (_this2.realList !== null) {\n      return _this2[\"onDrag\".concat(evtName)](evtData, originalElement);\n    }\n  };\n}\nfunction _manageAndEmit(evtName) {\n  var _this3 = this;\n  var delegateCallBack = _manage.call(this, evtName);\n  return function (evtData, originalElement) {\n    delegateCallBack.call(_this3, evtData, originalElement);\n    _emit.call(_this3, evtName, evtData);\n  };\n}\nvar draggingElement = null;\nvar props = {\n  list: {\n    type: Array,\n    required: false,\n    \"default\": null\n  },\n  modelValue: {\n    type: Array,\n    required: false,\n    \"default\": null\n  },\n  itemKey: {\n    type: [String, Function],\n    required: true\n  },\n  clone: {\n    type: Function,\n    \"default\": function _default(original) {\n      return original;\n    }\n  },\n  tag: {\n    type: String,\n    \"default\": \"div\"\n  },\n  move: {\n    type: Function,\n    \"default\": null\n  },\n  componentData: {\n    type: Object,\n    required: false,\n    \"default\": null\n  }\n};\nvar emits = [\"update:modelValue\", \"change\"].concat(_toConsumableArray([].concat(_toConsumableArray(_core_sortableEvents__WEBPACK_IMPORTED_MODULE_5__.events.manageAndEmit), _toConsumableArray(_core_sortableEvents__WEBPACK_IMPORTED_MODULE_5__.events.emit)).map(function (evt) {\n  return evt.toLowerCase();\n})));\nvar draggableComponent = (0,vue__WEBPACK_IMPORTED_MODULE_6__.defineComponent)({\n  name: \"draggable\",\n  inheritAttrs: false,\n  props: props,\n  emits: emits,\n  data: function data() {\n    return {\n      error: false\n    };\n  },\n  render: function render() {\n    try {\n      this.error = false;\n      var $slots = this.$slots,\n        $attrs = this.$attrs,\n        tag = this.tag,\n        componentData = this.componentData,\n        realList = this.realList,\n        getKey = this.getKey;\n      var componentStructure = (0,_core_renderHelper__WEBPACK_IMPORTED_MODULE_4__.computeComponentStructure)({\n        $slots: $slots,\n        tag: tag,\n        realList: realList,\n        getKey: getKey\n      });\n      this.componentStructure = componentStructure;\n      var attributes = (0,_core_componentBuilderHelper__WEBPACK_IMPORTED_MODULE_3__.getComponentAttributes)({\n        $attrs: $attrs,\n        componentData: componentData\n      });\n      return componentStructure.render(vue__WEBPACK_IMPORTED_MODULE_6__.h, attributes);\n    } catch (err) {\n      this.error = true;\n      return (0,vue__WEBPACK_IMPORTED_MODULE_6__.h)(\"pre\", {\n        style: {\n          color: \"red\"\n        }\n      }, err.stack);\n    }\n  },\n  created: function created() {\n    if (this.list !== null && this.modelValue !== null) {\n      _util_console__WEBPACK_IMPORTED_MODULE_2__.console.error(\"modelValue and list props are mutually exclusive! Please set one or another.\");\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n    if (this.error) {\n      return;\n    }\n    var $attrs = this.$attrs,\n      $el = this.$el,\n      componentStructure = this.componentStructure;\n    componentStructure.updated();\n    var sortableOptions = (0,_core_componentBuilderHelper__WEBPACK_IMPORTED_MODULE_3__.createSortableOption)({\n      $attrs: $attrs,\n      callBackBuilder: {\n        manageAndEmit: function manageAndEmit(event) {\n          return _manageAndEmit.call(_this4, event);\n        },\n        emit: function emit(event) {\n          return _emit.bind(_this4, event);\n        },\n        manage: function manage(event) {\n          return _manage.call(_this4, event);\n        }\n      }\n    });\n    var targetDomElement = $el.nodeType === 1 ? $el : $el.parentElement;\n    this._sortable = new sortablejs__WEBPACK_IMPORTED_MODULE_0__[\"default\"](targetDomElement, sortableOptions);\n    this.targetDomElement = targetDomElement;\n    targetDomElement.__draggable_component__ = this;\n  },\n  updated: function updated() {\n    this.componentStructure.updated();\n  },\n  beforeUnmount: function beforeUnmount() {\n    if (this._sortable !== undefined) this._sortable.destroy();\n  },\n  computed: {\n    realList: function realList() {\n      var list = this.list;\n      return list ? list : this.modelValue;\n    },\n    getKey: function getKey() {\n      var itemKey = this.itemKey;\n      if (typeof itemKey === \"function\") {\n        return itemKey;\n      }\n      return function (element) {\n        return element[itemKey];\n      };\n    }\n  },\n  watch: {\n    $attrs: {\n      handler: function handler(newOptionValue) {\n        var _sortable = this._sortable;\n        if (!_sortable) return;\n        (0,_core_componentBuilderHelper__WEBPACK_IMPORTED_MODULE_3__.getValidSortableEntries)(newOptionValue).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n          _sortable.option(key, value);\n        });\n      },\n      deep: true\n    }\n  },\n  methods: {\n    getUnderlyingVm: function getUnderlyingVm(domElement) {\n      return this.componentStructure.getUnderlyingVm(domElement) || null;\n    },\n    getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(htmElement) {\n      //TODO check case where you need to see component children\n      return htmElement.__draggable_component__;\n    },\n    emitChanges: function emitChanges(evt) {\n      var _this5 = this;\n      (0,vue__WEBPACK_IMPORTED_MODULE_6__.nextTick)(function () {\n        return _this5.$emit(\"change\", evt);\n      });\n    },\n    alterList: function alterList(onList) {\n      if (this.list) {\n        onList(this.list);\n        return;\n      }\n      var newList = _toConsumableArray(this.modelValue);\n      onList(newList);\n      this.$emit(\"update:modelValue\", newList);\n    },\n    spliceList: function spliceList() {\n      var _arguments = arguments;\n      var spliceList = function spliceList(list) {\n        return list.splice.apply(list, _toConsumableArray(_arguments));\n      };\n      this.alterList(spliceList);\n    },\n    updatePosition: function updatePosition(oldIndex, newIndex) {\n      var updatePosition = function updatePosition(list) {\n        return list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);\n      };\n      this.alterList(updatePosition);\n    },\n    getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref3) {\n      var to = _ref3.to,\n        related = _ref3.related;\n      var component = this.getUnderlyingPotencialDraggableComponent(to);\n      if (!component) {\n        return {\n          component: component\n        };\n      }\n      var list = component.realList;\n      var context = {\n        list: list,\n        component: component\n      };\n      if (to !== related && list) {\n        var destination = component.getUnderlyingVm(related) || {};\n        return _objectSpread(_objectSpread({}, destination), context);\n      }\n      return context;\n    },\n    getVmIndexFromDomIndex: function getVmIndexFromDomIndex(domIndex) {\n      return this.componentStructure.getVmIndexFromDomIndex(domIndex, this.targetDomElement);\n    },\n    onDragStart: function onDragStart(evt) {\n      this.context = this.getUnderlyingVm(evt.item);\n      evt.item._underlying_vm_ = this.clone(this.context.element);\n      draggingElement = evt.item;\n    },\n    onDragAdd: function onDragAdd(evt) {\n      var element = evt.item._underlying_vm_;\n      if (element === undefined) {\n        return;\n      }\n      (0,_util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__.removeNode)(evt.item);\n      var newIndex = this.getVmIndexFromDomIndex(evt.newIndex);\n      this.spliceList(newIndex, 0, element);\n      var added = {\n        element: element,\n        newIndex: newIndex\n      };\n      this.emitChanges({\n        added: added\n      });\n    },\n    onDragRemove: function onDragRemove(evt) {\n      (0,_util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__.insertNodeAt)(this.$el, evt.item, evt.oldIndex);\n      if (evt.pullMode === \"clone\") {\n        (0,_util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__.removeNode)(evt.clone);\n        return;\n      }\n      var _this$context = this.context,\n        oldIndex = _this$context.index,\n        element = _this$context.element;\n      this.spliceList(oldIndex, 1);\n      var removed = {\n        element: element,\n        oldIndex: oldIndex\n      };\n      this.emitChanges({\n        removed: removed\n      });\n    },\n    onDragUpdate: function onDragUpdate(evt) {\n      (0,_util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__.removeNode)(evt.item);\n      (0,_util_htmlHelper__WEBPACK_IMPORTED_MODULE_1__.insertNodeAt)(evt.from, evt.item, evt.oldIndex);\n      var oldIndex = this.context.index;\n      var newIndex = this.getVmIndexFromDomIndex(evt.newIndex);\n      this.updatePosition(oldIndex, newIndex);\n      var moved = {\n        element: this.context.element,\n        oldIndex: oldIndex,\n        newIndex: newIndex\n      };\n      this.emitChanges({\n        moved: moved\n      });\n    },\n    computeFutureIndex: function computeFutureIndex(relatedContext, evt) {\n      if (!relatedContext.element) {\n        return 0;\n      }\n      var domChildren = _toConsumableArray(evt.to.children).filter(function (el) {\n        return el.style[\"display\"] !== \"none\";\n      });\n      var currentDomIndex = domChildren.indexOf(evt.related);\n      var currentIndex = relatedContext.component.getVmIndexFromDomIndex(currentDomIndex);\n      var draggedInList = domChildren.indexOf(draggingElement) !== -1;\n      return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;\n    },\n    onDragMove: function onDragMove(evt, originalEvent) {\n      var move = this.move,\n        realList = this.realList;\n      if (!move || !realList) {\n        return true;\n      }\n      var relatedContext = this.getRelatedContextFromMoveEvent(evt);\n      var futureIndex = this.computeFutureIndex(relatedContext, evt);\n      var draggedContext = _objectSpread(_objectSpread({}, this.context), {}, {\n        futureIndex: futureIndex\n      });\n      var sendEvent = _objectSpread(_objectSpread({}, evt), {}, {\n        relatedContext: relatedContext,\n        draggedContext: draggedContext\n      });\n      return move(sendEvent, originalEvent);\n    },\n    onDragEnd: function onDragEnd() {\n      draggingElement = null;\n    }\n  }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (draggableComponent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app/vendors/vuedraggable/src/vuedraggable.js\n");

/***/ })

}]);